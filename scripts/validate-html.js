#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä HTML
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ HTML —Ñ–∞–π–ª–∞—Ö
 */

const fs = require('fs');
const path = require('path');

const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function validateHTML(content, filename) {
    const errors = [];
    const warnings = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏
    const checks = [
        {
            name: '–û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏',
            regex: /<([a-z][a-z0-9]*)[^>]*>/gi,
            closingRegex: /<\/([a-z][a-z0-9]*)>/gi,
            check: (matches, closingMatches) => {
                const openTags = matches.map(m => m.match(/<([a-z][a-z0-9]*)/i)[1].toLowerCase());
                const closeTags = closingMatches.map(m => m.match(/<\/([a-z][a-z0-9]*)/i)[1].toLowerCase());
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
                const selfClosing = ['img', 'br', 'hr', 'input', 'meta', 'link'];
                const filteredOpenTags = openTags.filter(tag => !selfClosing.includes(tag));
                
                // –°—á–∏—Ç–∞–µ–º —Ç–µ–≥–∏
                const tagCount = {};
                filteredOpenTags.forEach(tag => {
                    tagCount[tag] = (tagCount[tag] || 0) + 1;
                });
                
                closeTags.forEach(tag => {
                    tagCount[tag] = (tagCount[tag] || 0) - 1;
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
                Object.entries(tagCount).forEach(([tag, count]) => {
                    if (count > 0) {
                        errors.push(`–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥: <${tag}> (${count} —Ä–∞–∑)`);
                    } else if (count < 0) {
                        errors.push(`–õ–∏—à–Ω–∏–π –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥: </${tag}> (${Math.abs(count)} —Ä–∞–∑)`);
                    }
                });
            }
        },
        {
            name: '–ê—Ç—Ä–∏–±—É—Ç—ã alt –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            regex: /<img[^>]*>/gi,
            check: (matches) => {
                matches.forEach((match, index) => {
                    if (!match.includes('alt=')) {
                        warnings.push(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #${index + 1} –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ alt`);
                    }
                });
            }
        },
        {
            name: '–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID',
            regex: /id=["']([^"']+)["']/gi,
            check: (matches) => {
                const ids = matches.map(m => m.match(/id=["']([^"']+)["']/i)[1]);
                const duplicates = ids.filter((id, index) => ids.indexOf(id) !== index);
                if (duplicates.length > 0) {
                    errors.push(`–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID: ${[...new Set(duplicates)].join(', ')}`);
                }
            }
        },
        {
            name: '–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ DOCTYPE',
            check: () => {
                if (!content.includes('<!DOCTYPE html>')) {
                    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DOCTYPE');
                }
            }
        },
        {
            name: '–ö–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8',
            check: () => {
                if (!content.includes('charset="UTF-8"') && !content.includes("charset='UTF-8'")) {
                    warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8');
                }
            }
        },
        {
            name: 'Viewport meta tag',
            check: () => {
                if (!content.includes('viewport')) {
                    warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å viewport meta tag –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
                }
            }
        }
    ];
    
    checks.forEach(check => {
        if (check.regex) {
            const matches = content.match(check.regex) || [];
            if (check.closingRegex) {
                const closingMatches = content.match(check.closingRegex) || [];
                check.check(matches, closingMatches);
            } else {
                check.check(matches);
            }
        } else {
            check.check();
        }
    });
    
    return { errors, warnings };
}

function main() {
    log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é HTML...', 'blue');
    log('');
    
    const files = [
        'views/index.ejs',
        'views/prices.ejs',
        'views/schedule.ejs'
    ];
    
    let totalErrors = 0;
    let totalWarnings = 0;
    
    files.forEach(file => {
        log(`üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${file}`, 'blue');
        
        try {
            const content = fs.readFileSync(file, 'utf8');
            const result = validateHTML(content, file);
            
            if (result.errors.length === 0 && result.warnings.length === 0) {
                log(`  ‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω`, 'green');
            } else {
                if (result.errors.length > 0) {
                    log(`  ‚ùå –û—à–∏–±–∫–∏ (${result.errors.length}):`, 'red');
                    result.errors.forEach(error => {
                        log(`    - ${error}`, 'red');
                    });
                    totalErrors += result.errors.length;
                }
                
                if (result.warnings.length > 0) {
                    log(`  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (${result.warnings.length}):`, 'yellow');
                    result.warnings.forEach(warning => {
                        log(`    - ${warning}`, 'yellow');
                    });
                    totalWarnings += result.warnings.length;
                }
            }
        } catch (error) {
            log(`  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`, 'red');
            totalErrors++;
        }
        
        log('');
    });
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', 'blue');
    log(`  –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${totalErrors}`, totalErrors === 0 ? 'green' : 'red');
    log(`  –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${totalWarnings}`, totalWarnings === 0 ? 'green' : 'yellow');
    
    if (totalErrors === 0) {
        log('‚úÖ HTML –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'green');
    } else {
        log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ HTML', 'red');
    }
    
    log('');
    log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 'yellow');
    log('1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏');
    log('2. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞');
    log('3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω –≤–∞–ª–∏–¥–∞—Ç–æ—Ä W3C –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
    log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (accessibility) —Å–∞–π—Ç–∞');
}

if (require.main === module) {
    main();
}

module.exports = { validateHTML }; 