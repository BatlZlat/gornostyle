#!/usr/bin/env node

const { pool } = require('../src/db/index');
const fs = require('fs');
const path = require('path');

console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n');

async function updatePhotoUrls() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        const result = await pool.query('SELECT id, full_name, photo_url FROM trainers WHERE photo_url IS NOT NULL');
        const trainers = result.rows;
        
        if (trainers.length === 0) {
            console.log('‚úÖ –ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            return;
        }
        
        console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${trainers.length} —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:\n`);
        
        let updatedCount = 0;
        let skippedCount = 0;
        
        for (const trainer of trainers) {
            if (!trainer.photo_url) continue;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
            const fileName = path.basename(trainer.photo_url);
            const fileNameWithoutExt = path.parse(fileName).name;
            const fileExt = path.parse(fileName).ext;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ WebP –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞
            const webpFileName = `${fileNameWithoutExt}.webp`;
            const webpPath = path.join('public', 'images', 'trainers', webpFileName);
            
            if (fs.existsSync(webpPath)) {
                // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const newPhotoUrl = `/images/trainers/${webpFileName}`;
                
                await pool.query(
                    'UPDATE trainers SET photo_url = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
                    [newPhotoUrl, trainer.id]
                );
                
                console.log(`‚úÖ ${trainer.full_name}: ${fileName} ‚Üí ${webpFileName}`);
                updatedCount++;
            } else {
                console.log(`‚è≠Ô∏è  ${trainer.full_name}: ${fileName} (WebP –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)`);
                skippedCount++;
            }
        }
        
        console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
        console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
        console.log(`   üìÅ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤: ${trainers.length}`);
        
        if (updatedCount > 0) {
            console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
            console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            console.log('   - –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫:', error);
        process.exit(1);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updatePhotoUrls(); 