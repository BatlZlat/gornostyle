#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
const filePath = path.join(__dirname, '../src/bot/client-bot.js');

try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    console.log('üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª client-bot.js...');
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Ç–æ—Ä–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
    console.log('üîç –ò—â–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏...');
    
    // –ò—â–µ–º –≤—Å–µ case –±–ª–æ–∫–∏
    const caseMatches = [...content.matchAll(/case\s+'(\w+)':\s*\{/g)];
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${caseMatches.length} case –±–ª–æ–∫–æ–≤`);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Ç–æ—Ä–æ–π –±–ª–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ 2146-2413)
    let secondBlockStart = -1;
    let secondBlockEnd = -1;
    
    // –ò—â–µ–º –≤—Ç–æ—Ä–æ–π case 'wait_start'
    const waitStartMatches = [...content.matchAll(/case\s+'wait_start':\s*\{/g)];
    if (waitStartMatches.length >= 2) {
        secondBlockStart = waitStartMatches[1].index;
        console.log(`üìç –í—Ç–æ—Ä–æ–π –±–ª–æ–∫ wait_start –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${secondBlockStart}`);
        
        // –ò—â–µ–º –∫–æ–Ω–µ—Ü –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞ training_type
        const trainingTypeMatches = [...content.matchAll(/case\s+'training_type':\s*\{/g)];
        if (trainingTypeMatches.length >= 2) {
            const secondTrainingTypeStart = trainingTypeMatches[1].index;
            
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ (—Å–ª–µ–¥—É—é—â–∏–π case –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞)
            let braceCount = 0;
            let inCase = false;
            let pos = secondTrainingTypeStart;
            
            while (pos < content.length) {
                const char = content[pos];
                
                if (char === '{') {
                    braceCount++;
                    inCase = true;
                } else if (char === '}') {
                    braceCount--;
                    if (inCase && braceCount === 0) {
                        // –ù–∞—à–ª–∏ –∫–æ–Ω–µ—Ü case –±–ª–æ–∫–∞
                        secondBlockEnd = pos + 1;
                        break;
                    }
                }
                pos++;
            }
            
            console.log(`üìç –ö–æ–Ω–µ—Ü –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${secondBlockEnd}`);
        }
    }
    
    if (secondBlockStart === -1 || secondBlockEnd === -1) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä–∞–Ω–∏—Ü—ã –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞');
        process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–ª–æ–∫
    const blockContent = content.substring(secondBlockStart, secondBlockEnd);
    console.log(`üìè –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${blockContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
    const linesBefore = content.substring(0, secondBlockStart).split('\n').length;
    const linesAfter = content.substring(secondBlockEnd).split('\n').length;
    const linesToRemove = content.split('\n').length - linesBefore - linesAfter;
    
    console.log(`üìä –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ ${linesBefore + 1} - ${linesBefore + linesToRemove}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    const backupPath = filePath + '.backup.' + Date.now();
    fs.writeFileSync(backupPath, content);
    console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –±–ª–æ–∫
    const newContent = content.substring(0, secondBlockStart) + content.substring(secondBlockEnd);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(filePath, newContent);
    
    console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    console.log(`üìà –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ ${content.length - newContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedContent = fs.readFileSync(filePath, 'utf8');
    const remainingWaitStart = [...updatedContent.matchAll(/case\s+'wait_start':\s*\{/g)];
    const remainingHasChild = [...updatedContent.matchAll(/case\s+'has_child':\s*\{/g)];
    
    console.log(`üîç –û—Å—Ç–∞–ª–æ—Å—å –±–ª–æ–∫–æ–≤ wait_start: ${remainingWaitStart.length}`);
    console.log(`üîç –û—Å—Ç–∞–ª–æ—Å—å –±–ª–æ–∫–æ–≤ has_child: ${remainingHasChild.length}`);
    
    if (remainingWaitStart.length === 1 && remainingHasChild.length === 1) {
        console.log('üéâ –£—Å–ø–µ—Ö! –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ.');
    } else {
        console.log('‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, –æ—Å—Ç–∞–ª–∏—Å—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é.');
    }
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
}
