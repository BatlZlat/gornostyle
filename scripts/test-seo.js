#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∞–π—Ç–∞
 * –ó–∞–ø—É—Å–∫: node scripts/test-seo.js
 */

const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFile(filePath, description) {
    try {
        if (fs.existsSync(filePath)) {
            const content = fs.readFileSync(filePath, 'utf8');
            log(`‚úÖ ${description}`, 'green');
            return { exists: true, content };
        } else {
            log(`‚ùå ${description} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'red');
            return { exists: false, content: null };
        }
    } catch (error) {
        log(`‚ùå ${description} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${error.message}`, 'red');
        return { exists: false, content: null };
    }
}

function checkMetaTags(content, requiredTags) {
    const results = [];
    
    for (const tag of requiredTags) {
        if (content.includes(tag)) {
            results.push({ tag, found: true });
        } else {
            results.push({ tag, found: false });
        }
    }
    
    return results;
}

function checkImages(content) {
    const imgRegex = /<img[^>]+>/g;
    const images = content.match(imgRegex) || [];
    
    const results = {
        total: images.length,
        withAlt: 0,
        withoutAlt: 0,
        withLazy: 0
    };
    
    images.forEach(img => {
        if (img.includes('alt=')) {
            results.withAlt++;
        } else {
            results.withoutAlt++;
        }
        
        if (img.includes('loading="lazy"')) {
            results.withLazy++;
        }
    });
    
    return results;
}

function main() {
    log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...', 'blue');
    log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    const files = [
        { path: 'views/index.ejs', desc: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
        { path: 'views/prices.ejs', desc: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ü–µ–Ω' },
        { path: 'views/schedule.ejs', desc: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã' },
        { path: 'public/sitemap.xml', desc: 'Sitemap.xml' },
        { path: 'public/robots.txt', desc: 'Robots.txt' },
        { path: 'public/css/style.css', desc: 'CSS —Ñ–∞–π–ª' }
    ];
    
    const results = {};
    
    for (const file of files) {
        const result = checkFile(file.path, file.desc);
        results[file.path] = result;
    }
    
    log('');
    log('üìä –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤:', 'blue');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (results['views/index.ejs'].exists) {
        const content = results['views/index.ejs'].content;
        
        const requiredMetaTags = [
            '<meta name="description"',
            '<meta name="keywords"',
            '<meta property="og:title"',
            '<meta property="og:description"',
            '<meta property="og:image"',
            '<meta name="twitter:card"',
            '<link rel="canonical"',
            'type="application/ld+json"'
        ];
        
        const metaResults = checkMetaTags(content, requiredMetaTags);
        
        metaResults.forEach(result => {
            if (result.found) {
                log(`  ‚úÖ ${result.tag}`, 'green');
            } else {
                log(`  ‚ùå ${result.tag}`, 'red');
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        log('');
        log('üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', 'blue');
        const imageResults = checkImages(content);
        
        log(`  üì∏ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageResults.total}`, 'blue');
        log(`  ‚úÖ –° alt-—Ç–µ–∫—Å—Ç–æ–º: ${imageResults.withAlt}`, 'green');
        log(`  ‚ùå –ë–µ–∑ alt-—Ç–µ–∫—Å—Ç–∞: ${imageResults.withoutAlt}`, imageResults.withoutAlt > 0 ? 'red' : 'green');
        log(`  üöÄ –° lazy loading: ${imageResults.withLazy}`, 'blue');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä—ã—Ç—ã–π SEO-–±–ª–æ–∫
        if (content.includes('seo-keywords')) {
            log('  ‚úÖ –°–∫—Ä—ã—Ç—ã–π SEO-–±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω', 'green');
        } else {
            log('  ‚ùå –°–∫—Ä—ã—Ç—ã–π SEO-–±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º sitemap
    log('');
    log('üó∫Ô∏è –ê–Ω–∞–ª–∏–∑ sitemap.xml:', 'blue');
    if (results['public/sitemap.xml'].exists) {
        const sitemapContent = results['public/sitemap.xml'].content;
        const urls = sitemapContent.match(/<loc>(.*?)<\/loc>/g) || [];
        log(`  üìÑ –ù–∞–π–¥–µ–Ω–æ URL: ${urls.length}`, 'green');
        
        urls.forEach(url => {
            const cleanUrl = url.replace(/<\/?loc>/g, '');
            log(`    ${cleanUrl}`, 'blue');
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º robots.txt
    log('');
    log('ü§ñ –ê–Ω–∞–ª–∏–∑ robots.txt:', 'blue');
    if (results['public/robots.txt'].exists) {
        const robotsContent = results['public/robots.txt'].content;
        
        if (robotsContent.includes('Sitemap:')) {
            log('  ‚úÖ Sitemap —É–∫–∞–∑–∞–Ω', 'green');
        } else {
            log('  ‚ùå Sitemap –Ω–µ —É–∫–∞–∑–∞–Ω', 'red');
        }
        
        if (robotsContent.includes('Disallow:')) {
            log('  ‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'green');
        } else {
            log('  ‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'yellow');
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –±–ª–æ–∫–∞
    log('');
    log('üé® –ê–Ω–∞–ª–∏–∑ CSS:', 'blue');
    if (results['public/css/style.css'].exists) {
        const cssContent = results['public/css/style.css'].content;
        
        if (cssContent.includes('.seo-keywords')) {
            log('  ‚úÖ CSS –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ SEO-–±–ª–æ–∫–∞ –Ω–∞–π–¥–µ–Ω', 'green');
        } else {
            log('  ‚ùå CSS –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ SEO-–±–ª–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
        }
        
        if (cssContent.includes('.visually-hidden')) {
            log('  ‚úÖ CSS –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω', 'green');
        } else {
            log('  ‚ùå CSS –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
        }
    }
    
    log('');
    log('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 'yellow');
    log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ./scripts/optimize-images.sh');
    log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç —á–µ—Ä–µ–∑ Google PageSpeed Insights');
    log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É —á–µ—Ä–µ–∑ Google Rich Results Test');
    log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ sitemap —á–µ—Ä–µ–∑ Google Search Console');
    log('5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ robots.txt –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://gornostyle72.ru/robots.txt');
    
    log('');
    log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'green');
}

if (require.main === module) {
    main();
}

module.exports = { checkFile, checkMetaTags, checkImages }; 