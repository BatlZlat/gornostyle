#!/usr/bin/env node

const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

console.log('üñºÔ∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –≤ WebP —Ñ–æ—Ä–º–∞—Ç\n');

const trainersDir = path.join('public', 'images', 'trainers');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (!fs.existsSync(trainersDir)) {
    console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è trainers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    process.exit(1);
}

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const files = fs.readdirSync(trainersDir);
const imageFiles = files.filter(file => {
    const ext = path.extname(file).toLowerCase();
    return ['.jpg', '.jpeg', '.png', '.bmp', '.gif'].includes(ext);
});

if (imageFiles.length === 0) {
    console.log('‚úÖ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
    process.exit(0);
}

console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n`);

let convertedCount = 0;
let errorCount = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
function formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
async function convertImages() {
    for (const file of imageFiles) {
        const filePath = path.join(trainersDir, file);
        const fileName = path.parse(file).name;
        const webpPath = path.join(trainersDir, `${fileName}.webp`);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ WebP –≤–µ—Ä—Å–∏—è
            if (fs.existsSync(webpPath)) {
                console.log(`‚è≠Ô∏è  ${file} ‚Üí ${fileName}.webp (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`);
                continue;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            const originalStats = fs.statSync(filePath);
            const originalSize = originalStats.size;
            
            console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é ${file}...`);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP
            await sharp(filePath)
                .resize({ height: 200, fit: 'cover', position: 'centre' })
                .webp({ quality: 85, effort: 6 })
                .toFile(webpPath);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            const webpStats = fs.statSync(webpPath);
            const webpSize = webpStats.size;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
            const compressionRatio = ((originalSize - webpSize) / originalSize * 100).toFixed(1);
            
            console.log(`‚úÖ ${file} ‚Üí ${fileName}.webp`);
            console.log(`   –†–∞–∑–º–µ—Ä: ${formatBytes(originalSize)} ‚Üí ${formatBytes(webpSize)} (—Å–∂–∞—Ç–∏–µ: ${compressionRatio}%)\n`);
            
            convertedCount++;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${file}:`, error.message);
            errorCount++;
        }
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${convertedCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${imageFiles.length}`);
    
    if (convertedCount > 0) {
        console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        console.log('   - –û–±–Ω–æ–≤–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–æ–≤—ã–µ .webp —Ñ–∞–π–ª—ã');
        console.log('   - –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
convertImages().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
}); 