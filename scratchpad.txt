# Проект Ski-instruktor

## Текущий статус
- Выполнен переход с модальных окон на отдельные страницы
- Созданы базовые страницы для всех основных функций
- Реализованы основные JavaScript обработчики

## Анализ структуры данных

### Тренеры (trainers)
```sql
CREATE TABLE trainers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(255) NOT NULL,
    sport_type VARCHAR(100) NOT NULL,
    experience INTEGER NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT true,
    dismissed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Группы (groups)
```sql
CREATE TABLE groups (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Тренировки (trainings)
```sql
CREATE TABLE trainings (
    id SERIAL PRIMARY KEY,
    date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    group_id INTEGER REFERENCES groups(id),
    trainer_id INTEGER REFERENCES trainers(id),
    simulator_id INTEGER NOT NULL,
    max_participants INTEGER NOT NULL,
    skill_level INTEGER CHECK (skill_level BETWEEN 1 AND 5),
    status VARCHAR(20) DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Участники тренировок (training_participants)
```sql
CREATE TABLE training_participants (
    id SERIAL PRIMARY KEY,
    training_id INTEGER REFERENCES trainings(id),
    client_id INTEGER REFERENCES clients(id),
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Клиенты (clients)
```sql
CREATE TABLE clients (
    id SERIAL PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(255),
    birth_date DATE,
    has_child BOOLEAN DEFAULT false,
    child_name VARCHAR(255),
    child_birth_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Платежи (payments)
```sql
CREATE TABLE payments (
    id SERIAL PRIMARY KEY,
    amount DECIMAL(10,2) NOT NULL,
    description TEXT,
    payment_link VARCHAR(255),
    expires_at TIMESTAMP,
    status VARCHAR(20) DEFAULT 'pending',
    client_id INTEGER REFERENCES clients(id),
    training_id INTEGER REFERENCES trainings(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Расписание (schedules)
```sql
CREATE TABLE schedules (
    id SERIAL PRIMARY KEY,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    weekdays INTEGER[] NOT NULL,
    simulator_id INTEGER NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    auto_schedule BOOLEAN DEFAULT false,
    auto_schedule_day INTEGER,
    auto_schedule_time TIME,
    timezone VARCHAR(50) DEFAULT 'Asia/Yekaterinburg',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Необходимые доработки

### 1. Система уведомлений
- Добавить таблицу для уведомлений
```sql
CREATE TABLE notifications (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    user_type VARCHAR(20) NOT NULL, -- client/trainer/admin
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    type VARCHAR(50) NOT NULL, -- info/warning/error
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### 2. Система сертификатов
- Добавить таблицу для сертификатов
```sql
CREATE TABLE certificates (
    id SERIAL PRIMARY KEY,
    certificate_number VARCHAR(50) UNIQUE NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    status VARCHAR(20) DEFAULT 'active',
    client_id INTEGER REFERENCES clients(id),
    expiry_date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    used_at TIMESTAMP
);
```

### 3. Доработка страниц

#### Страница тренеров
- Добавить фильтрацию по статусу (активные/уволенные)
  ```javascript
  // Пример реализации фильтрации
  const filterTrainers = (status) => {
    const url = new URL('/api/trainers');
    url.searchParams.append('status', status);
    return fetch(url).then(res => res.json());
  };
  ```
- Добавить поиск по имени
  ```javascript
  // Пример реализации поиска
  const searchTrainers = (query) => {
    const url = new URL('/api/trainers/search');
    url.searchParams.append('q', query);
    return fetch(url).then(res => res.json());
  };
  ```
- Добавить сортировку по опыту работы
  ```javascript
  // Пример реализации сортировки
  const sortTrainers = (field, order) => {
    const url = new URL('/api/trainers');
    url.searchParams.append('sort', field);
    url.searchParams.append('order', order);
    return fetch(url).then(res => res.json());
  };
  ```

#### Страница клиентов
- Добавить фильтрацию по возрасту
  ```sql
  -- SQL для фильтрации по возрасту
  SELECT * FROM clients 
  WHERE EXTRACT(YEAR FROM AGE(CURRENT_DATE, birth_date)) BETWEEN $1 AND $2;
  ```
- Добавить поиск по имени и телефону
  ```sql
  -- SQL для поиска
  SELECT * FROM clients 
  WHERE full_name ILIKE $1 OR phone LIKE $2;
  ```
- Добавить историю тренировок клиента
  ```sql
  -- SQL для истории тренировок
  SELECT t.*, tp.status
  FROM trainings t
  JOIN training_participants tp ON t.id = tp.training_id
  WHERE tp.client_id = $1
  ORDER BY t.date DESC, t.start_time DESC;
  ```

#### Страница расписания
- Добавить календарь на месяц
  ```javascript
  // Пример компонента календаря
  const Calendar = {
    init() {
      this.loadMonthData();
      this.bindEvents();
    },
    
    async loadMonthData(year, month) {
      const url = new URL('/api/schedule/month');
      url.searchParams.append('year', year);
      url.searchParams.append('month', month);
      const data = await fetch(url).then(res => res.json());
      this.renderCalendar(data);
    }
  };
  ```
- Добавить фильтрацию по тренажерам
  ```javascript
  // Пример фильтрации по тренажерам
  const filterBySimulator = (simulatorId) => {
    const url = new URL('/api/schedule/simulator');
    url.searchParams.append('simulator_id', simulatorId);
    return fetch(url).then(res => res.json());
  };
  ```
- Добавить статистику загруженности
  ```sql
  -- SQL для статистики загруженности
  SELECT 
    date,
    COUNT(*) as total_trainings,
    SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
    AVG(participants_count::float / max_participants) as occupancy_rate
  FROM trainings
  WHERE date BETWEEN $1 AND $2
  GROUP BY date
  ORDER BY date;
  ```

#### Страница финансов
- Добавить фильтрацию по периоду
  ```sql
  -- SQL для фильтрации платежей по периоду
  SELECT * FROM payments
  WHERE created_at BETWEEN $1 AND $2;
  ```
- Добавить статистику по типам оплат
  ```sql
  -- SQL для статистики платежей
  SELECT 
    DATE_TRUNC('month', created_at) as month,
    COUNT(*) as total_payments,
    SUM(amount) as total_amount,
    AVG(amount) as avg_amount
  FROM payments
  WHERE created_at BETWEEN $1 AND $2
  GROUP BY DATE_TRUNC('month', created_at)
  ORDER BY month;
  ```
- Добавить экспорт в Excel
  ```javascript
  // Пример функции экспорта
  const exportToExcel = async (filters) => {
    const response = await fetch('/api/finance/export', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(filters)
    });
    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'finance-report.xlsx';
    a.click();
  };
  ```

## План следующих действий

1. Создание системы уведомлений
   - Создать таблицу notifications
   - Разработать API для работы с уведомлениями
   - Интегрировать уведомления в интерфейс

2. Разработка системы сертификатов
   - Создать таблицу certificates
   - Разработать интерфейс управления сертификатами
   - Интегрировать сертификаты в систему оплаты

3. Улучшение пользовательского интерфейса
   - Добавить фильтры и поиск на все основные страницы
   - Улучшить отображение статистики
   - Добавить интерактивный календарь

4. Оптимизация производительности
   - Добавить индексы в базу данных
   - Оптимизировать запросы
   - Реализовать кэширование данных

5. Тестирование
   - Написать unit-тесты
   - Провести нагрузочное тестирование
   - Проверить безопасность

## Текущие проблемы и риски

1. Безопасность
   - Необходимо реализовать систему ролей и прав доступа
   - Добавить защиту от SQL-инъекций
   - Реализовать логирование действий пользователей

2. Масштабируемость
   - Подготовить систему к увеличению нагрузки
   - Оптимизировать работу с базой данных
   - Реализовать систему кэширования

3. Интеграция
   - Необходимо интегрировать платежную систему
   - Добавить интеграцию с календарями (Google Calendar, iCal)
   - Реализовать API для мобильного приложения

# Ski-instruktor - Система управления горнолыжными тренажерами

## Функциональность

### Управление группами
- Создание новых групп с названием и описанием
- Просмотр списка всех групп
- Редактирование существующих групп
- Удаление групп
- Интеграция с системой создания тренировок

#### Страницы
1. **Управление группами** (`groups.html`)
   - Список всех групп с названием и описанием
   - Кнопка создания новой группы
   - Возможность редактирования и удаления групп
   - Навигация к админ-панели

2. **Создание/редактирование группы** (`create-group.html`)
   - Форма для ввода названия и описания группы
   - Валидация обязательных полей
   - Возврат к списку групп

#### API Endpoints
- `GET /api/groups` - получение списка всех групп
- `POST /api/groups` - создание новой группы
- `GET /api/groups/:id` - получение группы по ID
- `PUT /api/groups/:id` - обновление группы
- `DELETE /api/groups/:id` - удаление группы

#### База данных
Таблица `groups`:
- `id` (SERIAL PRIMARY KEY)
- `name` (VARCHAR(100) NOT NULL)
- `description` (TEXT)
- `created_at` (TIMESTAMP)
- `updated_at` (TIMESTAMP)

# План интеграции Telegram бота с системой бронирования

## Фон и мотивация
Необходимо создать Telegram бота для удобного управления бронированиями и личным кабинетом клиентов. Бот должен интегрироваться с существующей системой бронирования и предоставлять пользователям удобный интерфейс для управления своими записями.

## Ключевые задачи и анализ
1. Интеграция с существующей базой данных
   - Использование существующих таблиц clients, children, wallets
   - Добавление новых полей для Telegram (telegram_id, username, nickname)
   - Создание уникальных номеров кошельков

2. Разработка пользовательского интерфейса бота
   - Создание интуитивно понятного меню
   - Реализация процесса регистрации
   - Разработка системы управления бронированиями

3. Интеграция с существующим API
   - Использование существующих эндпоинтов для бронирований
   - Создание новых эндпоинтов для работы с Telegram

## Разбивка задач

### 1. Настройка проекта и базы данных
- [ ] Создать новый файл `src/bot/index.js` для основного кода бота
- [ ] Установить необходимые зависимости (node-telegram-bot-api, dotenv)
- [ ] Создать конфигурационный файл для бота
- [ ] Добавить новые поля в таблицу clients для Telegram данных
- [ ] Создать функцию генерации уникальных номеров кошельков

### 2. Разработка базовой структуры бота
- [ ] Реализовать обработку команды /start
- [ ] Создать систему регистрации новых пользователей
- [ ] Разработать основное меню бота
- [ ] Реализовать обработку callback-запросов

### 3. Регистрация и авторизация
- [ ] Создать пошаговую форму регистрации
- [ ] Реализовать валидацию введенных данных
- [ ] Добавить обработку данных ребенка
- [ ] Реализовать сохранение Telegram данных

### 4. Основной функционал
- [ ] Реализовать раздел "Записаться на тренировку"
- [ ] Разработать просмотр существующих записей
- [ ] Создать раздел "Личная информация"
- [ ] Реализовать функционал подарочных сертификатов
- [ ] Разработать систему управления кошельком

### 5. Интеграция с API
- [ ] Создать новые эндпоинты для работы с Telegram
- [ ] Интегрировать существующие эндпоинты бронирования
- [ ] Реализовать обработку ошибок и уведомлений

## Текущий статус
- Начальная стадия планирования
- Анализ существующей структуры проекта
- Определение необходимых изменений в базе данных

## Обратная связь и запросы на помощь
- Требуется подтверждение структуры базы данных
- Необходимо уточнить формат номеров кошельков
- Требуется информация о существующих API эндпоинтах

## Уроки
- Пока нет

## Следующие шаги
1. Создать базовую структуру проекта для бота
2. Настроить подключение к базе данных
3. Реализовать базовый функционал регистрации 