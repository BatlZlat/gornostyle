const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
});

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é processPendingCertificate –∏–∑ src/routes/sms.js
async function processPendingCertificate(walletNumber, amount, dbClient) {
    console.log(`üîç [processPendingCertificate] –ù–ê–ß–ê–õ–û: –∫–æ—à–µ–ª–µ–∫ ${walletNumber}, —Å—É–º–º–∞ ${amount}‚ÇΩ`);
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        // –ò—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ—à–µ–ª—å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        console.log(`üîç [processPendingCertificate] –ü–æ–∏—Å–∫ pending_certificate –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ ${walletNumber}`);
        const pendingQuery = `
            SELECT pc.*, c.full_name, c.email, c.phone, c.birth_date, cd.name as design_name
            FROM pending_certificates pc
            JOIN clients c ON pc.client_id = c.id
            LEFT JOIN certificate_designs cd ON pc.design_id = cd.id
            WHERE pc.wallet_number = $1 
            AND pc.expires_at > CURRENT_TIMESTAMP
            AND $2 >= 10  -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
            AND $2 <= 50000  -- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            ORDER BY pc.created_at DESC
            LIMIT 1
        `;
        
        const pendingResult = await dbClient.query(pendingQuery, [walletNumber, amount]);
        console.log(`üîç [processPendingCertificate] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: –Ω–∞–π–¥–µ–Ω–æ ${pendingResult.rows.length} –∑–∞–ø–∏—Å–µ–π`);
        
        if (pendingResult.rows.length === 0) {
            console.log(`‚ùå [processPendingCertificate] –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ ${walletNumber} –Ω–∞ —Å—É–º–º—É ${amount}`);
            return;
        }

        const pendingCert = pendingResult.rows[0];
        console.log(`‚úÖ [processPendingCertificate] –ù–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞—é—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${pendingCert.full_name}`);
        console.log(`üîç [processPendingCertificate] –î–∞–Ω–Ω—ã–µ pending_certificate: ID=${pendingCert.id}, –ø–æ–ª—É—á–∞—Ç–µ–ª—å=${pendingCert.recipient_name}, —Å—É–º–º–∞=${pendingCert.nominal_value}‚ÇΩ`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π
        if (amount !== parseFloat(pendingCert.nominal_value)) {
            console.log(`‚ö†Ô∏è [processPendingCertificate] –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å ${pendingCert.nominal_value}‚ÇΩ, –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${amount}‚ÇΩ`);
        }

        console.log(`üîç [processPendingCertificate] –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞`);
        await dbClient.query('BEGIN');

        // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –∫–æ—à–µ–ª—å–∫–∞
        console.log(`üîç [processPendingCertificate] –°–ø–∏—Å—ã–≤–∞–µ–º ${amount}‚ÇΩ —Å –∫–æ—à–µ–ª—å–∫–∞ ${walletNumber}`);
        await dbClient.query(
            `UPDATE wallets SET balance = balance - $1 WHERE wallet_number = $2`,
            [amount, walletNumber]
        );

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–ø–∏—Å–∞–Ω–∏—è
        console.log(`üîç [processPendingCertificate] –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–ø–∏—Å–∞–Ω–∏—è`);
        const transactionDescription = amount !== parseFloat(pendingCert.nominal_value) 
            ? `–ü–æ–∫—É–ø–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (${amount}‚ÇΩ –≤–º–µ—Å—Ç–æ ${pendingCert.nominal_value}‚ÇΩ) - ${pendingCert.full_name}`
            : `–ü–æ–∫—É–ø–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ - ${pendingCert.full_name}`;
            
        await dbClient.query(
            `INSERT INTO transactions (wallet_id, amount, type, description)
            VALUES ((SELECT id FROM wallets WHERE wallet_number = $1), $2, 'payment', $3)`,
            [walletNumber, -amount, transactionDescription]
        );

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –∫–ª–∏–µ–Ω—Ç —Ä–µ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–ª
        console.log(`üîç [processPendingCertificate] –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${pendingCert.client_id}`);
        const certificateQuery = `
            INSERT INTO certificates (
                purchaser_id, nominal_value, recipient_name, message, design_id, 
                certificate_number, status, purchase_date, expiry_date
            ) VALUES ($1, $2, $3, $4, $5, $6, 'active', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP + INTERVAL '1 year')
            RETURNING id, certificate_number
        `;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        const certificateNumber = Math.floor(Math.random() * 900000 + 100000).toString();
        
        const certResult = await dbClient.query(certificateQuery, [
            pendingCert.client_id,
            amount,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É –≤–º–µ—Å—Ç–æ pendingCert.nominal_value
            pendingCert.recipient_name,
            pendingCert.message,
            pendingCert.design_id,
            certificateNumber
        ]);

        const certificateId = certResult.rows[0].id;
        console.log(`‚úÖ [processPendingCertificate] –°–æ–∑–¥–∞–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ID: ${certificateId}, –Ω–æ–º–µ—Ä: ${certificateNumber}, —Å—É–º–º–∞: ${amount}‚ÇΩ`);

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ pending_certificates
        console.log(`üîç [processPendingCertificate] –£–¥–∞–ª—è–µ–º pending_certificate ID: ${pendingCert.id}`);
        await dbClient.query('DELETE FROM pending_certificates WHERE id = $1', [pendingCert.id]);

        console.log(`üîç [processPendingCertificate] –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é COMMIT`);
        await dbClient.query('COMMIT');

        console.log(`‚úÖ [processPendingCertificate] –§–£–ù–ö–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û`);

    } catch (error) {
        console.error(`‚ùå [processPendingCertificate] –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–∂–∏–¥–∞—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:`, error);
        console.error(`‚ùå [processPendingCertificate] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, error.message);
        console.error(`‚ùå [processPendingCertificate] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:`, error.stack);
        await dbClient.query('ROLLBACK');
        throw error;
    }
}

async function testProcessPendingCertificate() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò processPendingCertificate');
  
  const client = await pool.connect();
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\n=== –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï ===');
    
    const pending = await client.query('SELECT * FROM pending_certificates ORDER BY created_at DESC LIMIT 1');
    console.log(`Pending_certificates: ${pending.rows.length}`);
    if (pending.rows.length > 0) {
      const pc = pending.rows[0];
      console.log(`- ID: ${pc.id}, –∫–æ—à–µ–ª–µ–∫: ${pc.wallet_number}, —Å—É–º–º–∞: ${pc.nominal_value}‚ÇΩ, –ø–æ–ª—É—á–∞—Ç–µ–ª—å: ${pc.recipient_name}`);
    }
    
    const transactions = await client.query('SELECT * FROM transactions ORDER BY created_at DESC LIMIT 1');
    console.log(`–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${transactions.rows.length}`);
    if (transactions.rows.length > 0) {
      const t = transactions.rows[0];
      console.log(`- ID: ${t.id}, —Å—É–º–º–∞: ${t.amount}‚ÇΩ, —Ç–∏–ø: ${t.type}, –æ–ø–∏—Å–∞–Ω–∏–µ: ${t.description}`);
    }
    
    const certificates = await client.query('SELECT * FROM certificates ORDER BY purchase_date DESC LIMIT 1');
    console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${certificates.rows.length}`);
    if (certificates.rows.length > 0) {
      const c = certificates.rows[0];
      console.log(`- ID: ${c.id}, –Ω–æ–º–µ—Ä: ${c.certificate_number}, —Å—É–º–º–∞: ${c.nominal_value}‚ÇΩ, –ø–æ–ª—É—á–∞—Ç–µ–ª—å: ${c.recipient_name}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    if (pending.rows.length > 0) {
      const pc = pending.rows[0];
      console.log(`\nüß™ –í–´–ó–´–í–ê–ï–ú processPendingCertificate –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ ${pc.wallet_number} –Ω–∞ —Å—É–º–º—É ${pc.nominal_value}‚ÇΩ`);
      
      try {
        await processPendingCertificate(pc.wallet_number, parseFloat(pc.nominal_value), client);
        console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏:', error);
      }
    } else {
      console.log('‚ùå –ù–µ—Ç pending_certificates –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
    
    const pendingAfter = await client.query('SELECT * FROM pending_certificates ORDER BY created_at DESC LIMIT 1');
    console.log(`Pending_certificates –ø–æ—Å–ª–µ: ${pendingAfter.rows.length}`);
    
    const certificatesAfter = await client.query('SELECT * FROM certificates ORDER BY purchase_date DESC LIMIT 1');
    console.log(`–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø–æ—Å–ª–µ: ${certificatesAfter.rows.length}`);
    if (certificatesAfter.rows.length > 0) {
      const c = certificatesAfter.rows[0];
      console.log(`- ID: ${c.id}, –Ω–æ–º–µ—Ä: ${c.certificate_number}, —Å—É–º–º–∞: ${c.nominal_value}‚ÇΩ, –ø–æ–ª—É—á–∞—Ç–µ–ª—å: ${c.recipient_name}`);
    }
    
  } finally {
    client.release();
    await pool.end();
  }
}

testProcessPendingCertificate().catch(console.error);
