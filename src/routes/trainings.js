const express = require('express');
const router = express.Router();
const { pool } = require('../db/index');
const fetch = require('node-fetch');
require('dotenv').config();

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
router.post('/', async (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', req.body);
    
    const {
        date,                    // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ session_date
        simulator_id,
        time_slot_id,           // –ø–æ–ª—É—á–∞–µ–º start_time –∏ end_time –∏–∑ time_slot_id
        skill_level,
        trainer_id,
        max_participants,
        training_type,          // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Å is_group_session
        group_id,               // –¥–æ–±–∞–≤–ª—è–µ–º group_id
        price                   // —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    } = req.body;

    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–∑ time_slot_id
        const timeSlotResult = await client.query(
            'SELECT start_time FROM schedule WHERE id = $1',
            [time_slot_id]
        );

        if (timeSlotResult.rows.length === 0) {
            return res.status(400).json({ error: '–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        let start_time = timeSlotResult.rows[0].start_time;
        
        // –í—ã—á–∏—Å–ª—è–µ–º end_time –∫–∞–∫ start_time + 60 –º–∏–Ω—É—Ç
        const [hours, minutes] = start_time.split(':').map(Number);
        const startDate = new Date(2000, 0, 1, hours, minutes);
        const endDate = new Date(startDate.getTime() + 60 * 60000);
        const end_time = endDate.toTimeString().slice(0, 5) + ':00';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Ç—Ä–µ–Ω–∞–∂–µ—Ä –≤ —ç—Ç–æ –≤—Ä–µ–º—è
        const checkResult = await client.query(
            `SELECT id FROM training_sessions 
             WHERE simulator_id = $1 
             AND session_date = $2 
             AND ((start_time, end_time) OVERLAPS ($3::time, $4::time))`,
            [simulator_id, date, start_time, end_time]
        );

        if (checkResult.rows.length > 0) {
            return res.status(400).json({ error: '–¢—Ä–µ–Ω–∞–∂–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è' });
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        console.log('–í—Å—Ç–∞–≤–ª—è–µ–º –≤ training_sessions:', {
            simulator_id,
            trainer_id,
            group_id,
            date,
            start_time,
            end_time,
            duration: 60,
            training_type,
            max_participants: max_participants || 1,
            skill_level: skill_level || 1,
            price,
            equipment_type: 'ski'
        });

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        const result = await client.query(
            `INSERT INTO training_sessions (
                simulator_id, trainer_id, group_id, session_date, 
                start_time, end_time, duration,
                training_type, max_participants, 
                skill_level, price, equipment_type
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
            RETURNING id`,
            [
                simulator_id,
                trainer_id,
                group_id,
                date,
                start_time,
                end_time,
                60, // –≤—Å–µ–≥–¥–∞ 60 –º–∏–Ω—É—Ç
                training_type,
                max_participants || 1,
                skill_level || 1,
                price || 0,
                'ski'
            ]
        );
        const trainingId = result.rows[0].id;

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const detailsResult = await client.query(
            `SELECT ts.*, g.name as group_name, t.full_name as trainer_name, s.name as simulator_name
             FROM training_sessions ts
             LEFT JOIN groups g ON ts.group_id = g.id
             LEFT JOIN trainers t ON ts.trainer_id = t.id
             LEFT JOIN simulators s ON ts.simulator_id = s.id
             WHERE ts.id = $1`,
            [trainingId]
        );
        const training = detailsResult.rows[0];

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –¥.–º.–≥
        const formatDate = (dateStr) => {
            const date = new Date(dateStr);
            return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
        };

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        const clientTrainingText =
`–î—Ä—É–∑—å—è! –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è *${training.training_type ? '–≥—Ä—É–ø–ø–æ–≤–∞—è' : '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞*! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å, –≤ –≥—Ä—É–ø–ø–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–µ—à–µ–≤–ª–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π!

üë• *–ì—Ä—É–ø–ø–∞:* ${training.group_name || '-'}
üìÖ *–î–∞—Ç–∞:* ${formatDate(training.session_date)}
‚è∞ *–í—Ä–µ–º—è:* ${training.start_time ? training.start_time.slice(0,5) : '-'}
‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${training.duration || 60} –º–∏–Ω—É—Ç
üë§ *–¢—Ä–µ–Ω–µ—Ä:* ${training.trainer_name || '-'}
üë• *–ú–µ—Å—Ç:* ${training.max_participants}
üìä *–£—Ä–æ–≤–µ–Ω—å:* ${training.skill_level}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${Number(training.price).toFixed(2)} —Ä—É–±.`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        const adminTrainingText =
`‚úÖ *–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!*

üë• *–ì—Ä—É–ø–ø–∞:* ${training.group_name || '-'}
üìÖ *–î–∞—Ç–∞:* ${formatDate(training.session_date)}
‚è∞ *–í—Ä–µ–º—è:* ${training.start_time ? training.start_time.slice(0,5) : '-'}
‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${training.duration || 60} –º–∏–Ω—É—Ç
üë§ *–¢—Ä–µ–Ω–µ—Ä:* ${training.trainer_name || '-'}
üë• *–ú–µ—Å—Ç:* ${training.max_participants}
üìä *–£—Ä–æ–≤–µ–Ω—å:* ${training.skill_level}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${Number(training.price).toFixed(2)} —Ä—É–±.`;

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º
        const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
        const clientsResult = await client.query('SELECT telegram_id FROM clients WHERE telegram_id IS NOT NULL');
        for (const c of clientsResult.rows) {
            await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    chat_id: c.telegram_id, 
                    text: clientTrainingText,
                    parse_mode: 'Markdown'
                })
            });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        const ADMIN_BOT_TOKEN = process.env.ADMIN_BOT_TOKEN;
        const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID;
        if (ADMIN_BOT_TOKEN && ADMIN_TELEGRAM_ID) {
            const adminIds = ADMIN_TELEGRAM_ID.split(',').map(id => id.trim()).filter(Boolean);
            for (const adminId of adminIds) {
                await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/sendMessage`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        chat_id: adminId, 
                        text: adminTrainingText,
                        parse_mode: 'Markdown'
                    })
                });
            }
        }

        // –ë—Ä–æ–Ω–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        // –ë—Ä–æ–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –º–µ–∂–¥—É start_time –∏ end_time
        await client.query(
            `UPDATE schedule 
             SET is_booked = true 
             WHERE simulator_id = $1 
             AND date = $2 
             AND start_time >= $3 
             AND start_time < $4`,
            [simulator_id, date, start_time, end_time]
        );

        await client.query('COMMIT');

        res.status(201).json({ 
            message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
            training_id: trainingId 
        });
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            details: error.message
        });
    } finally {
        client.release();
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ /:id)
router.get('/active-groups', async (req, res) => {
    console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    let client;
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        client = await pool.connect();
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã training_sessions...');
        const tableCheck = await client.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'training_sessions'
            );
        `);
        
        if (!tableCheck.rows[0].exists) {
            throw new Error('–¢–∞–±–ª–∏—Ü–∞ training_sessions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        console.log('–¢–∞–±–ª–∏—Ü–∞ training_sessions –¥–æ—Å—Ç—É–ø–Ω–∞');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö...');
        const countCheck = await client.query(`
            SELECT COUNT(*) as count 
            FROM training_sessions 
            WHERE training_type = true 
            AND session_date >= CURRENT_DATE 
            AND status = 'scheduled'
        `);
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', countCheck.rows[0].count);

        // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π SQL –∑–∞–ø—Ä–æ—Å...');
        const query = `
            SELECT 
                ts.id,
                ts.session_date,
                ts.start_time,
                ts.end_time,
                ts.duration,
                ts.max_participants,
                ts.skill_level,
                ts.price,
                COALESCE(g.name, '–ì—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞') as group_name,
                COALESCE(t.full_name, '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω') as trainer_name,
                COALESCE(s.name, '–¢—Ä–µ–Ω–∞–∂–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω') as simulator_name,
                (SELECT COUNT(*) FROM session_participants sp WHERE sp.session_id = ts.id AND sp.status = 'confirmed') as current_participants
            FROM training_sessions ts
            LEFT JOIN groups g ON ts.group_id = g.id
            LEFT JOIN trainers t ON ts.trainer_id = t.id
            LEFT JOIN simulators s ON ts.simulator_id = s.id
            WHERE ts.training_type = true
            AND ts.session_date >= CURRENT_DATE
            AND ts.status = 'scheduled'
            ORDER BY ts.session_date, ts.start_time
        `;
        console.log('SQL –∑–∞–ø—Ä–æ—Å:', query);
        
        const result = await client.query(query);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:', {
            rowCount: result.rowCount,
            firstRow: result.rows[0],
            error: result.error,
            fields: result.fields ? result.fields.map(f => f.name) : []
        });

        if (!result.rows) {
            throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const formattedRows = result.rows.map(row => {
            try {
                return {
                    ...row,
                    session_date: row.session_date ? row.session_date.toISOString().split('T')[0] : null,
                    start_time: row.start_time ? row.start_time.toString() : null,
                    end_time: row.end_time ? row.end_time.toString() : null
                };
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏:', {
                    row,
                    error: error.message
                });
                throw error;
            }
        });

        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É...');
        res.json(formattedRows);
    } catch (error) {
        console.error('–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', {
            message: error.message,
            stack: error.stack,
            code: error.code,
            detail: error.detail,
            hint: error.hint,
            where: error.where
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if (error.code === '42P01') {
            res.status(500).json({ 
                error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                details: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            });
        } else if (error.code === '28P01') {
            res.status(500).json({ 
                error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                details: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
            });
        } else if (error.code === '3D000') {
            res.status(500).json({ 
                error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                details: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            });
        } else {
            res.status(500).json({ 
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                details: error.message,
                code: error.code
            });
        }
    } finally {
        if (client) {
            console.log('–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
            client.release();
        }
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ /active-groups)
router.get('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        const result = await pool.query(`
            SELECT ts.*, g.name as group_name, g.description as group_description, t.full_name as trainer_name
            FROM training_sessions ts
            LEFT JOIN groups g ON ts.group_id = g.id
            LEFT JOIN trainers t ON ts.trainer_id = t.id
            WHERE ts.id = $1
        `, [id]);
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        const training = result.rows[0];

        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        const participantsResult = await pool.query(`
            SELECT 
                sp.id,
                sp.is_child,
                sp.status,
                c.full_name as client_full_name,
                c.birth_date as client_birth_date,
                c.skill_level as client_skill_level,
                c.phone as client_phone,
                ch.full_name as child_full_name,
                ch.birth_date as child_birth_date,
                ch.skill_level as child_skill_level,
                ch.id as child_id,
                par.phone as parent_phone
            FROM session_participants sp
            LEFT JOIN clients c ON sp.client_id = c.id
            LEFT JOIN children ch ON sp.child_id = ch.id
            LEFT JOIN clients par ON ch.parent_id = par.id
            WHERE sp.session_id = $1
        `, [id]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ—Ç—Å–∫–∞—è –ª–∏ —ç—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
        const isChildrenGroup = training.group_name && training.group_name.toLowerCase().includes('–¥–µ—Ç–∏');

        // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        const participants = participantsResult.rows.map(row => {
            if (isChildrenGroup) {
                // –î–ª—è –¥–µ—Ç—Å–∫–∏—Ö –≥—Ä—É–ø–ø –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –§–ò–û —Ä–µ–±–µ–Ω–∫–∞
                return {
                    full_name: row.child_full_name || row.client_full_name,
                    birth_date: row.child_birth_date || row.client_birth_date,
                    skill_level: row.child_skill_level || row.client_skill_level,
                    phone: row.parent_phone || row.client_phone,
                    is_child: true
                };
            } else {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞
                return {
                    full_name: row.client_full_name,
                    birth_date: row.client_birth_date,
                    skill_level: row.client_skill_level,
                    phone: row.client_phone,
                    is_child: false
                };
            }
        });

        training.participants = participants;
        training.participants_count = participants.length;

        res.json(training);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ id:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
router.get('/', async (req, res) => {
    const { date, date_from, date_to, type } = req.query;

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    if (date_from && date_to) {
        try {
            let query = `
                SELECT ts.*, 
                       g.name as group_name, 
                       g.description as group_description,
                       t.full_name as trainer_full_name
                FROM training_sessions ts
                LEFT JOIN groups g ON ts.group_id = g.id
                LEFT JOIN trainers t ON ts.trainer_id = t.id
                WHERE ts.session_date >= $1 AND ts.session_date <= $2
            `;
            const params = [date_from, date_to];

            if (type === 'group') {
                query += ' AND ts.training_type = true';
            } else if (type === 'individual') {
                query += ' AND ts.training_type = false';
            }

            query += ' ORDER BY ts.session_date, ts.start_time';

            const result = await pool.query(query, params);
            res.json(result.rows);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–∏–∞–ø–∞–∑–æ–Ω):', error);
            res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
        return;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ date (—Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º)
    if (date) {
        try {
            let query = `
                SELECT ts.*, 
                       g.name as group_name, 
                       g.description as group_description,
                       t.full_name as trainer_full_name
                FROM training_sessions ts
                LEFT JOIN groups g ON ts.group_id = g.id
                LEFT JOIN trainers t ON ts.trainer_id = t.id
                WHERE ts.session_date = $1
            `;
            const params = [date];

            if (type === 'group') {
                query += ' AND ts.training_type = true';
            } else if (type === 'individual') {
                query += ' AND ts.training_type = false';
            }

            query += ' ORDER BY ts.start_time';

            const result = await pool.query(query, params);
            res.json(result.rows);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
            res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
        return;
    }

    // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∏ date, –Ω–∏ date_from/date_to
    return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç' });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
router.get('/archive', async (req, res) => {
    const { date_from, date_to, trainer_id } = req.query;
    
    try {
        let query = `
            SELECT ts.*, 
                   g.name as group_name,
                   t.full_name as trainer_name,
                   s.name as simulator_name,
                   (SELECT COUNT(*) FROM session_participants sp WHERE sp.session_id = ts.id) as participants_count
            FROM training_sessions ts
            LEFT JOIN groups g ON ts.group_id = g.id
            LEFT JOIN trainers t ON ts.trainer_id = t.id
            LEFT JOIN simulators s ON ts.simulator_id = s.id
            WHERE ts.session_date < CURRENT_DATE
        `;
        const params = [];

        if (date_from) {
            query += ' AND ts.session_date >= $1';
            params.push(date_from);
        }
        if (date_to) {
            query += ' AND ts.session_date <= $' + (params.length + 1);
            params.push(date_to);
        }
        if (trainer_id) {
            query += ' AND ts.trainer_id = $' + (params.length + 1);
            params.push(trainer_id);
        }

        query += ' ORDER BY ts.session_date DESC, ts.start_time DESC';

        const result = await pool.query(query, params);
        res.json(result.rows);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ id
router.put('/:id', async (req, res) => {
    const { id } = req.params;
    const {
        start_time,
        end_time,
        simulator_id,
        trainer_id,
        group_id,
        max_participants,
        skill_level,
        price
    } = req.body;

    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Ç—Ä–µ–Ω–∞–∂–µ—Ä –≤ —ç—Ç–æ –≤—Ä–µ–º—è (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É)
        const checkResult = await client.query(
            `SELECT id FROM training_sessions 
             WHERE simulator_id = $1 
             AND session_date = (SELECT session_date FROM training_sessions WHERE id = $2)
             AND ((start_time, end_time) OVERLAPS ($3::time, $4::time))
             AND id != $2`,
            [simulator_id, id, start_time, end_time]
        );

        if (checkResult.rows.length > 0) {
            return res.status(400).json({ error: '–¢—Ä–µ–Ω–∞–∂–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è' });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        const result = await client.query(
            `UPDATE training_sessions SET
                start_time = $1,
                end_time = $2,
                simulator_id = $3,
                trainer_id = $4,
                group_id = $5,
                max_participants = $6,
                skill_level = $7,
                price = $8,
                updated_at = NOW()
            WHERE id = $9
            RETURNING *`,
            [start_time, end_time, simulator_id, trainer_id, group_id, max_participants, skill_level, price, id]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        // –°–Ω–∞—á–∞–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª–æ—Ç—ã
        const oldTraining = await client.query(
            'SELECT simulator_id, session_date, start_time, end_time FROM training_sessions WHERE id = $1',
            [id]
        );

        if (oldTraining.rows.length > 0) {
            const old = oldTraining.rows[0];
            await client.query(
                `UPDATE schedule 
                 SET is_booked = false 
                 WHERE simulator_id = $1 
                 AND date = $2 
                 AND start_time >= $3 
                 AND start_time < $4`,
                [old.simulator_id, old.session_date, old.start_time, old.end_time]
            );
        }

        // –ë—Ä–æ–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã
        await client.query(
            `UPDATE schedule 
             SET is_booked = true 
             WHERE simulator_id = $1 
             AND date = (SELECT session_date FROM training_sessions WHERE id = $2)
             AND start_time >= $3 
             AND start_time < $4`,
            [simulator_id, id, start_time, end_time]
        );

        await client.query('COMMIT');
        res.json({ message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', training: result.rows[0] });
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    } finally {
        client.release();
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    const client = await pool.connect();

    try {
        await client.query('BEGIN');

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        const trainingResult = await client.query(
            `SELECT ts.*, g.name as group_name, t.full_name as trainer_name, s.name as simulator_name
             FROM training_sessions ts
             LEFT JOIN groups g ON ts.group_id = g.id
             LEFT JOIN trainers t ON ts.trainer_id = t.id
             LEFT JOIN simulators s ON ts.simulator_id = s.id
             WHERE ts.id = $1`,
            [id]
        );

        if (trainingResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        const training = trainingResult.rows[0];
        const price = Number(training.price);

        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        const participantsResult = await client.query(`
            SELECT sp.id, sp.client_id, c.full_name, c.telegram_id
            FROM session_participants sp
            LEFT JOIN clients c ON sp.client_id = c.id
            WHERE sp.session_id = $1
        `, [id]);
        const participants = participantsResult.rows;

        let refunds = [];
        let totalRefund = 0;
        for (const participant of participants) {
            // –ù–∞–π—Ç–∏ –∫–æ—à–µ–ª–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞
            const walletResult = await client.query('SELECT id, balance FROM wallets WHERE client_id = $1', [participant.client_id]);
            if (walletResult.rows.length === 0) continue;
            const wallet = walletResult.rows[0];
            // –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏
            const newBalance = Number(wallet.balance) + price;
            await client.query('UPDATE wallets SET balance = $1, last_updated = NOW() WHERE id = $2', [newBalance, wallet.id]);
            // –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π description –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            const dateObj = new Date(training.session_date);
            const formattedDate = `${dateObj.getDate().toString().padStart(2, '0')}.${(dateObj.getMonth() + 1).toString().padStart(2, '0')}.${dateObj.getFullYear()}`;
            const startTime = training.start_time ? training.start_time.slice(0,5) : '';
            const duration = training.duration || 60;
            await client.query(
                'INSERT INTO transactions (wallet_id, amount, type, description) VALUES ($1, $2, $3, $4)',
                [wallet.id, price, 'amount', `–í–æ–∑–≤—Ä–∞—Ç: –ì—Ä—É–ø–ø–∞, ${participant.full_name}, –î–∞—Ç–∞: ${formattedDate}, –í—Ä–µ–º—è: ${startTime}, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –º–∏–Ω.`]
            );
            refunds.push({
                full_name: participant.full_name,
                telegram_id: participant.telegram_id,
                amount: price
            });
            totalRefund += price;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —ç–º–æ–¥–∑–∏
        const dateObj = new Date(training.session_date);
        const days = ['–í–°','–ü–ù','–í–¢','–°–†','–ß–¢','–ü–¢','–°–ë'];
        const dayOfWeek = days[dateObj.getDay()];
        const dateStr = `${dateObj.getDate().toString().padStart(2, '0')}.${(dateObj.getMonth() + 1).toString().padStart(2, '0')}.${dateObj.getFullYear()} (${dayOfWeek})`;
        const startTime = training.start_time ? training.start_time.slice(0,5) : '';
        const endTime = training.end_time ? training.end_time.slice(0,5) : '';
        const duration = training.duration || 60;
        const group = training.group_name || '-';
        const trainer = training.trainer_name || '-';
        const level = training.skill_level || '-';
        const maxPart = training.max_participants || '-';
        const sim = training.simulator_name || `–¢—Ä–µ–Ω–∞–∂–µ—Ä ${training.simulator_id}`;
        const priceStr = Number(training.price).toFixed(2);
        const participantsCount = participants.length;
        const trainingInfo =
`üìÖ –î–∞—Ç–∞: ${dateStr}
‚è∞ –í—Ä–µ–º—è: ${startTime} - ${endTime}
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –º–∏–Ω—É—Ç
üë• –ì—Ä—É–ø–ø–∞: ${group}
üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: ${trainer}
üìä –£—Ä–æ–≤–µ–Ω—å: ${level}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantsCount}/${maxPart}
üéø –¢—Ä–µ–Ω–∞–∂–µ—Ä: ${sim}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${priceStr} —Ä—É–±.`;

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º
        const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
        const ADMIN_PHONE = process.env.ADMIN_PHONE || '';
        for (const refund of refunds) {
            if (!refund.telegram_id) continue;
            const text =
`‚ùóÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–∞—à—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:

${trainingInfo}

–î–µ–Ω—å–≥–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ ${refund.amount} —Ä—É–±. –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.
–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–≥–ª–∞ –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –±–æ–ª–µ–∑–Ω–∏ —Ç—Ä–µ–Ω–µ—Ä–∞.
–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${ADMIN_PHONE}`;
            await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ chat_id: refund.telegram_id, text })
            });
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        const ADMIN_BOT_TOKEN = process.env.ADMIN_BOT_TOKEN;
        const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID;
        if (ADMIN_BOT_TOKEN && ADMIN_TELEGRAM_ID) {
            let adminText = `‚ùóÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞:

${trainingInfo}

–í–æ–∑–≤—Ä–∞—Ç—ã:\n`;
            for (const refund of refunds) {
                adminText += `üë§ ${refund.full_name} ‚Äî ${refund.amount} —Ä—É–±.\n`;
            }
            adminText += `\n–û–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${totalRefund} —Ä—É–±.`;
            await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ chat_id: ADMIN_TELEGRAM_ID, text: adminText })
            });
        }

        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –º–µ–∂–¥—É start_time –∏ end_time
        await client.query(
            `UPDATE schedule 
             SET is_booked = false 
             WHERE simulator_id = $1 
             AND date = $2 
             AND start_time >= $3 
             AND start_time < $4`,
            [
                training.simulator_id, 
                training.session_date, 
                training.start_time, 
                training.end_time
            ]
        );

        // –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        await client.query('DELETE FROM training_sessions WHERE id = $1', [id]);

        await client.query('COMMIT');
        res.json({ message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    } finally {
        client.release();
    }
});

// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å telegram_id
router.post('/notify-clients', async (req, res) => {
    const { message } = req.body;
    if (!message) return res.status(400).json({ error: '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è' });

    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    try {
        const result = await pool.query('SELECT telegram_id FROM clients WHERE telegram_id IS NOT NULL');
        const clients = result.rows;

        let sent = 0;
        for (const client of clients) {
            await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ chat_id: client.telegram_id, text: message })
            });
            sent++;
        }
        res.json({ message: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sent} –∫–ª–∏–µ–Ω—Ç–∞–º` });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ' });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
router.post('/notify-client/:clientId', async (req, res) => {
    const { clientId } = req.params;
    const { message } = req.body;
    
    if (!message) {
        return res.status(400).json({ error: '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }

    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    try {
        // –ü–æ–ª—É—á–∞–µ–º telegram_id –∫–ª–∏–µ–Ω—Ç–∞
        const result = await pool.query(
            'SELECT telegram_id, full_name FROM clients WHERE id = $1',
            [clientId]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const client = result.rows[0];
        if (!client.telegram_id) {
            return res.status(400).json({ error: '–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω Telegram ID' });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                chat_id: client.telegram_id, 
                text: message,
                parse_mode: 'Markdown'
            })
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const ADMIN_BOT_TOKEN = process.env.ADMIN_BOT_TOKEN;
        const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID;
        if (ADMIN_BOT_TOKEN && ADMIN_TELEGRAM_ID) {
            const adminText = `üì® *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É*\n\nüë§ *–ö–ª–∏–µ–Ω—Ç:* ${client.full_name}\n\nüìù *–¢–µ–∫—Å—Ç:*\n${message}`;
            await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    chat_id: ADMIN_TELEGRAM_ID, 
                    text: adminText,
                    parse_mode: 'Markdown'
                })
            });
        }

        res.json({ 
            message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            client_name: client.full_name
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
router.post('/notify-group/:sessionId', async (req, res) => {
    const { sessionId } = req.params;
    const { message } = req.body;
    
    if (!message) {
        return res.status(400).json({ error: '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }

    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ –µ—ë —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        const result = await pool.query(`
            SELECT 
                ts.id,
                ts.session_date,
                ts.start_time,
                g.name as group_name,
                c.id as client_id,
                c.full_name,
                c.telegram_id
            FROM training_sessions ts
            LEFT JOIN groups g ON ts.group_id = g.id
            LEFT JOIN session_participants sp ON ts.id = sp.session_id
            LEFT JOIN clients c ON sp.client_id = c.id
            WHERE ts.id = $1 AND ts.training_type = true
        `, [sessionId]);

        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        const training = result.rows[0];
        const participants = result.rows.filter(row => row.client_id !== null);

        if (participants.length === 0) {
            return res.status(400).json({ error: '–£ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' });
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const dateObj = new Date(training.session_date);
        const formattedDate = `${dateObj.getDate().toString().padStart(2, '0')}.${(dateObj.getMonth() + 1).toString().padStart(2, '0')}.${dateObj.getFullYear()}`;
        const startTime = training.start_time ? training.start_time.slice(0,5) : '';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        let sent = 0;
        for (const participant of participants) {
            if (!participant.telegram_id) continue;

            const participantMessage = 
`üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã ${training.group_name}*

üìÖ *–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:* ${formattedDate}
‚è∞ *–í—Ä–µ–º—è:* ${startTime}

${message}`;

            await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    chat_id: participant.telegram_id, 
                    text: participantMessage,
                    parse_mode: 'Markdown'
                })
            });
            sent++;
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const ADMIN_BOT_TOKEN = process.env.ADMIN_BOT_TOKEN;
        const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID;
        if (ADMIN_BOT_TOKEN && ADMIN_TELEGRAM_ID) {
            const adminText = 
`üì® *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã*

üë• *–ì—Ä—É–ø–ø–∞:* ${training.group_name}
üìÖ *–î–∞—Ç–∞:* ${formattedDate}
‚è∞ *–í—Ä–µ–º—è:* ${startTime}
üë• *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* ${sent} –∏–∑ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üìù *–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:*
${message}`;

            await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    chat_id: ADMIN_TELEGRAM_ID, 
                    text: adminText,
                    parse_mode: 'Markdown'
                })
            });
        }

        res.json({ 
            message: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sent} –∏–∑ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`,
            group_name: training.group_name,
            date: formattedDate,
            time: startTime
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π' });
    }
});

module.exports = router; 