const { pool } = require('../db');
const EmailService = require('./emailService');

class EmailQueueProcessor {
    constructor() {
        this.emailService = new EmailService();
        this.isProcessing = false;
        this.processingInterval = null;
        this.intervalMs = 10000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    }

    /**
     * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ email
     */
    start() {
        if (this.processingInterval) {
            console.log('üìß Email queue processor —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        console.log('üöÄ –ó–∞–ø—É—Å–∫ Email Queue Processor...');
        this.processingInterval = setInterval(() => {
            this.processQueue().catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Email Queue Processor:', error);
            });
        }, this.intervalMs);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        this.processQueue().catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏:', error);
        });

        console.log(`‚úÖ Email Queue Processor –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.intervalMs}ms)`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
     */
    stop() {
        if (this.processingInterval) {
            clearInterval(this.processingInterval);
            this.processingInterval = null;
            console.log('üõë Email Queue Processor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ email
     */
    async processQueue() {
        if (this.isProcessing) {
            return; // –ò–∑–±–µ–≥–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        }

        this.isProcessing = true;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ 5 email –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            const result = await pool.query('SELECT * FROM get_pending_emails(5)');
            const pendingEmails = result.rows;

            if (pendingEmails.length === 0) {
                return; // –ù–µ—Ç email –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            }

            console.log(`üìß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${pendingEmails.length} email –∏–∑ –æ—á–µ—Ä–µ–¥–∏...`);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π email
            for (const emailTask of pendingEmails) {
                await this.processEmail(emailTask);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ email:', error);
        } finally {
            this.isProcessing = false;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ email
     */
    async processEmail(emailTask) {
        const { id, certificate_id, recipient_email, certificate_data, attempts } = emailTask;
        
        console.log(`üìß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º email #${id} –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ${certificate_data.certificateCode} ‚Üí ${recipient_email} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1})`);

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
            let updatedCertificateData = { ...certificate_data };
            
            if (!certificate_data.pdfUrl || !certificate_data.imageUrl) {
                console.log(`üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ${certificate_data.certificateCode}...`);
                
                try {
                    const certificatePdfGenerator = require('../services/certificatePdfGenerator');
                    const certificateImageGenerator = require('../services/certificateImageGenerator');
                    
                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–∑ –±–∞–∑—ã
                    const certResult = await pool.query(
                        'SELECT * FROM certificates WHERE id = $1',
                        [certificate_id]
                    );
                    
                    if (certResult.rows.length > 0) {
                        const cert = certResult.rows[0];
                        const certificateFileData = {
                            certificate_number: cert.certificate_number,
                            nominal_value: cert.nominal_value,
                            recipient_name: cert.recipient_name,
                            message: cert.message,
                            expiry_date: cert.expiry_date,
                            design_id: cert.design_id
                        };
                        
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
                        let pdfUrl = certificate_data.pdfUrl;
                        if (!pdfUrl) {
                            try {
                                pdfUrl = await certificatePdfGenerator.generateCertificatePdf(certificateFileData);
                                console.log(`‚úÖ PDF —Å–æ–∑–¥–∞–Ω: ${pdfUrl}`);
                            } catch (pdfError) {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', pdfError);
                            }
                        }
                        
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        let imageUrl = certificate_data.imageUrl;
                        if (!imageUrl) {
                            try {
                                imageUrl = await certificateImageGenerator.generateCertificateImage(certificateFileData);
                                console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${imageUrl}`);
                            } catch (imageError) {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageError);
                            }
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                        if (pdfUrl || imageUrl) {
                            await pool.query(
                                'UPDATE certificates SET pdf_url = COALESCE($1, pdf_url), image_url = COALESCE($2, image_url) WHERE id = $3',
                                [pdfUrl, imageUrl, certificate_id]
                            );
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è email
                            updatedCertificateData.pdfUrl = pdfUrl;
                            updatedCertificateData.imageUrl = imageUrl;
                        }
                    }
                } catch (fileGenError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ${certificate_data.certificateCode}:`, fileGenError);
                }
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            const result = await this.emailService.sendCertificateEmail(recipient_email, updatedCertificateData);
            
            if (result.success) {
                // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                await pool.query('SELECT update_email_status($1, $2, $3)', [id, 'sent', null]);
                console.log(`‚úÖ Email #${id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${recipient_email}`);
            } else {
                // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
                await pool.query('SELECT update_email_status($1, $2, $3)', [id, 'failed', result.error || 'Unknown error']);
                console.log(`‚ùå Email #${id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${result.error}`);
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email #${id}:`, error.message);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            const shouldRetry = attempts < 2; // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ (0, 1, 2)
            const newStatus = shouldRetry ? 'pending' : 'failed';
            
            await pool.query('SELECT update_email_status($1, $2, $3)', [
                id, 
                newStatus, 
                error.message
            ]);

            if (shouldRetry) {
                console.log(`üîÑ Email #${id} –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 2}/3)`);
            } else {
                console.log(`üíÄ Email #${id} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫`);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
     */
    async getQueueStats() {
        try {
            const result = await pool.query(`
                SELECT 
                    status,
                    COUNT(*) as count
                FROM email_queue 
                GROUP BY status
                ORDER BY status
            `);

            const stats = {};
            result.rows.forEach(row => {
                stats[row.status] = parseInt(row.count);
            });

            return stats;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
            return {};
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ email
     */
    async processEmailById(emailId) {
        try {
            const result = await pool.query(`
                SELECT id, certificate_id, recipient_email, certificate_data, attempts 
                FROM email_queue 
                WHERE id = $1 AND status IN ('pending', 'failed')
            `, [emailId]);

            if (result.rows.length === 0) {
                throw new Error(`Email —Å ID ${emailId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
            }

            await this.processEmail(result.rows[0]);
            return true;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ email ${emailId}:`, error);
            throw error;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
     */
    async cleanupOldEmails(daysOld = 30) {
        try {
            const result = await pool.query('SELECT cleanup_old_emails($1)', [daysOld]);
            const deletedCount = result.rows[0].cleanup_old_emails;
            console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ email`);
            return deletedCount;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö email:', error);
            throw error;
        }
    }
}

module.exports = EmailQueueProcessor;
