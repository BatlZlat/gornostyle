const { Resend } = require('resend');
const fs = require('fs').promises;
const path = require('path');

class ResendEmailService {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Resend —Å API –∫–ª—é—á–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const apiKey = process.env.RESEND_API_KEY;
        
        if (!apiKey) {
            console.warn('‚ö†Ô∏è  RESEND_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. Resend –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
            this.resend = null;
        } else {
            this.resend = new Resend(apiKey);
            console.log('‚úÖ Resend –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        this.fromEmail = process.env.RESEND_FROM_EMAIL || 'noreply@example.com';
        this.fromName = process.env.RESEND_FROM_NAME || '–ì–æ—Ä–Ω–æ—Å—Ç–∞–π–ª72';
    }

    async sendCertificateEmail(recipientEmail, certificateData) {
        try {
            if (!this.resend) {
                console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ ${recipientEmail}: Resend –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
                return { success: false, error: 'Resend –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' };
            }

            const { certificateId, certificateCode, recipientName, amount, message, pdfUrl, designImageUrl, expiry_date } = certificateData;

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            let formattedExpiryDate = '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            try {
                const d = new Date(expiry_date);
                if (!isNaN(d.getTime())) {
                    formattedExpiryDate = d.toLocaleDateString('ru-RU');
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ Resend:', e);
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
            const htmlContent = this.generateCertificateEmailHTML(certificateData);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const emailData = {
                from: `${this.fromName} <${this.fromEmail}>`,
                to: [recipientEmail],
                subject: `–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚Ññ${certificateCode} –æ—Ç –ì–æ—Ä–Ω–æ—Å—Ç–∞–π–ª72`,
                html: htmlContent,
            };

            // –î–æ–±–∞–≤–ª—è–µ–º PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ
            if (pdfUrl) {
                try {
                    const pdfPath = pdfUrl.startsWith('/') 
                        ? `${__dirname}/../../public${pdfUrl}` 
                        : pdfUrl;
                    
                    console.log(`üìé –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å PDF: ${pdfPath}`);
                    const pdfBuffer = await fs.readFile(pdfPath);
                    
                    emailData.attachments = [{
                        filename: `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_${certificateCode}.pdf`,
                        content: pdfBuffer,
                        contentType: 'application/pdf'
                    }];
                    
                    console.log(`üìé PDF –≤–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${pdfPath}`);
                } catch (pdfError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞:', pdfError);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –±–µ–∑ PDF
                }
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ Resend
            console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ Resend –Ω–∞ ${recipientEmail}...`);
            const response = await this.resend.emails.send(emailData);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if (response.error) {
                console.error(`‚ùå Resend –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.error.message}`);
                return { 
                    success: false, 
                    error: response.error.message || '–û—à–∏–±–∫–∞ Resend',
                    service: 'resend'
                };
            }
            
            console.log(`‚úÖ Email —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Resend: ${response.data?.id}`);
            return { 
                success: true, 
                messageId: response.data?.id,
                service: 'resend'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Resend –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', error);
            return { 
                success: false, 
                error: error.message || '–û—à–∏–±–∫–∞ Resend' 
            };
        }
    }

    generateCertificateEmailHTML(certificateData) {
        const { certificateCode, recipientName, amount, message, expiry_date } = certificateData;

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        let formattedExpiryDate = '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
        try {
            const d = new Date(expiry_date);
            if (!isNaN(d.getTime())) {
                formattedExpiryDate = d.toLocaleDateString('ru-RU');
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ Resend HTML:', e);
        }

        return `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç –ì–æ—Ä–Ω–æ—Å—Ç–∞–π–ª72</title>
            <style>
                body { font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4; color: #333; }
                .container { max-width: 600px; margin: 20px auto; background-color: #ffffff; border-radius: 8px; overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }
                .header { background-color: #3498db; color: #ffffff; padding: 20px; text-align: center; }
                .header h1 { margin: 0; font-size: 24px; }
                .content { padding: 20px 30px; line-height: 1.6; }
                .content h2 { color: #2c3e50; font-size: 20px; margin-top: 0; }
                .button { display: inline-block; background-color: #3498db; color: #ffffff; padding: 10px 20px; border-radius: 5px; text-decoration: none; margin-top: 20px; }
                .footer { background-color: #ecf0f1; color: #7f8c8d; text-align: center; padding: 15px; font-size: 12px; }
                .certificate-details { background-color: #f9f9f9; border-left: 4px solid #3498db; padding: 15px; margin-top: 20px; }
                .certificate-details p { margin: 5px 0; }
                .highlight { font-weight: bold; color: #2c3e50; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>–ì–æ—Ä–Ω–æ—Å—Ç–∞–π–ª72</h1>
                </div>
                <div class="content">
                    <h2>üéâ –í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!</h2>
                    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
                    <p>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç –ì–æ—Ä–Ω–æ—Å—Ç–∞–π–ª72. –û–Ω –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —ç—Ç–æ–º—É –ø–∏—Å—å–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.</p>
                    
                    <div class="certificate-details">
                        <p><span class="highlight">–ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:</span> ${certificateCode}</p>
                        <p><span class="highlight">–ù–æ–º–∏–Ω–∞–ª:</span> ${amount} —Ä—É–±.</p>
                        ${recipientName ? `<p><span class="highlight">–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</span> ${recipientName}</p>` : ''}
                        ${message ? `<p><span class="highlight">–°–æ–æ–±—â–µ–Ω–∏–µ:</span> "${message}"</p>` : ''}
                        <p><span class="highlight">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</span> –¥–æ ${formattedExpiryDate}</p>
                    </div>

                    <p>–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –µ–≥–æ –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—é. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à Telegram –±–æ—Ç: <a href="https://t.me/gornostyle72_bot">@gornostyle72_bot</a></p>
                    <p>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!</p>
                    <a href="https://t.me/gornostyle72_bot" class="button">–ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram –±–æ—Ç</a>
                </div>
                <div class="footer">
                    <p>–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
                    <p>&copy; 2025 –ì–æ—Ä–Ω–æ—Å—Ç–∞–π–ª72. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                </div>
            </div>
        </body>
        </html>
        `;
    }
}

module.exports = ResendEmailService;
