const { pool } = require('../db');

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
async function testClientNameTransactions() {
    console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...\n');

    try {
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è...');
        const query = `
            SELECT t.*, c.full_name 
            FROM transactions t
            JOIN wallets w ON t.wallet_id = w.id
            JOIN clients c ON w.client_id = c.id
            WHERE t.type = 'refill'
            ORDER BY t.created_at DESC
            LIMIT 5
        `;
        
        const result = await pool.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n`);
        
        if (result.rows.length > 0) {
            console.log('üìä –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
            result.rows.forEach((transaction, index) => {
                console.log(`  ${index + 1}. ID: ${transaction.id}`);
                console.log(`     –ö–ª–∏–µ–Ω—Ç: ${transaction.full_name}`);
                console.log(`     –°—É–º–º–∞: ${transaction.amount} —Ä—É–±.`);
                console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${transaction.description}`);
                console.log(`     –î–∞—Ç–∞: ${transaction.created_at}`);
                console.log('');
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è
            const hasClientName = result.rows.some(t => 
                t.description.includes(' - ') && 
                (t.description.includes('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –°–ë–ü') || t.description.includes('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'))
            );
            
            if (hasClientName) {
                console.log('‚úÖ –£–°–ü–ï–•: –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!');
            } else {
                console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.');
            }
        } else {
            console.log('‚ÑπÔ∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã transactions
        console.log('\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã transactions...');
        const structureQuery = `
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns
            WHERE table_name = 'transactions'
            ORDER BY ordinal_position
        `;
        
        const structureResult = await pool.query(structureQuery);
        console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã transactions:');
        structureResult.rows.forEach(col => {
            console.log(`  - ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
        });

        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
    testClientNameTransactions()
        .then(() => {
            console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ:', error);
            process.exit(1);
        });
}

module.exports = { testClientNameTransactions };
