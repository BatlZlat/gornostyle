const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(process.env.ADMIN_BOT_TOKEN, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const pool = new Pool({
    connectionString: process.env.DATABASE_URL || undefined,
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    if (chatId === parseInt(process.env.ADMIN_TELEGRAM_ID) || chatId === parseInt(process.env.ADMIN_TELEGRAM_ID_2)) {
        bot.sendMessage(chatId, 
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n' +
            '–Ø –±—É–¥—É –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ:\n' +
            '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n' +
            '‚Ä¢ –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n' +
            '‚Ä¢ –í–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ'
        );
    } else {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function notifyScheduleCreated(month) {
    try {
        const message = `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${month} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!`;
        await bot.sendMessage(process.env.ADMIN_TELEGRAM_ID, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
async function notifyNewTrainingRequest(trainingData) {
    try {
        const adminChatId = process.env.ADMIN_TELEGRAM_ID;
        if (!adminChatId) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const message = `
üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!

üë§ –ö–ª–∏–µ–Ω—Ç: ${trainingData.client_name}
üìÖ –î–∞—Ç–∞: ${trainingData.date}
‚è∞ –í—Ä–µ–º—è: ${trainingData.time}
üéØ –¢–∏–ø: ${trainingData.type}
üë• –ì—Ä—É–ø–ø–∞: ${trainingData.group_name || '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'}
üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: ${trainingData.trainer_name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${trainingData.price} —Ä—É–±.
        `;

        await bot.sendMessage(adminChatId, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
async function notifyNewIndividualTraining(trainingData) {
    try {
        const adminChatId = process.env.ADMIN_TELEGRAM_ID;
        if (!adminChatId) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const message = `
üîî –ù–æ–≤–∞—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!

üë§ –ö–ª–∏–µ–Ω—Ç: ${trainingData.client_name}
üìÖ –î–∞—Ç–∞: ${trainingData.date}
‚è∞ –í—Ä–µ–º—è: ${trainingData.time}
üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: ${trainingData.trainer_name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${trainingData.price} —Ä—É–±.
        `;

        await bot.sendMessage(adminChatId, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
async function notifyNewGroupTrainingParticipant(trainingData) {
    try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ YYYY-MM-DD –≤ DD.MM.YYYY
        const date = new Date(trainingData.session_date);
        const dayOfWeek = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'][date.getDay()];
        const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –ß–ß:–ú–ú
        const [hours, minutes] = trainingData.start_time.split(':');
        const formattedTime = `${hours}:${minutes}`;

        const message = 
            'üë• *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É*\n\n' +
            `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${trainingData.client_name}\n` +
            (trainingData.child_name ? `üë∂ *–†–µ–±–µ–Ω–æ–∫:* ${trainingData.child_name}\n` : '') +
            `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${trainingData.client_phone}\n` +
            `üë• *–ì—Ä—É–ø–ø–∞:* ${trainingData.group_name}\n` +
            `üéø *–¢—Ä–µ–Ω–∞–∂–µ—Ä:* ${trainingData.simulator_name}\n` +
            `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${trainingData.price} —Ä—É–±.\n` +
            `üìÖ *–î–∞—Ç–∞:* ${formattedDate} (${dayOfWeek})\n` +
            `‚è∞ *–í—Ä–µ–º—è:* ${formattedTime}\n` +
            `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${trainingData.current_participants}/${trainingData.max_participants}`;

        await bot.sendMessage(process.env.ADMIN_TELEGRAM_ID, message, { 
            parse_mode: 'Markdown'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    
    if (chatId !== parseInt(process.env.ADMIN_TELEGRAM_ID) && chatId !== parseInt(process.env.ADMIN_TELEGRAM_ID_2)) {
        return;
    }

    if (data.startsWith('approve_') || data.startsWith('reject_')) {
        const requestId = data.split('_')[1];
        const action = data.startsWith('approve_') ? 'approved' : 'rejected';
        
        try {
            await pool.query(
                'UPDATE group_training_requests SET status = $1 WHERE id = $2',
                [action, requestId]
            );
            
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: action === 'approved' ? '‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞' : '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            });
            
            await bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
            });
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async function notifyAdminGroupTrainingCancellation(trainingData) {
    try {
        const adminChatId = process.env.ADMIN_TELEGRAM_ID;
        if (!adminChatId) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const message = `
‚ùå –û—Ç–º–µ–Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!

üë§ –ö–ª–∏–µ–Ω—Ç: ${trainingData.client_name}
üìÖ –î–∞—Ç–∞: ${trainingData.date}
‚è∞ –í—Ä–µ–º—è: ${trainingData.time}
üë• –ì—Ä—É–ø–ø–∞: ${trainingData.group_name}
üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: ${trainingData.trainer_name}
        `;

        await bot.sendMessage(adminChatId, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async function notifyAdminIndividualTrainingCancellation(trainingData) {
    try {
        const adminChatId = process.env.ADMIN_TELEGRAM_ID;
        if (!adminChatId) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const message = `
‚ùå –û—Ç–º–µ–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!

üë§ –ö–ª–∏–µ–Ω—Ç: ${trainingData.client_name}
üìÖ –î–∞—Ç–∞: ${trainingData.date}
‚è∞ –í—Ä–µ–º—è: ${trainingData.time}
üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: ${trainingData.trainer_name}
        `;

        await bot.sendMessage(adminChatId, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
async function notifyAdminFailedPayment({ amount, wallet_number, date, time }) {
    const message = 
        `‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n\n` +
        `üíµ –°—É–º–º–∞: ${amount} —Ä—É–±.\n` +
        `üìù –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: ${wallet_number}\n` +
        `üìÖ –î–∞—Ç–∞: ${date}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${time}\n\n` +
        `‚ö†Ô∏è –ê–≤—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–µ–Ω—å–≥–∏ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã.`;

    try {
        await bot.sendMessage(process.env.ADMIN_TELEGRAM_ID, message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
async function notifyAdminWalletRefilled({ clientName, amount, walletNumber, balance }) {
    try {
        const adminChatId = process.env.ADMIN_TELEGRAM_ID;
        if (!adminChatId) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const message = `
‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞

üë§ –ö–ª–∏–µ–Ω—Ç: ${clientName}
üí≥ –ö–æ—à–µ–ª–µ–∫: ${walletNumber}
üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${amount} —Ä—É–±.
üíµ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${balance} —Ä—É–±.
        `;

        await bot.sendMessage(adminChatId, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:', error);
    }
}

module.exports = {
    bot,
    notifyScheduleCreated,
    notifyNewTrainingRequest,
    notifyNewIndividualTraining,
    notifyNewGroupTrainingParticipant,
    notifyAdminGroupTrainingCancellation,
    notifyAdminIndividualTrainingCancellation,
    notifyAdminFailedPayment,
    notifyAdminWalletRefilled
}; 