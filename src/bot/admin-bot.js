const TelegramBot = require('node-telegram-bot-api');
const { pool } = require('../db');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = process.env.ADMIN_BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_TELEGRAM_ID || 546668421;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    if (chatId === parseInt(ADMIN_ID)) {
        bot.sendMessage(chatId, 
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n' +
            '–Ø –±—É–¥—É –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ:\n' +
            '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n' +
            '‚Ä¢ –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n' +
            '‚Ä¢ –í–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ'
        );
    } else {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function notifyScheduleCreated(month) {
    try {
        const message = `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${month} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!`;
        await bot.sendMessage(ADMIN_ID, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
async function notifyNewTrainingRequest(requestData) {
    try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ YYYY-MM-DD –≤ DD.MM.YYYY
        const [year, month, day] = requestData.preferred_date.split('-');
        const formattedDate = `${day}.${month}.${year}`;

        const message = 
            'üìù *–ó–∞—è–≤–∫–∞ –Ω–∞ –ì—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É*\n\n' +
            `üë§ *–§–ò–û:* ${requestData.client_name}\n` +
            `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${requestData.client_phone}\n` +
            (requestData.has_group ? 
                `üë• *–ì–æ—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞:* ${requestData.group_size} —á–µ–ª–æ–≤–µ–∫\n` :
                `üë• *–ò—â–µ—Ç –≥—Ä—É–ø–ø—É:* ${requestData.training_for === 'self' ? '–î–ª—è —Å–µ–±—è' : 
                                  requestData.training_for === 'child' ? '–î–ª—è —Ä–µ–±–µ–Ω–∫–∞' : '–î–ª—è —Å–µ–±—è –∏ —Ä–µ–±–µ–Ω–∫–∞'}\n`) +
            `üîÑ *–ß–∞—Å—Ç–æ—Ç–∞:* ${requestData.training_frequency === 'regular' ? '–†–µ–≥—É–ª—è—Ä–Ω–æ' : '–†–∞–∑–æ–≤–æ'}\n` +
            `üèÇ *–¢–∏–ø:* ${requestData.sport_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏' : '–°–Ω–æ—É–±–æ—Ä–¥'}\n` +
            `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${requestData.skill_level}/10\n` +
            `üìÖ *–î–∞—Ç–∞:* ${formattedDate}\n` +
            `‚è∞ *–í—Ä–µ–º—è:* ${requestData.preferred_time}`;

        await bot.sendMessage(ADMIN_ID, message, { 
            parse_mode: 'Markdown'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
async function notifyNewIndividualTraining(trainingData) {
    try {
        const message = 
            'üéø *–ó–∞–ø–∏—Å—å –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É*\n\n' +
            `üë§ *–§–ò–û:* ${trainingData.client_name}\n` +
            (trainingData.child_name ? `üë∂ *–§–ò–û —Ä–µ–±–µ–Ω–∫–∞:* ${trainingData.child_name}\n` : '') +
            `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${trainingData.client_phone}\n` +
            `üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${trainingData.with_trainer ? '–° —Ç—Ä–µ–Ω–µ—Ä–æ–º' : '–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞'}\n` +
            `üèÇ *–¢–∏–ø:* ${trainingData.equipment_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏' : '–°–Ω–æ—É–±–æ—Ä–¥'}\n` +
            `‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${trainingData.duration} –º–∏–Ω—É—Ç\n` +
            `üéØ *–¢—Ä–µ–Ω–∞–∂–µ—Ä:* ‚Ññ${trainingData.simulator_id}\n` +
            `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${trainingData.price} —Ä—É–±.\n` +
            `üìÖ *–î–∞—Ç–∞:* ${trainingData.preferred_date}\n` +
            `‚è∞ *–í—Ä–µ–º—è:* ${trainingData.preferred_time}`;

        await bot.sendMessage(ADMIN_ID, message, { 
            parse_mode: 'Markdown'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
async function notifyNewGroupTrainingParticipant(trainingData) {
    try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ YYYY-MM-DD –≤ DD.MM.YYYY
        const date = new Date(trainingData.session_date);
        const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;

        const message = 
            'üë• *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É*\n\n' +
            `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${trainingData.client_name}\n` +
            (trainingData.child_name ? `üë∂ *–†–µ–±–µ–Ω–æ–∫:* ${trainingData.child_name}\n` : '') +
            `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${trainingData.client_phone}\n` +
            `üë• *–ì—Ä—É–ø–ø–∞:* ${trainingData.group_name}\n` +
            `üèÇ *–¢–∏–ø:* ${trainingData.equipment_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏' : '–°–Ω–æ—É–±–æ—Ä–¥'}\n` +
            `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${trainingData.skill_level}/10\n` +
            `üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${trainingData.trainer_name}\n` +
            `üéø *–¢—Ä–µ–Ω–∞–∂–µ—Ä:* ${trainingData.simulator_name}\n` +
            `‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${trainingData.duration} –º–∏–Ω—É—Ç\n` +
            `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${trainingData.price} —Ä—É–±.\n` +
            `üìÖ *–î–∞—Ç–∞:* ${formattedDate}\n` +
            `‚è∞ *–í—Ä–µ–º—è:* ${trainingData.start_time}\n` +
            `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${trainingData.current_participants}/${trainingData.max_participants}`;

        await bot.sendMessage(ADMIN_ID, message, { 
            parse_mode: 'Markdown'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    
    if (chatId !== parseInt(ADMIN_ID)) {
        return;
    }

    if (data.startsWith('approve_') || data.startsWith('reject_')) {
        const requestId = data.split('_')[1];
        const action = data.startsWith('approve_') ? 'approved' : 'rejected';
        
        try {
            await pool.query(
                'UPDATE group_training_requests SET status = $1 WHERE id = $2',
                [action, requestId]
            );
            
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: action === 'approved' ? '‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞' : '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            });
            
            await bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
            });
        }
    }
});

module.exports = {
    notifyScheduleCreated,
    notifyNewTrainingRequest,
    notifyNewIndividualTraining,
    notifyNewGroupTrainingParticipant
}; 