const { createClient, getClientByTelegramId, getChildByParentId } = require('./db-utils');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handleRegistration(bot, msg, state) {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!state.currentStep) {
        state.currentStep = 'full_name';
        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):');
    }

    switch (state.currentStep) {
        case 'full_name':
            if (text.length < 5) {
                return bot.sendMessage(chatId, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            }
            state.data.full_name = text;
            state.currentStep = 'birth_date';
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');

        case 'birth_date':
            const birthDate = validateDate(text);
            if (!birthDate) {
                return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:');
            }
            state.data.birth_date = birthDate;
            state.currentStep = 'phone';
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79999999999:');

        case 'phone':
            const phone = validatePhone(text);
            if (!phone) {
                return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +79999999999:');
            }
            state.data.phone = phone;
            state.currentStep = 'has_child';
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?', {
                reply_markup: {
                    keyboard: [['–î–∞', '–ù–µ—Ç']],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            });

        case 'has_child':
            if (text.toLowerCase() === '–¥–∞') {
                state.currentStep = 'child_name';
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ (–§–ò–û):');
            } else {
                return await completeRegistration(bot, chatId, state);
            }

        case 'child_name':
            if (text.length < 5) {
                return bot.sendMessage(chatId, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            }
            state.data.child = { 
                full_name: text,
                sport_type: null,
                skill_level: null
            };
            state.currentStep = 'child_birth_date';
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');

        case 'child_birth_date':
            const childBirthDate = validateDate(text);
            if (!childBirthDate) {
                return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:');
            }
            state.data.child.birth_date = childBirthDate;
            return await completeRegistration(bot, chatId, state);
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function completeRegistration(bot, chatId, state) {
    try {
        const { clientId } = await createClient(state.data);
        
        await bot.sendMessage(chatId, 
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n' +
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.'
        );

        showMainMenu(bot, chatId);
        userStates.delete(chatId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
function validateDate(dateStr) {
    const [day, month, year] = dateStr.split('.');
    const date = new Date(year, month - 1, day);
    
    if (date.getDate() !== parseInt(day) || 
        date.getMonth() !== parseInt(month) - 1 || 
        date.getFullYear() !== parseInt(year)) {
        return null;
    }
    
    return date.toISOString().split('T')[0];
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function validatePhone(phone) {
    const phoneRegex = /^\+7\d{10}$/;
    if (!phoneRegex.test(phone)) {
        return null;
    }
    return phone;
}

// –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function showMainMenu(bot, chatId) {
    const keyboard = {
        reply_markup: {
            keyboard: [
                ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', 'üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
                ['üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', 'üí∞ –ö–æ—à–µ–ª–µ–∫']
            ],
            resize_keyboard: true,
            one_time_keyboard: false
        }
    };

    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async function handleProfileEdit(bot, msg, state) {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!state.currentStep) {
        state.currentStep = 'select_field';
        return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:');
    }

    switch (state.currentStep) {
        case 'select_field':
            switch (text) {
                case 'üìù –§–ò–û':
                    state.currentStep = 'edit_name';
                    state.editField = 'full_name';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:');

                case 'üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è':
                    state.currentStep = 'edit_birth_date';
                    state.editField = 'birth_date';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');

                case 'üì± –¢–µ–ª–µ—Ñ–æ–Ω':
                    state.currentStep = 'edit_phone';
                    state.editField = 'phone';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79999999999:');

                case 'üë∂ –î–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞':
                    const child = await getChildByParentId(state.clientId);
                    if (!child) {
                        return bot.sendMessage(chatId, 
                            '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞.\n' +
                            '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?',
                            {
                                reply_markup: {
                                    keyboard: [
                                        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞'],
                                        ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                    ],
                                    resize_keyboard: true,
                                    one_time_keyboard: true
                                }
                            }
                        );
                    }
                    state.currentStep = 'edit_child';
                    return bot.sendMessage(chatId, 
                        '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
                        {
                            reply_markup: {
                                keyboard: [
                                    ['üë∂ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞', 'üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true,
                                one_time_keyboard: true
                            }
                        }
                    );

                case '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞':
                    state.currentStep = 'add_child_name';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞:');
            }
            break;

        case 'edit_name':
            if (text.length < 5) {
                return bot.sendMessage(chatId, '–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            }
            await updateClientField(state.clientId, 'full_name', text);
            await showMainMenu(bot, chatId);
            userStates.delete(chatId);
            return bot.sendMessage(chatId, '‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');

        case 'edit_birth_date':
            const birthDate = validateDate(text);
            if (!birthDate) {
                return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:');
            }
            await updateClientField(state.clientId, 'birth_date', birthDate);
            await showMainMenu(bot, chatId);
            userStates.delete(chatId);
            return bot.sendMessage(chatId, '‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');

        case 'edit_phone':
            const phone = validatePhone(text);
            if (!phone) {
                return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +79999999999:');
            }
            await updateClientField(state.clientId, 'phone', phone);
            await showMainMenu(bot, chatId);
            userStates.delete(chatId);
            return bot.sendMessage(chatId, '‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');

        case 'add_child_name':
            if (text.length < 5) {
                return bot.sendMessage(chatId, '–§–ò–û —Ä–µ–±–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            }
            state.data.child = { full_name: text };
            state.currentStep = 'add_child_birth_date';
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');

        case 'add_child_birth_date':
            const childBirthDate = validateDate(text);
            if (!childBirthDate) {
                return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:');
            }
            state.data.child.birth_date = childBirthDate;
            await addChild(state.clientId, state.data.child);
            await showMainMenu(bot, chatId);
            userStates.delete(chatId);
            return bot.sendMessage(chatId, '‚úÖ –†–µ–±–µ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
    }
}

module.exports = {
    handleRegistration,
    handleProfileEdit,
    showMainMenu
}; 