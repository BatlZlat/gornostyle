const TelegramBot = require('node-telegram-bot-api');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const bot = new TelegramBot(process.env.ADMIN_BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateStr) {
    const date = new Date(dateStr);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function notifyScheduleCreated(month) {
    try {
        const message = `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${month} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!`;
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
async function notifyNewTrainingRequest(trainingData) {
    try {
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        if (!adminIds.length) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const message = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${trainingData.client_name}
üìÖ *–î–∞—Ç–∞:* ${trainingData.date}
‚è∞ *–í—Ä–µ–º—è:* ${trainingData.time}
üéØ *–¢–∏–ø:* ${trainingData.type}
üë• *–ì—Ä—É–ø–ø–∞:* ${trainingData.group_name || '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'}
üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${trainingData.trainer_name}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${trainingData.price} —Ä—É–±.`;

        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
async function notifyNewIndividualTraining(trainingData) {
    try {
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        if (!adminIds.length) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        const getEquipmentTypeName = (equipmentType) => {
            if (!equipmentType) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            switch (equipmentType.toLowerCase()) {
                case 'ski': return '–ì–æ—Ä–Ω–æ–ª—ã–∂–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞';
                case 'snowboard': return '–°–Ω–æ—É–±–æ—Ä–¥';
                default: return equipmentType;
            }
        };

        const message = 
            'üîî *–ù–æ–≤–∞—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!*\n\n' +
            `üë§ *–£—á–∞—Å—Ç–Ω–∏–∫:* ${trainingData.client_name} (${trainingData.client_age} –ª–µ—Ç)\n` +
            `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${trainingData.client_phone}\n` +
            `üìÖ *–î–∞—Ç–∞:* ${trainingData.date}\n` +
            `‚è∞ *–í—Ä–µ–º—è:* ${trainingData.time}\n` +
            `‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${trainingData.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –º–∏–Ω\n` +
            `üéø *–¢–∏–ø:* ${getEquipmentTypeName(trainingData.equipment_type)}\n` +
            `üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${trainingData.trainer_name}\n` +
            `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${trainingData.price} —Ä—É–±.`;

        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
async function notifyNewGroupTrainingParticipant(trainingData) {
    try {
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        if (!adminIds.length) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ YYYY-MM-DD –≤ DD.MM.YYYY
        const date = new Date(trainingData.session_date);
        const dayOfWeek = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'][date.getDay()];
        const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –ß–ß:–ú–ú
        const [hours, minutes] = trainingData.start_time.split(':');
        const formattedTime = `${hours}:${minutes}`;

        const message = `
üë• *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${trainingData.client_name}
${trainingData.child_name ? `üë∂ *–†–µ–±–µ–Ω–æ–∫:* ${trainingData.child_name}\n` : ''}üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${trainingData.client_phone}
üë• *–ì—Ä—É–ø–ø–∞:* ${trainingData.group_name}
üéø *–¢—Ä–µ–Ω–∞–∂–µ—Ä:* ${trainingData.simulator_name}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${trainingData.price} —Ä—É–±.
üìÖ *–î–∞—Ç–∞:* ${formattedDate} (${dayOfWeek})
‚è∞ *–í—Ä–µ–º—è:* ${formattedTime}
üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${trainingData.current_participants}/${trainingData.max_participants}`;

        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async function notifyAdminGroupTrainingCancellation(trainingData) {
    try {
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        if (!adminIds.length) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const message =
            '‚ùå *–û—Ç–º–µ–Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!*\n\n' +
            `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${trainingData.client_name}\n` +
            (trainingData.participant_name ? `üë§ *–£—á–∞—Å—Ç–Ω–∏–∫:* ${trainingData.participant_name}\n` : '') +
            `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${trainingData.client_phone}\n` +
            `üìÖ *–î–∞—Ç–∞:* ${formatDate(trainingData.date)}\n` +
            `‚è∞ *–í—Ä–µ–º—è:* ${trainingData.time}\n` +
            `üë• *–ì—Ä—É–ø–ø–∞:* ${trainingData.group_name}\n` +
            `üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${trainingData.trainer_name}\n` +
            `üéø *–¢—Ä–µ–Ω–∞–∂–µ—Ä:* ${trainingData.simulator_name}\n` +
            `ü™ë *–ú–µ—Å—Ç –æ—Å—Ç–∞–ª–æ—Å—å:* ${trainingData.seats_left}\n` +
            `üí∞ *–í–æ–∑–≤—Ä–∞—Ç:* ${Number(trainingData.refund).toFixed(2)} —Ä—É–±.`;

        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async function notifyAdminIndividualTrainingCancellation(trainingData) {
    try {
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        if (!adminIds.length) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const message = 
            '‚ùå *–û—Ç–º–µ–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!*\n\n' +
            `üë®‚Äçüíº *–ö–ª–∏–µ–Ω—Ç:* ${trainingData.client_name}\n` +
            `üë§ *–£—á–∞—Å—Ç–Ω–∏–∫:* ${trainingData.participant_name} (${trainingData.participant_age} –ª–µ—Ç)\n` +
            `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${trainingData.client_phone}\n` +
            `üìÖ *–î–∞—Ç–∞:* ${formatDate(trainingData.date)}\n` +
            `‚è∞ *–í—Ä–µ–º—è:* ${trainingData.time}\n` +
            `üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${trainingData.trainer_name}\n` +
            `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${trainingData.price} —Ä—É–±.`;

        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
async function notifyAdminFailedPayment({ amount, wallet_number, date, time }) {
    try {
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        if (!adminIds.length) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const message = `
‚ùå *–ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*

üíµ *–°—É–º–º–∞:* ${amount} —Ä—É–±.
üìù *–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:* ${wallet_number}
üìÖ *–î–∞—Ç–∞:* ${date}
‚è∞ *–í—Ä–µ–º—è:* ${time}

‚ö†Ô∏è –ê–≤—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–µ–Ω—å–≥–∏ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã.`;

        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
async function notifyAdminWalletRefilled({ clientName, amount, walletNumber, balance }) {
    try {
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        if (!adminIds.length) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const message = `
‚úÖ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞!*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${clientName}
üí≥ *–ö–æ—à–µ–ª–µ–∫:* ${walletNumber}
üí∞ *–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:* ${amount} —Ä—É–±.
üíµ *–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:* ${balance} —Ä—É–±.`;

        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
async function notifyAdminCertificatePurchase({ clientName, certificateNumber, nominalValue, purchaseDate }) {
    try {
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        if (!adminIds.length) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        const formattedDate = new Date(purchaseDate).toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric'
        });

        const message = `
‚úÖ *–ü–æ–∫—É–ø–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞!*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${clientName}
üé´ *–ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:* ${certificateNumber}
üí∞ *–ù–æ–º–∏–Ω–∞–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:* ${nominalValue} —Ä—É–±.
üìÖ *–î–∞—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è:* ${formattedDate}`;

        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ
async function notifyNewClient({ full_name, birth_date, phone, skill_level, child }) {
    try {
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        if (!adminIds.length) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }
        // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        const birth = new Date(birth_date);
        const today = new Date();
        let age = today.getFullYear() - birth.getFullYear();
        const m = today.getMonth() - birth.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birth.getDate())) age--;
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        let message = 'üéâ *–£–†–ê! –£ –Ω–∞—Å –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!*\n\n';
        message += `üë§ *${full_name}* (${age} –ª–µ—Ç)\n`;
        if (child && child.full_name && child.birth_date) {
            // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞
            const childBirth = new Date(child.birth_date);
            let childAge = today.getFullYear() - childBirth.getFullYear();
            const cm = today.getMonth() - childBirth.getMonth();
            if (cm < 0 || (cm === 0 && today.getDate() < childBirth.getDate())) childAge--;
            message += `üë∂ *–†–µ–±–µ–Ω–æ–∫:* ${child.full_name} (${childAge} –ª–µ—Ç)\n`;
        }
        message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}\n`;
        message += `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${skill_level}/10`;
        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞
async function notifyTomorrowTrainings(trainings) {
    try {
        const adminIds = process.env.ADMIN_TELEGRAM_ID.split(',').map(id => id.trim());
        if (!adminIds.length) {
            console.error('ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            return;
        }

        // –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if (!trainings || trainings.length === 0) {
            console.log('–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        const tomorrowStr = formatDate(tomorrow.toISOString().split('T')[0]);

        // –†–∞–∑–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ
        const groupTrainings = trainings.filter(t => !t.is_individual);
        const individualTrainings = trainings.filter(t => t.is_individual);

        let message = `üîî *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${tomorrowStr})*\n\n`;

        // –ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if (groupTrainings.length > 0) {
            message += `üë• *–ì–†–£–ü–ü–û–í–´–ï –¢–†–ï–ù–ò–†–û–í–ö–ò:*\n`;
            groupTrainings.forEach(training => {
                const timeStr = training.start_time ? training.start_time.substring(0, 5) : '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const trainerStr = training.trainer_name || '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
                const participantsStr = training.participants_list || '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';
                const equipmentStr = training.equipment_type === 'ski' ? 'üéø' : 'üèÇ';
                
                message += `‚Ä¢ ${timeStr} - ${training.group_name || '–ì—Ä—É–ø–ø–∞'} (${equipmentStr})\n`;
                message += `  üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: ${trainerStr}\n`;
                message += `  üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participantsStr}\n`;
                message += `  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${training.price} —Ä—É–±.\n\n`;
            });
        }

        // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if (individualTrainings.length > 0) {
            message += `üèÉ *–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –¢–†–ï–ù–ò–†–û–í–ö–ò:*\n`;
            individualTrainings.forEach(training => {
                const timeStr = training.start_time ? training.start_time.substring(0, 5) : '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const durationStr = training.duration ? `${training.duration} –º–∏–Ω` : '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
                const equipmentStr = training.equipment_type === 'ski' ? 'üéø' : 'üèÇ';
                const participantStr = training.participants_list || '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω';
                
                message += `‚Ä¢ ${timeStr} - ${participantStr} (${equipmentStr})\n`;
                message += `  ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${durationStr}\n`;
                message += `  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${training.price} —Ä—É–±.\n\n`;
            });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for (const adminId of adminIds) {
            await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
        }

        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ ${trainings.length} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞:', error);
    }
}

module.exports = {
    notifyScheduleCreated,
    notifyNewTrainingRequest,
    notifyNewIndividualTraining,
    notifyNewGroupTrainingParticipant,
    notifyAdminGroupTrainingCancellation,
    notifyAdminIndividualTrainingCancellation,
    notifyAdminFailedPayment,
    notifyAdminWalletRefilled,
    notifyAdminCertificatePurchase,
    notifyNewClient,
    notifyTomorrowTrainings
}; 