require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');
const { notifyNewTrainingRequest } = require('./admin-bot');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const pool = new Pool({
    connectionString: process.env.DATABASE_URL || undefined,
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
});

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const userStates = new Map();

function showMainMenu(chatId) {
    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
            keyboard: [
                ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'],
                ['üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', 'üí∞ –ö–æ—à–µ–ª–µ–∫']
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
            persistent: true
        }
    });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è
function validateDate(dateStr) {
    const [day, month, year] = dateStr.split('.');
    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ UTC —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ (UTC+5)
    const date = new Date(Date.UTC(year, month - 1, day, 0, 0, 0));
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if (date.getUTCDate() !== parseInt(day) || 
        date.getUTCMonth() !== parseInt(month) - 1 || 
        date.getUTCFullYear() !== parseInt(year)) {
        return null;
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    return date.toISOString().split('T')[0];
}
function validatePhone(phone) {
    return /^\+7\d{10}$/.test(phone) ? phone : null;
}
function formatWalletNumber(number) {
    return number.replace(/(\d{4})(\d{4})(\d{4})(\d{4})/, '$1-$2-$3-$4');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async function getClientByTelegramId(telegramId) {
    const res = await pool.query(
        `SELECT c.*, w.wallet_number, w.balance FROM clients c LEFT JOIN wallets w ON c.id = w.client_id WHERE c.telegram_id = $1`,
        [telegramId]
    );
    if (res.rows[0] && res.rows[0].wallet_number) {
        res.rows[0].wallet_number = formatWalletNumber(res.rows[0].wallet_number);
    }
    return res.rows[0];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
async function generateUniqueWalletNumber() {
    const generateNumber = () => Array.from({ length: 16 }, () => Math.floor(Math.random() * 10)).join('');
    let walletNumber, isUnique = false, attempts = 0;
    while (!isUnique && attempts < 10) {
        walletNumber = generateNumber();
        const result = await pool.query('SELECT COUNT(*) FROM wallets WHERE wallet_number = $1', [walletNumber]);
        if (result.rows[0].count === '0') isUnique = true;
        attempts++;
    }
    if (!isUnique) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞');
    return walletNumber;
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function registerClient(data) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        const res = await client.query(
            `INSERT INTO clients (full_name, birth_date, phone, telegram_id, telegram_username, nickname, skill_level) VALUES ($1, $2, $3, $4, $5, $6, NULL) RETURNING id`,
            [data.full_name, data.birth_date, data.phone, data.telegram_id, data.username || null, data.nickname]
        );
        const clientId = res.rows[0].id;
        const walletNumber = await generateUniqueWalletNumber();
        await client.query(`INSERT INTO wallets (client_id, wallet_number, balance) VALUES ($1, $2, 0)`, [clientId, walletNumber]);
        if (data.child) {
            await client.query(`INSERT INTO children (parent_id, full_name, birth_date, sport_type, skill_level) VALUES ($1, $2, $3, NULL, NULL)`, [clientId, data.child.full_name, data.child.birth_date]);
        }
        await client.query('COMMIT');
        return { walletNumber: formatWalletNumber(walletNumber) };
    } catch (e) {
        await client.query('ROLLBACK');
        throw e;
    } finally {
        client.release();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function finishRegistration(chatId, data) {
    try {
        const result = await registerClient(data);
        await bot.sendMessage(chatId,
            '‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n' +
            'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ski-instruktor!\n\n' +
            '–í–∞—à –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: `' + result.walletNumber + '`\n\n' +
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
            '‚Ä¢ üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n' +
            '‚Ä¢ üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n' +
            '‚Ä¢ üéÅ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                        ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'],
                        ['üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', 'üí∞ –ö–æ—à–µ–ª–µ–∫']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false,
                    persistent: true
                }
            }
        );
        userStates.delete(chatId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        await bot.sendMessage(chatId,
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            {
                reply_markup: {
                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                    resize_keyboard: true
                }
            }
        );
    }
}

// /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id.toString();
    const username = msg.from.username || '';
    const nickname = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
    const client = await getClientByTelegramId(telegramId);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(chatId);
    
    if (!client) {
        await bot.sendMessage(chatId,
            'üéø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ski-instruktor! üèî\n\n' +
            'üåü –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞!\n\n' +
            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n' +
            '‚Ä¢ üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–º —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ\n' +
            '‚Ä¢ ‚õ∑ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –ö—É–ª–∏–≥–µ –∑–∏–º–æ–π\n' +
            '‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º\n' +
            '‚Ä¢ üéÅ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n\n' +
            'üöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ! üéØ',
            {
                reply_markup: {
                    keyboard: [[{ text: 'üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor' }]],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            }
        );
        userStates.set(chatId, {
            step: 'wait_start',
            data: { telegram_id: telegramId, username, nickname }
        });
    } else {
        await bot.sendMessage(chatId, 'üéø *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!* –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', { parse_mode: 'Markdown' });
        showMainMenu(chatId);
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –º–µ–Ω—é
bot.on('message', async (msg) => {
    if (msg.text.startsWith('/')) return;
    const chatId = msg.chat.id;
    const state = userStates.get(chatId);

    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
        text: msg.text,
        chatId: chatId,
        currentState: state ? state.step : 'no state',
        stateData: state ? state.data : null
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
    if (msg.text === 'üîô –ù–∞–∑–∞–¥') {
        console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state ? state.step : 'no state');
        if (state) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
            switch (state.step) {
                case 'training_frequency':
                    state.step = 'has_group';
                    return bot.sendMessage(chatId,
                        'üë• *–£ –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å–µ –≤–º–µ—Å—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å?*',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['–î–∞', '–ù–µ—Ç'], ['üîô –ù–∞–∑–∞–¥']],
                                resize_keyboard: true
                            }
                        }
                    );
                case 'sport_type':
                    state.step = 'training_frequency';
                    return bot.sendMessage(chatId,
                        'üîÑ *–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?*',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['–†–µ–≥—É–ª—è—Ä–Ω–æ', '–†–∞–∑–æ–≤–æ'], ['üîô –ù–∞–∑–∞–¥']],
                                resize_keyboard: true
                            }
                        }
                    );
                case 'skill_level':
                    state.step = 'sport_type';
                    return bot.sendMessage(chatId,
                        'üèÇ *–ù–∞ —á–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∫–∞—Ç–∞—Ç—å—Å—è?*',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['–õ—ã–∂–∏', '–°–Ω–æ—É–±–æ—Ä–¥'], ['üîô –ù–∞–∑–∞–¥']],
                                resize_keyboard: true
                            }
                        }
                    );
                case 'preferred_date':
                    state.step = 'skill_level';
                    return bot.sendMessage(chatId, 'üìä *–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–∞–Ω–∏—è –æ—Ç 0 –¥–æ 10:*', {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥']],
                            resize_keyboard: true
                        }
                    });
                case 'preferred_time':
                    state.step = 'preferred_date';
                    return bot.sendMessage(chatId,
                        'üìÖ *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:*',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥']],
                                resize_keyboard: true
                            }
                        }
                    );
            }
        }
        return showMainMenu(chatId);
    }

    if (msg.text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
        userStates.delete(chatId);
        return showMainMenu(chatId);
    }

    if (state && state.step === 'wait_start' && msg.text === 'üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor') {
        state.step = 'full_name';
        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):');
    }
    if (state) {
        switch (state.step) {
            case 'full_name':
                if (msg.text.length < 5) return bot.sendMessage(chatId, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                state.data.full_name = msg.text;
                state.step = 'birth_date';
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
            case 'birth_date':
                const birthDate = validateDate(msg.text);
                if (!birthDate) return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:');
                state.data.birth_date = birthDate;
                state.step = 'phone';
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79999999999:');
            case 'phone':
                const phone = validatePhone(msg.text);
                if (!phone) return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +79999999999:');
                state.data.phone = phone;
                state.step = 'has_child';
                return bot.sendMessage(chatId, '–£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?', {
                    reply_markup: {
                        keyboard: [['–î–∞', '–ù–µ—Ç']],
                        resize_keyboard: true,
                        one_time_keyboard: false,
                        persistent: true
                    }
                });
            case 'has_child':
                if (msg.text === '–î–∞') {
                    const state = userStates.get(chatId);
                    if (state.data.children.length > 1) {
                        // –ï—Å–ª–∏ –¥–µ—Ç–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                        const childrenList = state.data.children.map((child, index) => 
                            `${index + 1}. ${child.full_name} (${new Date(child.birth_date).toLocaleDateString()})`
                        ).join('\n');

                        state.step = 'select_child';
                        userStates.set(chatId, state);
                        
                        return bot.sendMessage(chatId,
                            'üë∂ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:*\n\n' +
                            childrenList,
                            { 
                                parse_mode: 'Markdown', 
                                reply_markup: { 
                                    keyboard: [
                                        ...state.data.children.map((_, i) => [`${i + 1}`]),
                                        ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                    ], 
                                    resize_keyboard: true 
                                } 
                            }
                        );
                    } else {
                        // –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –æ–¥–∏–Ω, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                        const selectedChild = state.data.children[0];
                        userStates.set(chatId, {
                            step: 'training_type',
                            data: {
                                client_id: state.data.client_id,
                                is_child: true,
                                child_id: selectedChild.id,
                                child_name: selectedChild.full_name
                            }
                        });

                        return bot.sendMessage(chatId,
                            'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n' +
                            '‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–∞—è - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n' +
                            '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                            {
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    keyboard: [
                                        ['üë• –ì—Ä—É–ø–ø–æ–≤–∞—è'],
                                        ['üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'],
                                        ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                    ],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }
                } else if (msg.text === '–ù–µ—Ç') {
                    // –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç—è—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–µ–±—è
                    const state = userStates.get(chatId);
                    userStates.set(chatId, {
                        step: 'training_type',
                        data: {
                            client_id: state.data.client_id,
                            is_child: false
                        }
                    });

                    return bot.sendMessage(chatId,
                        'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n' +
                        '‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–∞—è - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n' +
                        '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ['üë• –ì—Ä—É–ø–ø–æ–≤–∞—è'],
                                    ['üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }
                break;
            case 'select_child': {
                const state = userStates.get(chatId);
                const childIndex = parseInt(msg.text) - 1;
                
                if (isNaN(childIndex) || childIndex < 0 || childIndex >= state.data.children.length) {
                    return bot.sendMessage(chatId,
                        '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.',
                        {
                            reply_markup: {
                                keyboard: [
                                    ...state.data.children.map((_, i) => [`${i + 1}`]),
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                const selectedChild = state.data.children[childIndex];
                userStates.set(chatId, {
                    step: 'training_type',
                    data: {
                        client_id: state.data.client_id,
                        is_child: true,
                        child_id: selectedChild.id,
                        child_name: selectedChild.full_name
                    }
                });

                return bot.sendMessage(chatId,
                    'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n' +
                    '‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–∞—è - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n' +
                    '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['üë• –ì—Ä—É–ø–ø–æ–≤–∞—è'],
                                ['üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }
            case 'training_type': {
                if (msg.text === 'üë• –ì—Ä—É–ø–ø–æ–≤–∞—è' || msg.text === 'üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è') {
                    const state = userStates.get(chatId);
                    state.data.training_type = msg.text === 'üë• –ì—Ä—É–ø–ø–æ–≤–∞—è' ? 'group' : 'individual';
                    
                    if (msg.text === 'üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è') {
                        state.step = 'equipment_type';
                        userStates.set(chatId, state);
                        return bot.sendMessage(chatId,
                            'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è:*\n\n' +
                            '‚Ä¢ üéø –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏\n' +
                            '‚Ä¢ üèÇ –°–Ω–æ—É–±–æ—Ä–¥',
                            {
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    keyboard: [
                                        ['üéø –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏'],
                                        ['üèÇ –°–Ω–æ—É–±–æ—Ä–¥'],
                                        ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                    ],
                                    resize_keyboard: true
                                }
                            }
                        );
                    } else {
                        state.step = 'preferred_date';
                        userStates.set(chatId, state);
                        return bot.sendMessage(chatId,
                            'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:*\n\n' +
                            '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                            {
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }
                }
                break;
            }
            case 'equipment_type': {
                if (msg.text === 'üéø –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏' || msg.text === 'üèÇ –°–Ω–æ—É–±–æ—Ä–¥') {
                    const state = userStates.get(chatId);
                    state.data.equipment_type = msg.text === 'üéø –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏' ? 'ski' : 'snowboard';
                    state.step = 'with_trainer';
                    userStates.set(chatId, state);
                    return bot.sendMessage(chatId,
                        'üë®‚Äçüè´ *–í—ã –±—É–¥–µ—Ç–µ –∫–∞—Ç–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –∏–ª–∏ –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞?*\n\n' +
                        '‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n' +
                        '‚Ä¢ –ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö\n' +
                        '‚Ä¢ –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å —Å 30 –º–∏–Ω—É—Ç\n' +
                        '‚Ä¢ –ï—Å–ª–∏ –≤—ã –Ω–æ–≤–∏—á–æ–∫ –∏ –Ω–µ –∏–º–µ–µ—Ç–µ –æ–ø—ã—Ç–∞ –∫–∞—Ç–∞–Ω–∏—è, –∫–∞—Ç–∞—Ç—å—Å—è –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ['üë®‚Äçüè´ –° —Ç—Ä–µ–Ω–µ—Ä–æ–º'],
                                    ['üë§ –ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }
                break;
            }
            case 'with_trainer': {
                if (msg.text === 'üë®‚Äçüè´ –° —Ç—Ä–µ–Ω–µ—Ä–æ–º' || msg.text === 'üë§ –ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞') {
                    const state = userStates.get(chatId);
                    state.data.with_trainer = msg.text === 'üë®‚Äçüè´ –° —Ç—Ä–µ–Ω–µ—Ä–æ–º';
                    state.step = 'duration';
                    userStates.set(chatId, state);

                    try {
                        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        const pricesResult = await pool.query(
                            `SELECT * FROM prices 
                            WHERE type = 'individual' 
                            AND with_trainer = $1 
                            ORDER BY duration`,
                            [state.data.with_trainer]
                        );

                        let message = '‚è± *–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n';
                        message += state.data.with_trainer ? 'üë®‚Äçüè´ *–° —Ç—Ä–µ–Ω–µ—Ä–æ–º:*\n' : 'üë§ *–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞:*\n';
                        
                        pricesResult.rows.forEach(price => {
                            message += `‚Ä¢ ${price.duration} –º–∏–Ω—É—Ç - ${price.price} —Ä—É–±.\n`;
                        });

                        message += '\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:';

                        return bot.sendMessage(chatId, message, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ['‚è± 30 –º–∏–Ω—É—Ç'],
                                    ['‚è± 60 –º–∏–Ω—É—Ç'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        });
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω:', error);
                        return bot.sendMessage(chatId,
                            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                            {
                                reply_markup: {
                                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }
                }
                break;
            }
            case 'duration': {
                if (msg.text === '‚è± 30 –º–∏–Ω—É—Ç' || msg.text === '‚è± 60 –º–∏–Ω—É—Ç') {
                    const state = userStates.get(chatId);
                    state.data.duration = msg.text === '‚è± 30 –º–∏–Ω—É—Ç' ? 30 : 60;
                    state.step = 'preferred_date';
                    userStates.set(chatId, state);

                    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    try {
                        const priceResult = await pool.query(
                            `SELECT price FROM prices 
                            WHERE type = 'individual' 
                            AND with_trainer = $1 
                            AND duration = $2`,
                            [state.data.with_trainer, state.data.duration]
                        );
                        
                        state.data.price = priceResult.rows[0].price;
                        userStates.set(chatId, state);

                        return bot.sendMessage(chatId,
                            'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:*\n\n' +
                            '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                            {
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã:', error);
                        return bot.sendMessage(chatId,
                            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                            {
                                reply_markup: {
                                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }
                }
                break;
            }
            case 'preferred_date': {
                const date = validateDate(msg.text);
                if (!date) {
                    return bot.sendMessage(chatId,
                        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n' +
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                const state = userStates.get(chatId);
                state.data.preferred_date = date;

                try {
                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞—Ö
                    const simulatorsResult = await pool.query(
                        'SELECT id, name FROM simulators WHERE is_working = true'
                    );
                    const simulators = simulatorsResult.rows;

                    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                    const scheduleResult = await pool.query(
                        `WITH RECURSIVE time_slots AS (
                            SELECT 
                                s.*,
                                ts.id as training_id,
                                ts.duration,
                                ts.start_time as session_start_time
                            FROM schedule s 
                            LEFT JOIN training_sessions ts ON s.simulator_id = ts.simulator_id 
                            AND s.date = ts.session_date 
                            AND s.start_time >= ts.start_time 
                            AND s.start_time < (ts.start_time + COALESCE(ts.duration, 30) * interval '1 minute')
                            WHERE s.date = $1 AND s.is_holiday = false
                        )
                        SELECT * FROM time_slots
                        ORDER BY start_time`,
                        [date]
                    );

                    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞–º
                    const scheduleBySimulator = {};
                    simulators.forEach(sim => {
                        scheduleBySimulator[sim.id] = scheduleResult.rows.filter(
                            s => s.simulator_id === sim.id
                        );
                    });

                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                    const keyboard = [];
                    const timeSlots = new Set();

                    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                    scheduleResult.rows.forEach(slot => {
                        timeSlots.add(slot.start_time);
                    });

                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                    const sortedTimeSlots = Array.from(timeSlots).sort();

                    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    sortedTimeSlots.forEach(time => {
                        const row = [];
                        simulators.forEach(sim => {
                            const slot = scheduleBySimulator[sim.id].find(s => s.start_time === time);
                            const isBooked = slot && slot.training_id;
                            
                            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ HH:MM
                            const [hours, minutes] = time.split(':');
                            const formattedTime = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
                            
                            row.push({
                                text: `${isBooked ? '‚è∞' : '‚úÖ'} ${formattedTime}`,
                                callback_data: isBooked ? 
                                    'booked' : 
                                    `time_${sim.id}_${time}`
                            });
                        });
                        keyboard.push(row);
                    });

                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                    keyboard.push([{
                        text: 'üîô –ù–∞–∑–∞–¥',
                        callback_data: 'back_to_date'
                    }]);

                    state.step = 'select_time';
                    userStates.set(chatId, state);

                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞—Ö
                    let message = '‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:*\n\n';
                    simulators.forEach((sim, index) => {
                        message += `${index + 1}. ${sim.name}\n`;
                    });
                    message += '\n‚úÖ - –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω–æ\n‚è∞ - –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ';

                    return bot.sendMessage(chatId, message, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
                    return bot.sendMessage(chatId,
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            }
            case 'select_time': {
                const data = msg.text;
                if (data === 'back_to_date') {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
                    userStates.get(chatId).step = 'preferred_date';
                    return bot.sendMessage(chatId,
                        'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:*\n\n' +
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                if (data === 'booked') {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
                    return bot.answerCallbackQuery(msg.id, {
                        text: '–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ',
                        show_alert: true
                    });
                }

                if (data.startsWith('time_')) {
                    const [, simulatorId, time] = data.split('_');
                    
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞
                        const balanceResult = await pool.query(
                            'SELECT balance FROM wallets WHERE client_id = $1',
                            [state.data.client_id]
                        );
                        const balance = balanceResult.rows[0]?.balance || 0;

                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ HH:MM
                        const [hours, minutes] = time.split(':');
                        const formattedTime = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;

                        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        let summaryMessage = 'üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n\n';
                        summaryMessage += '*–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n';
                        summaryMessage += `‚Ä¢ –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${state.data.training_type === 'individual' ? '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è' : '–ì—Ä—É–ø–ø–æ–≤–∞—è'}\n`;
                        summaryMessage += `‚Ä¢ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ: ${state.data.equipment_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏ üéø' : '–°–Ω–æ—É–±–æ—Ä–¥ üèÇ'}\n`;
                        summaryMessage += `‚Ä¢ –¢—Ä–µ–Ω–µ—Ä: ${state.data.with_trainer ? '–° —Ç—Ä–µ–Ω–µ—Ä–æ–º üë®‚Äçüè´' : '–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ üë§'}\n`;
                        summaryMessage += `‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${state.data.duration} –º–∏–Ω—É—Ç ‚è±\n`;
                        summaryMessage += `‚Ä¢ –î–∞—Ç–∞: ${state.data.preferred_date}\n`;
                        summaryMessage += `‚Ä¢ –í—Ä–µ–º—è: ${formattedTime}\n`;
                        summaryMessage += `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${state.data.price} —Ä—É–±. üí∞\n`;
                        summaryMessage += `‚Ä¢ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} —Ä—É–±. üí≥\n\n`;

                        if (balance < state.data.price) {
                            summaryMessage += '‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n';
                            summaryMessage += '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n\n';
                        }

                        summaryMessage += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                        state.step = 'confirm_booking';
                        state.data.preferred_time = time;
                        state.data.simulator_id = simulatorId;
                        userStates.set(chatId, state);

                        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await bot.deleteMessage(chatId, msg.message_id);

                        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
                        await bot.answerCallbackQuery(msg.id);

                        return bot.sendMessage(chatId, summaryMessage, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ['‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                                    ['‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª'],
                                    ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        });
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏:', error);
                        await bot.answerCallbackQuery(msg.id, {
                            text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                            show_alert: true
                        });
                        return bot.sendMessage(chatId,
                            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                            {
                                reply_markup: {
                                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }
                }
            }
            case 'confirm_booking': {
                const state = userStates.get(chatId);
                
                if (msg.text === '‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É') {
                    try {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
                        const balanceResult = await pool.query(
                            'SELECT balance FROM wallets WHERE client_id = $1',
                            [state.data.client_id]
                        );
                        const balance = balanceResult.rows[0]?.balance || 0;

                        if (balance < state.data.price) {
                            return bot.sendMessage(chatId,
                                '‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n' +
                                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                                {
                                    reply_markup: {
                                        keyboard: [['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'], ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                        resize_keyboard: true
                                    }
                                }
                            );
                        }

                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        const result = await pool.query(
                            `INSERT INTO training_requests (
                                client_id, 
                                child_id, 
                                training_type, 
                                equipment_type,
                                with_trainer,
                                duration,
                                preferred_date, 
                                preferred_time,
                                simulator_id,
                                price,
                                status
                            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, 'pending') 
                            RETURNING id`,
                            [
                                state.data.client_id,
                                state.data.is_child ? state.data.child_id : null,
                                state.data.training_type,
                                state.data.equipment_type,
                                state.data.with_trainer,
                                state.data.duration,
                                state.data.preferred_date,
                                state.data.preferred_time,
                                state.data.simulator_id,
                                state.data.price
                            ]
                        );

                        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ
                        const simulatorResult = await pool.query(
                            'SELECT name FROM simulators WHERE id = $1',
                            [state.data.simulator_id]
                        );
                        const simulatorName = simulatorResult.rows[0].name;

                        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞
                        await pool.query(
                            'UPDATE wallets SET balance = balance - $1 WHERE client_id = $2',
                            [state.data.price, state.data.client_id]
                        );

                        // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        const walletResult = await pool.query(
                            'SELECT id FROM wallets WHERE client_id = $1',
                            [state.data.client_id]
                        );
                        const walletId = walletResult.rows[0].id;

                        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        const transactionDescription = 
                            `–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${state.data.training_type === 'individual' ? '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è' : '–ì—Ä—É–ø–ø–æ–≤–∞—è'}; ` +
                            `–î–∞—Ç–∞: ${state.data.preferred_date}; ` +
                            `–í—Ä–µ–º—è: ${state.data.preferred_time}; ` +
                            `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${state.data.duration} –º–∏–Ω—É—Ç`;

                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        await pool.query(
                            `INSERT INTO transactions (
                                wallet_id,
                                amount,
                                type,
                                description
                            ) VALUES ($1, $2, 'payment', $3)`,
                            [
                                walletId,
                                state.data.price,
                                transactionDescription
                            ]
                        );

                        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
                        let message = '‚úÖ *–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n';
                        message += `üìÖ –î–∞—Ç–∞: ${state.data.preferred_date}\n`;
                        message += `‚è∞ –í—Ä–µ–º—è: ${state.data.preferred_time}\n`;
                        message += `üéø –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${state.data.training_type === 'individual' ? '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è' : '–ì—Ä—É–ø–ø–æ–≤–∞—è'}\n`;
                        message += `üèÇ –¢—Ä–µ–Ω–∞–∂–µ—Ä: ${simulatorName}\n`;
                        message += `üí∞ –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è: ${state.data.price} —Ä—É–±.\n`;
                        
                        if (state.data.is_child) {
                            message += `üë∂ –†–µ–±–µ–Ω–æ–∫: ${state.data.child_name}\n`;
                        }

                        message += '\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.';

                        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        userStates.delete(chatId);

                        return bot.sendMessage(chatId, message, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        });
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
                        return bot.sendMessage(chatId,
                            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                            {
                                reply_markup: {
                                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }
                } else if (msg.text === '‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª') {
                    userStates.delete(chatId);
                    return bot.sendMessage(chatId,
                        '‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–º–µ–Ω–µ–Ω–∞.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                } else if (msg.text === 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫') {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                    return showBalanceMenu(chatId);
                } else if (msg.text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
                    userStates.delete(chatId);
                    return showMainMenu(chatId);
                }
                break;
            }
        }
        return;
    }
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    switch (msg.text) {
        case 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É': {
            return bot.sendMessage(chatId,
                'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n\n' +
                '1Ô∏è‚É£ *–ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä –ì–æ—Ä–Ω–æ—Å—Ç–∞–π–ª72*\n\n' +
                '2Ô∏è‚É£ *–ö—É–ª–∏–≥–∞. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–ª–æ–Ω* (—Ç–æ–ª—å–∫–æ –∑–∏–º–æ–π)\n\n' +
                '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['üèÇ –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä'],
                            ['‚õ∑ –ö—É–ª–∏–≥–∞.–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–ª–æ–Ω'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                }
            );
        }
        case 'üèÇ –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä': {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏
                const twoWeeksFromNow = new Date();
                twoWeeksFromNow.setDate(twoWeeksFromNow.getDate() + 14);
                
                const result = await pool.query(
                    `SELECT ts.*, g.name as group_name, ts.max_participants, ts.price
                     FROM training_sessions ts
                     JOIN groups g ON ts.group_id = g.id
                     WHERE ts.session_date BETWEEN CURRENT_DATE AND $1
                     AND ts.training_type = true
                     ORDER BY ts.session_date, ts.start_time`,
                    [twoWeeksFromNow]
                );

                let message = 'üéØ *–ë–ª–∏–∂–∞–π—à–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n';
                
                if (result.rows.length === 0) {
                    message += '–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.\n\n';
                    message += '–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ *"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é"* —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ò–ª–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å *"–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"*, –∞ –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.\n\n';
                } else {
                    result.rows.forEach(training => {
                        const date = new Date(training.session_date).toLocaleDateString('ru-RU');
                        message += `üìÖ *${date} ${training.start_time}*\n`;
                        message += `üë• –ì—Ä—É–ø–ø–∞: ${training.group_name}\n`;
                        message += `üë§ –ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${training.max_participants}\n`;
                        message += `üí∞ –¶–µ–Ω–∞: ${training.price} —Ä—É–±.\n\n`;
                    });
                }
                message += '–ù–∞–∂–º–∏—Ç–µ *"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"* –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ *–≥—Ä—É–ø–ø–æ–≤—É—é* –∏–ª–∏ *–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é* —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n\n';
                message += '–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å *"–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"*, –∞ –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.\n\n';
                message += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
                
                return bot.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è'],
                            ['üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
                return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        }
        case '‚õ∑ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–ª–æ–Ω': {
            return bot.sendMessage(chatId,
                'üîÑ *–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–ª–æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n\n' +
                '–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ö—É–ª–∏–≥–µ!',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }
        case 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É': {
            const bookingUrl = process.env.BOOKING_PAGE_URL;
            return bot.sendMessage(chatId,
                'üéØ *–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É*\n\n' +
                '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n' +
                `[–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏](${bookingUrl}?simulator=1)\n\n` +
                '–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
                {
                    parse_mode: 'Markdown',
                    disable_web_page_preview: true,
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }
        case 'üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É': {
            console.log('–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
            userStates.set(chatId, {
                step: 'has_group',
                data: { telegram_id: msg.from.id.toString() }
            });
            return bot.sendMessage(chatId,
                'üë• *–£ –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å–µ –≤–º–µ—Å—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å?*',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['–î–∞', '–ù–µ—Ç']],
                        resize_keyboard: true
                    }
                }
            );
        }
        case 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏':
            return bot.sendMessage(chatId, 'üîÑ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { reply_markup: { keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']], resize_keyboard: true } });
        case 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç': {
            const client = await getClientByTelegramId(msg.from.id.toString());
            let childInfo = '–Ω–µ—Ç';
            if (client) {
                const childRes = await pool.query('SELECT * FROM children WHERE parent_id = $1', [client.id]);
                if (childRes.rows.length > 0) {
                    childInfo = childRes.rows.map(child => {
                        const birthDate = new Date(child.birth_date);
                        const age = Math.floor((new Date() - birthDate) / (365.25 * 24 * 60 * 60 * 1000));
                        return `${child.full_name} (${age} –ª–µ—Ç)`;
                    }).join('\nüë∂ ');
                    childInfo = 'üë∂ ' + childInfo;
                }
                return bot.sendMessage(chatId,
                    'üë§ *–í–∞—à–∞ –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n' +
                    `üìù *–§–ò–û:* ${client.full_name}\n` +
                    `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${new Date(client.birth_date).toLocaleDateString()}\n` +
                    `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${client.phone}\n` +
                    `üë∂ *–î–µ—Ç–∏:*\n${childInfo}`,
                    { 
                        parse_mode: 'Markdown', 
                        reply_markup: { 
                            keyboard: [
                                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞'],
                                ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ], 
                            resize_keyboard: true 
                        } 
                    }
                );
            }
            break;
        }
        case 'üí∞ –ö–æ—à–µ–ª–µ–∫': {
            const client = await getClientByTelegramId(msg.from.id.toString());
            if (client) {
                return bot.sendMessage(chatId,
                    'üí∞ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ:*\n' +
                    `üî¢ *–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:* ${client.wallet_number}\n` +
                    `üíµ *–ë–∞–ª–∞–Ω—Å:* ${client.balance || 0} —Ä—É–±.`,
                    { 
                        parse_mode: 'Markdown', 
                        reply_markup: { 
                            keyboard: [
                                ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ], 
                            resize_keyboard: true 
                        } 
                    }
                );
            }
            break;
        }
        case 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫': {
            const paymentLink = process.env.PAYMENT_LINK;
            const adminPhone = process.env.ADMIN_PHONE || '+79123924956';
            if (!paymentLink) {
                return bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
            }
            const client = await getClientByTelegramId(msg.from.id.toString());
            if (!client) {
                return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ.');
            }
            return bot.sendMessage(chatId,
                '‚ú® *–ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –≤—Å–µ–≥–æ –≤ 1 –∫–ª–∏–∫!*\n\n' +
                '*–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n' +
                '1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ\n' +
                '2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞\n' +
                `üíé *–ö–û–®–ï–õ–ï–ö:* \`${client.wallet_number}\`\n\n` +
                '3Ô∏è‚É£ –í —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω\n\n' +
                `üëâ [–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å](${paymentLink}) üëà\n\n` +
                '‚ö° –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–ª–µ—Ç—è—Ç –∫ –Ω–∞–º –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç!\n\n' +
                'üí´ –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∂–¥—É—Ç –≤–∞—Å! ‚õ∑Ô∏è‚ú®\n\n' +
                `*P.S.* –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminPhone}! üòä`,
                { 
                    parse_mode: 'Markdown',
                    disable_web_page_preview: true,
                    reply_markup: { 
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']], 
                        resize_keyboard: true 
                    }
                }
            );
        }
        case '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞': {
            userStates.set(chatId, {
                step: 'add_child_name',
                data: { telegram_id: msg.from.id.toString() }
            });
            return bot.sendMessage(chatId,
                'üë∂ *–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ (–§–ò–û):*',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }
        case '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ': {
            const client = await getClientByTelegramId(msg.from.id.toString());
            const childRes = await pool.query('SELECT * FROM children WHERE parent_id = $1', [client.id]);
            const hasChild = childRes.rows.length > 0;
            
            userStates.set(chatId, {
                step: 'edit_data',
                data: { 
                    telegram_id: msg.from.id.toString(),
                    has_child: hasChild,
                    child_id: hasChild ? childRes.rows[0].id : null
                }
            });

            let message = '‚úèÔ∏è *–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?*\n\n' +
                         '1. –§–ò–û\n' +
                         '2. –¢–µ–ª–µ—Ñ–æ–Ω\n' +
                         '3. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è';
                 
            if (hasChild) {
                message += '\n4. –§–ò–û —Ä–µ–±–µ–Ω–∫–∞\n' +
                           '5. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞';
            }

            const keyboard = [
                ['1. –§–ò–û', '2. –¢–µ–ª–µ—Ñ–æ–Ω'],
                ['3. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è']
            ];

            if (hasChild) {
                keyboard.push(['4. –§–ò–û —Ä–µ–±–µ–Ω–∫–∞', '5. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞']);
            }

            keyboard.push(['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']);

            return bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: keyboard,
                    resize_keyboard: true
                }
            });
        }
        case 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è': {
            try {
                const client = await getClientByTelegramId(msg.from.id.toString());
                if (!client) {
                    return bot.sendMessage(chatId,
                        '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞
                const childrenResult = await pool.query(
                    'SELECT * FROM children WHERE parent_id = $1',
                    [client.id]
                );
                const children = childrenResult.rows;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                userStates.set(chatId, {
                    step: 'has_child',
                    data: {
                        client_id: client.id,
                        children: children
                    }
                });

                // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∏, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—Ç–∏—Ç –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞
                if (children.length > 0) {
                    return bot.sendMessage(chatId,
                        'üë• *–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?*',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['–î–∞', '–ù–µ—Ç'], ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                } else {
                    // –ï—Å–ª–∏ –¥–µ—Ç–µ–π –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                    userStates.set(chatId, {
                        step: 'training_type',
                        data: {
                            client_id: client.id,
                            is_child: false
                        }
                    });
                    return bot.sendMessage(chatId,
                        'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n' +
                        '‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–∞—è - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n' +
                        '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ['üë• –ì—Ä—É–ø–ø–æ–≤–∞—è'],
                                    ['üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
                return bot.sendMessage(chatId,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
        }
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const state = userStates.get(chatId);

    try {
        if (!state) {
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.',
                show_alert: true
            });
            return showMainMenu(chatId);
        }

        if (data === 'back_to_date') {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
            state.step = 'preferred_date';
            userStates.set(chatId, state);
            await bot.answerCallbackQuery(callbackQuery.id);
            return bot.sendMessage(chatId,
                'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:*\n\n' +
                '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }

        if (data === 'booked') {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ',
                show_alert: true
            });
            return;
        }

        if (data.startsWith('time_')) {
            const [, simulatorId, time] = data.split('_');
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞
                const balanceResult = await pool.query(
                    'SELECT balance FROM wallets WHERE client_id = $1',
                    [state.data.client_id]
                );
                const balance = balanceResult.rows[0]?.balance || 0;

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ HH:MM
                const [hours, minutes] = time.split(':');
                const formattedTime = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;

                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                let summaryMessage = 'üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n\n';
                summaryMessage += '*–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n';
                summaryMessage += `‚Ä¢ –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${state.data.training_type === 'individual' ? '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è' : '–ì—Ä—É–ø–ø–æ–≤–∞—è'}\n`;
                summaryMessage += `‚Ä¢ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ: ${state.data.equipment_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏ üéø' : '–°–Ω–æ—É–±–æ—Ä–¥ üèÇ'}\n`;
                summaryMessage += `‚Ä¢ –¢—Ä–µ–Ω–µ—Ä: ${state.data.with_trainer ? '–° —Ç—Ä–µ–Ω–µ—Ä–æ–º üë®‚Äçüè´' : '–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ üë§'}\n`;
                summaryMessage += `‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${state.data.duration} –º–∏–Ω—É—Ç ‚è±\n`;
                summaryMessage += `‚Ä¢ –î–∞—Ç–∞: ${state.data.preferred_date}\n`;
                summaryMessage += `‚Ä¢ –í—Ä–µ–º—è: ${formattedTime}\n`;
                summaryMessage += `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${state.data.price} —Ä—É–±. üí∞\n`;
                summaryMessage += `‚Ä¢ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} —Ä—É–±. üí≥\n\n`;

                if (balance < state.data.price) {
                    summaryMessage += '‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n';
                    summaryMessage += '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n\n';
                }

                summaryMessage += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                state.step = 'confirm_booking';
                state.data.preferred_time = time;
                state.data.simulator_id = simulatorId;
                userStates.set(chatId, state);

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await bot.deleteMessage(chatId, callbackQuery.message.message_id);

                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
                await bot.answerCallbackQuery(callbackQuery.id);

                return bot.sendMessage(chatId, summaryMessage, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                            ['‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª'],
                            ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏:', error);
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    show_alert: true
                });
                return bot.sendMessage(chatId,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞:', error);
        try {
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                show_alert: true
            });
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å:', e);
        }
        return showMainMenu(chatId);
    }
});