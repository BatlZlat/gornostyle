require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const pool = new Pool({
    connectionString: process.env.DATABASE_URL || undefined,
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
});

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const userStates = new Map();

function showMainMenu(chatId) {
    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
            keyboard: [
                ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'],
                ['üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', 'üí∞ –ö–æ—à–µ–ª–µ–∫']
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
            persistent: true
        }
    });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è
function validateDate(dateStr) {
    const [day, month, year] = dateStr.split('.');
    const date = new Date(year, month - 1, day);
    if (date.getDate() !== parseInt(day) || date.getMonth() !== parseInt(month) - 1 || date.getFullYear() !== parseInt(year)) return null;
    return date.toISOString().split('T')[0];
}
function validatePhone(phone) {
    return /^\+7\d{10}$/.test(phone) ? phone : null;
}
function formatWalletNumber(number) {
    return number.replace(/(\d{4})(\d{4})(\d{4})(\d{4})/, '$1-$2-$3-$4');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async function getClientByTelegramId(telegramId) {
    const res = await pool.query(
        `SELECT c.*, w.wallet_number, w.balance FROM clients c LEFT JOIN wallets w ON c.id = w.client_id WHERE c.telegram_id = $1`,
        [telegramId]
    );
    if (res.rows[0] && res.rows[0].wallet_number) {
        res.rows[0].wallet_number = formatWalletNumber(res.rows[0].wallet_number);
    }
    return res.rows[0];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
async function generateUniqueWalletNumber() {
    const generateNumber = () => Array.from({ length: 16 }, () => Math.floor(Math.random() * 10)).join('');
    let walletNumber, isUnique = false, attempts = 0;
    while (!isUnique && attempts < 10) {
        walletNumber = generateNumber();
        const result = await pool.query('SELECT COUNT(*) FROM wallets WHERE wallet_number = $1', [walletNumber]);
        if (result.rows[0].count === '0') isUnique = true;
        attempts++;
    }
    if (!isUnique) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞');
    return walletNumber;
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function registerClient(data) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        const res = await client.query(
            `INSERT INTO clients (full_name, birth_date, phone, telegram_id, telegram_username, nickname, skill_level) VALUES ($1, $2, $3, $4, $5, $6, NULL) RETURNING id`,
            [data.full_name, data.birth_date, data.phone, data.telegram_id, data.username || null, data.nickname]
        );
        const clientId = res.rows[0].id;
        const walletNumber = await generateUniqueWalletNumber();
        await client.query(`INSERT INTO wallets (client_id, wallet_number, balance) VALUES ($1, $2, 0)`, [clientId, walletNumber]);
        if (data.child) {
            await client.query(`INSERT INTO children (parent_id, full_name, birth_date, sport_type, skill_level) VALUES ($1, $2, $3, NULL, NULL)`, [clientId, data.child.full_name, data.child.birth_date]);
        }
        await client.query('COMMIT');
        return { walletNumber: formatWalletNumber(walletNumber) };
    } catch (e) {
        await client.query('ROLLBACK');
        throw e;
    } finally {
        client.release();
    }
}

// /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id.toString();
    const username = msg.from.username || '';
    const nickname = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
    const client = await getClientByTelegramId(telegramId);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(chatId);
    
    if (!client) {
        await bot.sendMessage(chatId,
            'üéø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ski-instruktor! üèî\n\n' +
            'üåü –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞!\n\n' +
            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n' +
            '‚Ä¢ üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–º —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ\n' +
            '‚Ä¢ ‚õ∑ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –ö—É–ª–∏–≥–µ –∑–∏–º–æ–π\n' +
            '‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º\n' +
            '‚Ä¢ üéÅ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n\n' +
            'üöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ! üéØ',
            {
                reply_markup: {
                    keyboard: [[{ text: 'üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor' }]],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            }
        );
        userStates.set(chatId, {
            step: 'wait_start',
            data: { telegram_id: telegramId, username, nickname }
        });
    } else {
        await bot.sendMessage(chatId, 'üéø *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!* –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', { parse_mode: 'Markdown' });
        showMainMenu(chatId);
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –º–µ–Ω—é
bot.on('message', async (msg) => {
    if (msg.text.startsWith('/')) return;
    const chatId = msg.chat.id;
    const state = userStates.get(chatId);
    if (state && state.step === 'wait_start' && msg.text === 'üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor') {
        state.step = 'full_name';
        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):');
    }
    if (state) {
        switch (state.step) {
            case 'full_name':
                if (msg.text.length < 5) return bot.sendMessage(chatId, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                state.data.full_name = msg.text;
                state.step = 'birth_date';
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
            case 'birth_date':
                const birthDate = validateDate(msg.text);
                if (!birthDate) return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:');
                state.data.birth_date = birthDate;
                state.step = 'phone';
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79999999999:');
            case 'phone':
                const phone = validatePhone(msg.text);
                if (!phone) return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +79999999999:');
                state.data.phone = phone;
                state.step = 'has_child';
                return bot.sendMessage(chatId, '–£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?', {
                    reply_markup: {
                        keyboard: [['–î–∞', '–ù–µ—Ç']],
                        resize_keyboard: true,
                        one_time_keyboard: false,
                        persistent: true
                    }
                });
            case 'has_child':
                if (msg.text.toLowerCase() === '–¥–∞') {
                    state.step = 'child_name';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ (–§–ò–û):');
                } else {
                    await finishRegistration(chatId, state.data);
                    return;
                }
            case 'child_name':
                if (msg.text.length < 5) return bot.sendMessage(chatId, '–ò–º—è —Ä–µ–±–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                state.data.child = { full_name: msg.text };
                state.step = 'child_birth_date';
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
            case 'child_birth_date':
                const registrationChildBirthDate = validateDate(msg.text);
                if (!registrationChildBirthDate) return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:');
                state.data.child.birth_date = registrationChildBirthDate;
                await finishRegistration(chatId, state.data);
                return;
            case 'edit_full_name':
                if (msg.text.length < 5) return bot.sendMessage(chatId, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                try {
                    await pool.query('UPDATE clients SET full_name = $1 WHERE telegram_id = $2', [msg.text, state.data.telegram_id]);
                    await bot.sendMessage(chatId, '‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
                    userStates.delete(chatId);
                    return showMainMenu(chatId);
                } catch (e) {
                    return bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
            case 'edit_phone':
                const newPhone = validatePhone(msg.text);
                if (!newPhone) return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +79999999999:');
                try {
                    await pool.query('UPDATE clients SET phone = $1 WHERE telegram_id = $2', [newPhone, state.data.telegram_id]);
                    await bot.sendMessage(chatId, '‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
                    userStates.delete(chatId);
                    return showMainMenu(chatId);
                } catch (e) {
                    return bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
            case 'add_child_name':
                if (msg.text.length < 5) return bot.sendMessage(chatId, '–ò–º—è —Ä–µ–±–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                state.data.child_name = msg.text;
                state.step = 'add_child_birth_date';
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
            case 'add_child_birth_date':
                const newChildBirthDate = validateDate(msg.text);
                if (!newChildBirthDate) return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:');
                try {
                    const client = await getClientByTelegramId(state.data.telegram_id);
                    await pool.query(
                        'INSERT INTO children (parent_id, full_name, birth_date) VALUES ($1, $2, $3)',
                        [client.id, state.data.child_name, newChildBirthDate]
                    );
                    await bot.sendMessage(chatId, '‚úÖ –†–µ–±–µ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
                    userStates.delete(chatId);
                    return showMainMenu(chatId);
                } catch (e) {
                    return bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
        }
        return;
    }
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    switch (msg.text) {
        case 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É':
            return bot.sendMessage(chatId, 'üîÑ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { reply_markup: { keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']], resize_keyboard: true } });
        case 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏':
            return bot.sendMessage(chatId, 'üîÑ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { reply_markup: { keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']], resize_keyboard: true } });
        case 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç': {
            const client = await getClientByTelegramId(msg.from.id.toString());
            let childInfo = '–Ω–µ—Ç';
            if (client) {
                const childRes = await pool.query('SELECT * FROM children WHERE parent_id = $1', [client.id]);
                if (childRes.rows[0]) {
                    const birthDate = new Date(childRes.rows[0].birth_date);
                    const age = Math.floor((new Date() - birthDate) / (365.25 * 24 * 60 * 60 * 1000));
                    childInfo = `${childRes.rows[0].full_name} (${age} –ª–µ—Ç)`;
                }
                return bot.sendMessage(chatId,
                    'üë§ *–í–∞—à–∞ –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n' +
                    `üìù *–§–ò–û:* ${client.full_name}\n` +
                    `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${new Date(client.birth_date).toLocaleDateString()}\n` +
                    `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${client.phone}\n` +
                    `üë∂ *–†–µ–±–µ–Ω–æ–∫:* ${childInfo}`,
                    { 
                        parse_mode: 'Markdown', 
                        reply_markup: { 
                            keyboard: [
                                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞'],
                                ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ], 
                            resize_keyboard: true 
                        } 
                    }
                );
            }
            break;
        }
        case 'üí∞ –ö–æ—à–µ–ª–µ–∫': {
            const client = await getClientByTelegramId(msg.from.id.toString());
            if (client) {
                return bot.sendMessage(chatId,
                    'üí∞ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ:*\n' +
                    `üî¢ *–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:* ${client.wallet_number}\n` +
                    `üíµ *–ë–∞–ª–∞–Ω—Å:* ${client.balance || 0} —Ä—É–±.`,
                    { 
                        parse_mode: 'Markdown', 
                        reply_markup: { 
                            keyboard: [
                                ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ], 
                            resize_keyboard: true 
                        } 
                    }
                );
            }
            break;
        }
        case 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫': {
            const paymentLink = process.env.PAYMENT_LINK;
            const adminPhone = process.env.ADMIN_PHONE || '+79123924956';
            if (!paymentLink) {
                return bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
            }
            const client = await getClientByTelegramId(msg.from.id.toString());
            if (!client) {
                return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ.');
            }
            return bot.sendMessage(chatId,
                '‚ú® *–ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –≤—Å–µ–≥–æ –≤ 1 –∫–ª–∏–∫!*\n\n' +
                '*–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n' +
                '1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ\n' +
                '2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞\n' +
                `üíé *–ö–û–®–ï–õ–ï–ö:* \`${client.wallet_number}\`\n\n` +
                '3Ô∏è‚É£ –í —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω\n\n' +
                `üëâ [–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å](${paymentLink}) üëà\n\n` +
                '‚ö° –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–ª–µ—Ç—è—Ç –∫ –Ω–∞–º –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç!\n\n' +
                'üí´ –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∂–¥—É—Ç –≤–∞—Å! ‚õ∑Ô∏è‚ú®\n\n' +
                `*P.S.* –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminPhone}! üòä`,
                { 
                    parse_mode: 'Markdown',
                    disable_web_page_preview: true,
                    reply_markup: { 
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']], 
                        resize_keyboard: true 
                    }
                }
            );
        }
        case '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞': {
            userStates.set(chatId, {
                step: 'add_child_name',
                data: { telegram_id: msg.from.id.toString() }
            });
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ (–§–ò–û):');
        }
        case '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ': {
            return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:', {
                reply_markup: {
                    keyboard: [
                        ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û'],
                        ['üì± –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'],
                        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞'],
                        ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
        }
        case 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û': {
            userStates.set(chatId, {
                step: 'edit_full_name',
                data: { telegram_id: msg.from.id.toString() }
            });
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):');
        }
        case 'üì± –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω': {
            userStates.set(chatId, {
                step: 'edit_phone',
                data: { telegram_id: msg.from.id.toString() }
            });
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79999999999:');
        }
        case 'üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã':
            return bot.sendMessage(chatId, 'üîÑ –§—É–Ω–∫—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { reply_markup: { keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']], resize_keyboard: true } });
        case 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
            return showMainMenu(chatId);
    }
});

async function finishRegistration(chatId, data) {
    try {
        const { walletNumber } = await registerClient(data);
        await bot.sendMessage(chatId,
            '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n' +
            'üìù –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n' +
            `üë§ –§–ò–û: ${data.full_name}\n` +
            `üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${new Date(data.birth_date).toLocaleDateString()}\n` +
            `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n` +
            `üí≥ –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: ${walletNumber}\n\n` +
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.'
        );
        userStates.delete(chatId);
        showMainMenu(chatId);
    } catch (e) {
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

console.log('–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!'); 