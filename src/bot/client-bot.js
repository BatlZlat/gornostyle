require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');
const { notifyNewTrainingRequest, notifyNewIndividualTraining, notifyAdminGroupTrainingCancellation, notifyAdminIndividualTrainingCancellation } = require('./admin-bot');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const pool = new Pool({
    connectionString: process.env.DATABASE_URL || undefined,
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
});

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const userStates = new Map();

function showMainMenu(chatId) {
    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
            keyboard: [
                ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'],
                ['üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', 'üí∞ –ö–æ—à–µ–ª–µ–∫']
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
            persistent: true
        }
    });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è
function validateDate(dateStr) {
    const [day, month, year] = dateStr.split('.');
    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ UTC —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ (UTC+5)
    const date = new Date(Date.UTC(year, month - 1, day, 0, 0, 0));
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if (date.getUTCDate() !== parseInt(day) || 
        date.getUTCMonth() !== parseInt(month) - 1 || 
        date.getUTCFullYear() !== parseInt(year)) {
        return null;
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    return date.toISOString().split('T')[0];
}
function validatePhone(phone) {
    return /^\+7\d{10}$/.test(phone) ? phone : null;
}
function formatWalletNumber(number) {
    return number.replace(/(\d{4})(\d{4})(\d{4})(\d{4})/, '$1-$2-$3-$4');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async function getClientByTelegramId(telegramId) {
    const res = await pool.query(
        `SELECT c.*, w.wallet_number, w.balance FROM clients c LEFT JOIN wallets w ON c.id = w.client_id WHERE c.telegram_id = $1`,
        [telegramId]
    );
    if (res.rows[0] && res.rows[0].wallet_number) {
        res.rows[0].wallet_number = formatWalletNumber(res.rows[0].wallet_number);
    }
    return res.rows[0];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
async function generateUniqueWalletNumber() {
    const generateNumber = () => Array.from({ length: 16 }, () => Math.floor(Math.random() * 10)).join('');
    let walletNumber, isUnique = false, attempts = 0;
    while (!isUnique && attempts < 10) {
        walletNumber = generateNumber();
        const result = await pool.query('SELECT COUNT(*) FROM wallets WHERE wallet_number = $1', [walletNumber]);
        if (result.rows[0].count === '0') isUnique = true;
        attempts++;
    }
    if (!isUnique) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞');
    return walletNumber;
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function registerClient(data) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        const res = await client.query(
            `INSERT INTO clients (full_name, birth_date, phone, telegram_id, telegram_username, nickname, skill_level) VALUES ($1, $2, $3, $4, $5, $6, NULL) RETURNING id`,
            [data.full_name, data.birth_date, data.phone, data.telegram_id, data.username || null, data.nickname]
        );
        const clientId = res.rows[0].id;
        const walletNumber = await generateUniqueWalletNumber();
        await client.query(`INSERT INTO wallets (client_id, wallet_number, balance) VALUES ($1, $2, 0)`, [clientId, walletNumber]);
        if (data.child) {
            await client.query(`INSERT INTO children (parent_id, full_name, birth_date, sport_type, skill_level) VALUES ($1, $2, $3, NULL, NULL)`, [clientId, data.child.full_name, data.child.birth_date]);
        }
        await client.query('COMMIT');
        return { walletNumber: formatWalletNumber(walletNumber) };
    } catch (e) {
        await client.query('ROLLBACK');
        throw e;
    } finally {
        client.release();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function finishRegistration(chatId, data) {
    try {
        const result = await registerClient(data);
        await bot.sendMessage(chatId,
            '‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n' +
            'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ski-instruktor!\n\n' +
            '–í–∞—à –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: `' + result.walletNumber + '`\n\n' +
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
            '‚Ä¢ üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n' +
            '‚Ä¢ üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n' +
            '‚Ä¢ üéÅ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                        ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'],
                        ['üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', 'üí∞ –ö–æ—à–µ–ª–µ–∫']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false,
                    persistent: true
                }
            }
        );
        userStates.delete(chatId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        await bot.sendMessage(chatId,
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            {
                reply_markup: {
                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                    resize_keyboard: true
                }
            }
        );
    }
}

// /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id.toString();
    const username = msg.from.username || '';
    const nickname = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
    const client = await getClientByTelegramId(telegramId);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(chatId);
    
    if (!client) {
        await bot.sendMessage(chatId,
            'üéø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ski-instruktor! üèî\n\n' +
            'üåü –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞!\n\n' +
            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n' +
            '‚Ä¢ üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–º —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ\n' +
            '‚Ä¢ ‚õ∑ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –ö—É–ª–∏–≥–µ –∑–∏–º–æ–π\n' +
            '‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º\n' +
            '‚Ä¢ üéÅ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n\n' +
            'üöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ! üéØ',
            {
                reply_markup: {
                    keyboard: [[{ text: 'üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor' }]],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            }
        );
        userStates.set(chatId, {
            step: 'wait_start',
            data: { telegram_id: telegramId, username, nickname }
        });
    } else {
        await bot.sendMessage(chatId, 'üéø *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!* –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', { parse_mode: 'Markdown' });
        showMainMenu(chatId);
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –º–µ–Ω—é
bot.on('message', async (msg) => {
    if (msg.text.startsWith('/')) return;
    const chatId = msg.chat.id;
    const state = userStates.get(chatId);

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    if (msg.text === 'üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã') {
        return bot.sendMessage(chatId,
            '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –∏ –¥–∞—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã.',
            {
                reply_markup: {
                    keyboard: [
                        ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    if (msg.text === 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç') {
        await showPersonalCabinet(chatId);
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if (msg.text === 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' || msg.text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
        const client = state && state.data && state.data.client_id ? { id: state.data.client_id } : await getClientByTelegramId(msg.from.id.toString());
        userStates.set(chatId, { step: 'main_menu', data: { client_id: client ? client.id : undefined } });
        return showMainMenu(chatId);
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞"
    if (msg.text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞') {
        let clientId;
        if (state && state.data && state.data.client_id) {
            clientId = state.data.client_id;
        } else {
            const client = await getClientByTelegramId(msg.from.id.toString());
            if (!client) {
                return bot.sendMessage(chatId, '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
            }
            clientId = client.id;
        }
        userStates.set(chatId, { step: 'add_child_name', data: { client_id: clientId } });
        return bot.sendMessage(chatId, 'üë∂ –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞:', {
            reply_markup: {
                keyboard: [['üîô –û—Ç–º–µ–Ω–∞']],
                resize_keyboard: true
            }
        });
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
    if (msg.text === 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏') {
        let clientId = state && state.data && state.data.client_id;
        if (!clientId) {
            const client = await getClientByTelegramId(msg.from.id.toString());
            if (!client) {
                return bot.sendMessage(chatId,
                    '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start',
                    {
                        reply_markup: {
                            keyboard: [['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            clientId = client.id;
        }
        userStates.set(chatId, { step: 'main_menu', data: { client_id: clientId } });
        try {
            const result = await pool.query(
                `WITH client_sessions AS (
                    SELECT 
                        sp.id,
                        sp.session_id,
                        sp.child_id,
                        COALESCE(c.full_name, cl.full_name) as participant_name,
                        ts.session_date,
                        ts.start_time,
                        ts.duration,
                        ts.equipment_type,
                        s.name as simulator_name,
                        g.name as group_name,
                        t.full_name as trainer_name,
                        ts.skill_level,
                        ts.price,
                        ts.max_participants,
                        (SELECT COUNT(*) FROM session_participants WHERE session_id = ts.id) as current_participants,
                        'group' as session_type
                    FROM session_participants sp
                    JOIN training_sessions ts ON sp.session_id = ts.id
                    JOIN simulators s ON ts.simulator_id = s.id
                    LEFT JOIN groups g ON ts.group_id = g.id
                    LEFT JOIN trainers t ON ts.trainer_id = t.id
                    LEFT JOIN children c ON sp.child_id = c.id
                    JOIN clients cl ON sp.client_id = cl.id
                    WHERE sp.client_id = $1
                    AND ts.status = 'scheduled'
                    AND (
                        ts.session_date > CURRENT_DATE AT TIME ZONE 'Asia/Yekaterinburg'
                        OR (
                            ts.session_date = CURRENT_DATE AT TIME ZONE 'Asia/Yekaterinburg'
                            AND ts.start_time > (NOW() AT TIME ZONE 'Asia/Yekaterinburg')::time
                        )
                    )
                    UNION ALL
                    -- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                    SELECT 
                        its.id,
                        its.id as session_id,
                        its.child_id,
                        COALESCE(c.full_name, cl.full_name) as participant_name,
                        its.preferred_date as session_date,
                        its.preferred_time as start_time,
                        its.duration,
                        its.equipment_type,
                        s.name as simulator_name,
                        NULL as group_name,
                        NULL as trainer_name,
                        NULL as skill_level,
                        its.price,
                        NULL as max_participants,
                        NULL as current_participants,
                        'individual' as session_type
                    FROM individual_training_sessions its
                    JOIN simulators s ON its.simulator_id = s.id
                    LEFT JOIN children c ON its.child_id = c.id
                    JOIN clients cl ON its.client_id = cl.id
                    WHERE its.client_id = $1
                    AND (
                        its.preferred_date > CURRENT_DATE AT TIME ZONE 'Asia/Yekaterinburg'
                        OR (
                            its.preferred_date = CURRENT_DATE AT TIME ZONE 'Asia/Yekaterinburg'
                            AND its.preferred_time > (NOW() AT TIME ZONE 'Asia/Yekaterinburg')::time
                        )
                    )
                )
                SELECT * FROM client_sessions
                ORDER BY session_date, start_time`,
                [clientId]
            );
            if (result.rows.length === 0) {
                return bot.sendMessage(chatId,
                    '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            let message = 'üìã *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n';
            result.rows.forEach((session, index) => {
                const date = new Date(session.session_date);
                const dayOfWeek = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'][date.getDay()];
                const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
                const [hours, minutes] = session.start_time.split(':');
                const formattedTime = `${hours}:${minutes}`;
                message += `*–ó–∞–ø–∏—Å—å ${index + 1}:*\n`;
                message += `üë§ *–£—á–∞—Å—Ç–Ω–∏–∫:* ${session.participant_name}\n`;
                message += `üìÖ *–î–∞—Ç–∞:* ${formattedDate} (${dayOfWeek})\n`;
                message += `‚è∞ *–í—Ä–µ–º—è:* ${formattedTime}\n`;
                message += `‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${session.duration} –º–∏–Ω—É—Ç\n`;
                if (session.session_type === 'individual') {
                    message += `üèÇ *–¢–∏–ø:* ${session.equipment_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏' : '–°–Ω–æ—É–±–æ—Ä–¥'}\n`;
                } else {
                    message += `üë• *–ì—Ä—É–ø–ø–∞:* ${session.group_name}\n`;
                    message += `üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${session.trainer_name}\n`;
                    message += `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${session.skill_level}/10\n`;
                    message += `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${session.current_participants}/${session.max_participants}\n`;
                }
                message += `üéø *–¢—Ä–µ–Ω–∞–∂–µ—Ä:* ${session.simulator_name}\n`;
                message += `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${Number(session.price).toFixed(2)} —Ä—É–±.\n\n`;
            });
            message += '–î–ª—è –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"';
            userStates.set(chatId, { step: 'view_sessions', data: { client_id: clientId, sessions: result.rows } });
            return bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                        ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error);
            return bot.sendMessage(chatId,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                {
                    reply_markup: {
                        keyboard: [['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }
    }

    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
        text: msg.text,
        chatId: chatId,
        currentState: state ? state.step : 'no state',
        stateData: state ? state.data : null
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
    if (msg.text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
        userStates.delete(chatId);
        return showMainMenu(chatId);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
    if (msg.text === 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É') {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        const client = await getClientByTelegramId(msg.from.id.toString());
        if (!client) {
            return bot.sendMessage(chatId,
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start',
                {
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userStates.set(chatId, {
            step: 'select_location',
            data: {
                client_id: client.id
            }
        });

        return bot.sendMessage(chatId,
            'üèî *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n' +
            '‚Ä¢ üéø –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä\n' +
            '‚Ä¢ ‚õ∑ –ö—É–ª–∏–≥–∞. –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–ª–æ–Ω',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üéø –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä'],
                        ['‚õ∑ –ö—É–ª–∏–≥–∞. –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–ª–æ–Ω'],
                        ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if (!state) return;

    switch (state.step) {
        case 'select_location': {
            if (msg.text === 'üéø –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä') {
                state.step = 'select_action';
                userStates.set(chatId, state);
                return bot.sendMessage(chatId,
                    'üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*\n\n' +
                    '‚Ä¢ üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è\n' +
                    '‚Ä¢ üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è'],
                                ['üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            } else if (msg.text === '‚õ∑ –ö—É–ª–∏–≥–∞. –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–ª–æ–Ω') {
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –ö—É–ª–∏–≥–∏
                return bot.sendMessage(chatId,
                    '‚õ∑ *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ö—É–ª–∏–≥–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n\n' +
                    '–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–∫–ª–æ–Ω–µ.',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            break;
        }

        case 'select_action': {
            if (msg.text === 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è') {
                state.step = 'training_type';
                userStates.set(chatId, state);
                return bot.sendMessage(chatId,
                    'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n' +
                    '‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–∞—è - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n' +
                    '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['üë• –ì—Ä—É–ø–ø–æ–≤–∞—è'],
                                ['üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            } else if (msg.text === 'üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É') {
                console.log('–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
                userStates.set(chatId, {
                    step: 'suggest_has_group',
                    data: { 
                        telegram_id: msg.from.id.toString(),
                        is_suggestion: true // –§–ª–∞–≥ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
                    }
                });
                return bot.sendMessage(chatId,
                    'üë• *–£ –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å–µ –≤–º–µ—Å—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å?*',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [['–î–∞', '–ù–µ—Ç']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            break;
        }

        case 'üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É': {
            console.log('–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
            userStates.set(chatId, {
                step: 'suggest_has_group',
                data: { 
                    telegram_id: msg.from.id.toString(),
                    is_suggestion: true // –§–ª–∞–≥ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
                }
            });
            return bot.sendMessage(chatId,
                'üë• *–£ –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å–µ –≤–º–µ—Å—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å?*',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['–î–∞', '–ù–µ—Ç']],
                        resize_keyboard: true
                    }
                }
            );
        }

        case 'suggest_has_group': {
            if (msg.text === '–î–∞' || msg.text === '–ù–µ—Ç') {
                const state = userStates.get(chatId);
                state.data.has_group = msg.text === '–î–∞';
                
                if (msg.text === '–î–∞') {
                    state.step = 'suggest_group_size';
                    userStates.set(chatId, state);
                    return bot.sendMessage(chatId,
                        'üë• *–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ?*\n\n' +
                        '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 12:',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                } else {
                    state.step = 'suggest_training_for';
                    userStates.set(chatId, state);
                    return bot.sendMessage(chatId,
                        'üë§ *–î–ª—è –∫–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?*\n\n' +
                        '1. –î–ª—è —Å–µ–±—è\n' +
                        '2. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞\n' +
                        '3. –î–ª—è —Å–µ–±—è –∏ —Ä–µ–±–µ–Ω–∫–∞',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ['1. –î–ª—è —Å–µ–±—è'],
                                    ['2. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞'],
                                    ['3. –î–ª—è —Å–µ–±—è –∏ —Ä–µ–±–µ–Ω–∫–∞'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            }
            break;
        }

        case 'suggest_group_size': {
            const groupSize = parseInt(msg.text);
            if (isNaN(groupSize) || groupSize < 2 || groupSize > 12) {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 12.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            
            const state = userStates.get(chatId);
            state.data.group_size = groupSize;
            state.step = 'suggest_training_for';
            userStates.set(chatId, state);
            
            return bot.sendMessage(chatId,
                'üë§ *–î–ª—è –∫–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?*\n\n' +
                '1. –î–ª—è —Å–µ–±—è\n' +
                '2. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞\n' +
                '3. –î–ª—è —Å–µ–±—è –∏ —Ä–µ–±–µ–Ω–∫–∞',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['1. –î–ª—è —Å–µ–±—è'],
                            ['2. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞'],
                            ['3. –î–ª—è —Å–µ–±—è –∏ —Ä–µ–±–µ–Ω–∫–∞'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                }
            );
        }

        case 'suggest_training_for': {
            let trainingFor;
            if (msg.text === '1. –î–ª—è —Å–µ–±—è') {
                trainingFor = 'self';
                userStates.set(chatId, {
                    step: 'suggest_training_frequency',
                    data: { ...state.data, training_for: trainingFor }
                });
                return bot.sendMessage(chatId,
                    'üîÑ *–ö–∞–∫ —á–∞—Å—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?*\n\n' +
                    '1. –†–∞–∑–æ–≤–æ\n' +
                    '2. –†–µ–≥—É–ª—è—Ä–Ω–æ',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['1. –†–∞–∑–æ–≤–æ'],
                                ['2. –†–µ–≥—É–ª—è—Ä–Ω–æ'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            } else if (msg.text.startsWith('–î–ª—è —Ä–µ–±–µ–Ω–∫–∞:')) {
                // –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram_id
                const clientResult = await pool.query(
                    'SELECT id FROM clients WHERE telegram_id = $1',
                    [state.data.telegram_id]
                );
                
                if (!clientResult.rows[0]) {
                    return bot.sendMessage(chatId,
                        '‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                const clientId = clientResult.rows[0].id;

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö –∫–ª–∏–µ–Ω—Ç–∞
                const childrenResult = await pool.query(
                    'SELECT id, full_name FROM children WHERE parent_id = $1',
                    [clientId]
                );
                
                if (childrenResult.rows.length === 0) {
                    return bot.sendMessage(chatId,
                        '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.',
                        {
                            reply_markup: {
                                keyboard: [
                                    ['1. –î–ª—è —Å–µ–±—è'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                const childName = msg.text.split(': ')[1];
                const selectedChild = childrenResult.rows.find(child => child.full_name === childName);
                
                if (!selectedChild) {
                    return bot.sendMessage(chatId,
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–±–µ–Ω–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                        {
                            reply_markup: {
                                keyboard: [
                                    ['1. –î–ª—è —Å–µ–±—è'],
                                    ...childrenResult.rows.map(child => [`–î–ª—è —Ä–µ–±–µ–Ω–∫–∞: ${child.full_name}`]),
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                trainingFor = 'child';
                userStates.set(chatId, {
                    step: 'suggest_training_frequency',
                    data: { 
                        ...state.data, 
                        training_for: trainingFor,
                        child_id: selectedChild.id,
                        child_name: selectedChild.full_name
                    }
                });
                return bot.sendMessage(chatId,
                    'üîÑ *–ö–∞–∫ —á–∞—Å—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?*\n\n' +
                    '1. –†–∞–∑–æ–≤–æ\n' +
                    '2. –†–µ–≥—É–ª—è—Ä–Ω–æ',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['1. –†–∞–∑–æ–≤–æ'],
                                ['2. –†–µ–≥—É–ª—è—Ä–Ω–æ'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            } else if (msg.text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
                userStates.delete(chatId);
                return showMainMenu(chatId);
            } else {
                // –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram_id
                const clientResult = await pool.query(
                    'SELECT id FROM clients WHERE telegram_id = $1',
                    [state.data.telegram_id]
                );
                
                if (!clientResult.rows[0]) {
                    return bot.sendMessage(chatId,
                        '‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                const clientId = clientResult.rows[0].id;

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö –∫–ª–∏–µ–Ω—Ç–∞
                const childrenResult = await pool.query(
                    'SELECT id, full_name FROM children WHERE parent_id = $1',
                    [clientId]
                );
                
                if (childrenResult.rows.length === 0) {
                    return bot.sendMessage(chatId,
                        '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.',
                        {
                            reply_markup: {
                                keyboard: [
                                    ['1. –î–ª—è —Å–µ–±—è'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ø–∏—Å–∫–æ–º –¥–µ—Ç–µ–π
                let message = 'üë§ *–î–ª—è –∫–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?*\n\n';
                message += '1. –î–ª—è —Å–µ–±—è\n';
                childrenResult.rows.forEach((child, index) => {
                    message += `${index + 2}. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞: ${child.full_name}\n`;
                });

                return bot.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['1. –î–ª—è —Å–µ–±—è'],
                            ...childrenResult.rows.map(child => [`–î–ª—è —Ä–µ–±–µ–Ω–∫–∞: ${child.full_name}`]),
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                });
            }
            break;
        }

        case 'suggest_training_frequency': {
            let frequency;
            if (msg.text === '1. –†–∞–∑–æ–≤–æ') frequency = 'once';
            else if (msg.text === '2. –†–µ–≥—É–ª—è—Ä–Ω–æ') frequency = 'regular';
            else {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
                    {
                        reply_markup: {
                            keyboard: [
                                ['1. –†–∞–∑–æ–≤–æ'],
                                ['2. –†–µ–≥—É–ª—è—Ä–Ω–æ'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }
            userStates.set(chatId, {
                step: 'sport_type',
                data: { ...state.data, training_frequency: frequency }
            });
            return bot.sendMessage(chatId,
                'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞:*\n\n' +
                '1. –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏\n' +
                '2. –°–Ω–æ—É–±–æ—Ä–¥',
                { 
                    parse_mode: 'Markdown', 
                    reply_markup: { 
                        keyboard: [
                            ['1. –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏'],
                            ['2. –°–Ω–æ—É–±–æ—Ä–¥'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ], 
                        resize_keyboard: true 
                    } 
                }
            );
        }

        case 'sport_type': {
            let sportType;
            if (msg.text === '1. –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏') sportType = 'ski';
            else if (msg.text === '2. –°–Ω–æ—É–±–æ—Ä–¥') sportType = 'snowboard';
            else {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
                    {
                        reply_markup: {
                            keyboard: [
                                ['1. –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏'],
                                ['2. –°–Ω–æ—É–±–æ—Ä–¥'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }
            userStates.set(chatId, {
                step: 'skill_level',
                data: { ...state.data, sport_type: sportType }
            });
            return bot.sendMessage(chatId,
                'üìä *–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç 0 –¥–æ 10:*\n\n' +
                '0 - –ù–∞—á–∏–Ω–∞—é—â–∏–π\n' +
                '10 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }

        case 'skill_level': {
            const level = parseInt(msg.text);
            if (isNaN(level) || level < 0 || level > 10) {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            userStates.set(chatId, {
                step: 'suggest_preferred_date',
                data: { ...state.data, skill_level: level }
            });
            return bot.sendMessage(chatId,
                'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:*\n\n' +
                '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }

        case 'suggest_preferred_date': {
            const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})$/;
            const match = msg.text.match(dateRegex);
            
            if (!match) {
                return bot.sendMessage(chatId,
                    '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.2024',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            
            const [, day, month, year] = match;
            const date = new Date(year, month - 1, day);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            if (date < today) {
                return bot.sendMessage(chatId,
                    '‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            
            const state = userStates.get(chatId);
            state.data.preferred_date = `${year}-${month}-${day}`;
            state.step = 'suggest_preferred_time';
            userStates.set(chatId, state);
            
            return bot.sendMessage(chatId,
                '‚è∞ *–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:*\n\n' +
                '–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }

        case 'suggest_preferred_time': {
            const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
            if (!timeRegex.test(msg.text)) {
                return bot.sendMessage(chatId,
                    '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            
            const state = userStates.get(chatId);
            state.data.preferred_time = msg.text;
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                const clientResult = await pool.query(
                    'SELECT id, full_name, phone FROM clients WHERE telegram_id = $1',
                    [state.data.telegram_id]
                );
                const clientInfo = clientResult.rows[0];

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                const [year, month, day] = state.data.preferred_date.split('-');
                const formattedDate = `${day}.${month}.${year}`;

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                let summaryMessage = 'üìù *–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–µ
                summaryMessage += `üë§ *–§–ò–û:* ${clientInfo.full_name}\n`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
                if (state.data.training_for === 'child') {
                    summaryMessage += `üë∂ *–£—á–∞—Å—Ç–Ω–∏–∫:* ${state.data.child_name}\n`;
                } else if (state.data.training_for === 'both') {
                    summaryMessage += `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:* ${clientInfo.full_name} –∏ ${state.data.child_name}\n`;
                }
                
                summaryMessage += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${clientInfo.phone}\n`;
                summaryMessage += state.data.has_group ? 
                    `üë• *–ì–æ—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞:* ${state.data.group_size} —á–µ–ª–æ–≤–µ–∫\n` :
                    `üë• *–ò—â–µ—Ç –≥—Ä—É–ø–ø—É:* ${state.data.training_for === 'self' ? '–î–ª—è —Å–µ–±—è' : 
                          state.data.training_for === 'child' ? '–î–ª—è —Ä–µ–±–µ–Ω–∫–∞' : '–î–ª—è —Å–µ–±—è –∏ —Ä–µ–±–µ–Ω–∫–∞'}\n`;
                summaryMessage += `üîÑ *–ß–∞—Å—Ç–æ—Ç–∞:* ${state.data.training_frequency === 'regular' ? '–†–µ–≥—É–ª—è—Ä–Ω–æ' : '–†–∞–∑–æ–≤–æ'}\n`;
                summaryMessage += `üèÇ *–¢–∏–ø:* ${state.data.sport_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏' : '–°–Ω–æ—É–±–æ—Ä–¥'}\n`;
                summaryMessage += `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${state.data.skill_level}/10\n`;
                summaryMessage += `üìÖ *–î–∞—Ç–∞:* ${formattedDate}\n`;
                summaryMessage += `‚è∞ *–í—Ä–µ–º—è:* ${state.data.preferred_time}\n\n`;
                summaryMessage += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

                state.step = 'confirm_suggestion';
                userStates.set(chatId, state);

                return bot.sendMessage(chatId, summaryMessage, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'],
                            ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
                return bot.sendMessage(chatId,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
        }

        case 'confirm_suggestion': {
            if (msg.text === '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É') {
                try {
                    const state = userStates.get(chatId);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                    const clientResult = await pool.query(
                        'SELECT id, full_name, phone FROM clients WHERE telegram_id = $1',
                        [state.data.telegram_id]
                    );
                    const clientInfo = clientResult.rows[0];

                    // –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–±–µ–Ω–∫–∞, –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
                    let childId = null;
                    if (state.data.training_for === 'child' || state.data.training_for === 'both') {
                        childId = state.data.child_id;
                    }

                    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    const result = await pool.query(
                        `INSERT INTO training_requests (
                            client_id,
                            child_id,
                            equipment_type,
                            duration,
                            preferred_date,
                            preferred_time,
                            has_group,
                            group_size,
                            training_frequency,
                            skill_level
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                        RETURNING id`,
                        [
                            clientInfo.id,
                            childId,
                            state.data.sport_type,
                            60,
                            state.data.preferred_date,
                            state.data.preferred_time,
                            state.data.has_group,
                            state.data.group_size || null,
                            state.data.training_frequency,
                            state.data.skill_level
                        ]
                    );

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    await notifyNewTrainingRequest({
                        id: result.rows[0].id,
                        client_name: clientInfo.full_name,
                        client_phone: clientInfo.phone,
                        has_group: state.data.has_group,
                        group_size: state.data.group_size,
                        training_for: state.data.training_for,
                        training_frequency: state.data.training_frequency,
                        sport_type: state.data.sport_type,
                        skill_level: state.data.skill_level,
                        preferred_date: state.data.preferred_date,
                        preferred_time: state.data.preferred_time
                    });

                    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    userStates.delete(chatId);

                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    const adminPhone = process.env.ADMIN_PHONE;
                    let successMessage = '‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n';
                    if (state.data.has_group) {
                        successMessage += '–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n';
                        successMessage += '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π:\n';
                        successMessage += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${adminPhone}`;
                    } else {
                        successMessage += '–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –≥—Ä—É–ø–ø—É, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.';
                    }

                    return bot.sendMessage(chatId, successMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
                    return bot.sendMessage(chatId,
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            } else if (msg.text === 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
                userStates.delete(chatId);
                return showMainMenu(chatId);
            }
            break;
        }

        case 'wait_start': {
            if (msg.text === 'üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor') {
                state.step = 'full_name';
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):');
            }
            break;
        }
        case 'full_name': {
            if (msg.text.length < 5) return bot.sendMessage(chatId, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            state.data.full_name = msg.text;
            state.step = 'birth_date';
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
        }
        case 'birth_date': {
            const birthDate = validateDate(msg.text);
            if (!birthDate) return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:');
            state.data.birth_date = birthDate;
            state.step = 'phone';
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79999999999:');
        }
        case 'phone': {
            const phone = validatePhone(msg.text);
            if (!phone) return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +79999999999:');
            state.data.phone = phone;
            state.step = 'has_child';
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?', {
                reply_markup: {
                    keyboard: [['–î–∞', '–ù–µ—Ç']],
                    resize_keyboard: true,
                    one_time_keyboard: false,
                    persistent: true
                }
            });
        }
        case 'has_child': {
            if (msg.text === '–î–∞') {
                const state = userStates.get(chatId);
                if (state.data.children.length > 1) {
                    // –ï—Å–ª–∏ –¥–µ—Ç–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                    const childrenList = state.data.children.map((child, index) => 
                        `${index + 1}. ${child.full_name} (${new Date(child.birth_date).toLocaleDateString()})`
                    ).join('\n');

                    state.step = 'select_child';
                    userStates.set(chatId, state);
                    
                    return bot.sendMessage(chatId,
                        'üë∂ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:*\n\n' +
                        childrenList,
                        { 
                            parse_mode: 'Markdown', 
                            reply_markup: { 
                                keyboard: [
                                    ...state.data.children.map((_, i) => [`${i + 1}`]),
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ], 
                                resize_keyboard: true 
                            } 
                        }
                    );
                } else {
                    // –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –æ–¥–∏–Ω, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                    const selectedChild = state.data.children[0];
                    userStates.set(chatId, {
                        step: 'training_type',
                        data: {
                            client_id: state.data.client_id,
                            is_child: true,
                            child_id: selectedChild.id,
                            child_name: selectedChild.full_name
                        }
                    });

                    return bot.sendMessage(chatId,
                        'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n' +
                        '‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–∞—è - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n' +
                        '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ['üë• –ì—Ä—É–ø–ø–æ–≤–∞—è'],
                                    ['üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            } else if (msg.text === '–ù–µ—Ç') {
                // –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç—è—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–µ–±—è
                const state = userStates.get(chatId);
                userStates.set(chatId, {
                    step: 'training_type',
                    data: {
                        client_id: state.data.client_id,
                        is_child: false
                    }
                });

                return bot.sendMessage(chatId,
                    'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n' +
                    '‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–∞—è - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n' +
                    '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['üë• –ì—Ä—É–ø–ø–æ–≤–∞—è'],
                                ['üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }
            break;
        }
        case 'select_child': {
            const state = userStates.get(chatId);
            const childIndex = parseInt(msg.text) - 1;
            
            if (isNaN(childIndex) || childIndex < 0 || childIndex >= state.data.children.length) {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.',
                    {
                        reply_markup: {
                            keyboard: [
                                ...state.data.children.map((_, i) => [`${i + 1}`]),
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }

            const selectedChild = state.data.children[childIndex];
            userStates.set(chatId, {
                step: 'training_type',
                data: {
                    client_id: state.data.client_id,
                    is_child: true,
                    child_id: selectedChild.id,
                    child_name: selectedChild.full_name
                }
            });

            return bot.sendMessage(chatId,
                'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n' +
                '‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–∞—è - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n' +
                '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['üë• –ì—Ä—É–ø–ø–æ–≤–∞—è'],
                            ['üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                }
            );
        }
        case 'training_type': {
            if (msg.text === 'üë• –ì—Ä—É–ø–ø–æ–≤–∞—è' || msg.text === 'üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è') {
                const state = userStates.get(chatId);
                state.data.training_type = msg.text === 'üë• –ì—Ä—É–ø–ø–æ–≤–∞—è' ? 'group' : 'individual';
                if (msg.text === 'üë• –ì—Ä—É–ø–ø–æ–≤–∞—è') {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏
                        const result = await pool.query(
                            `SELECT 
                                ts.id,
                                ts.session_date,
                                ts.start_time,
                                ts.end_time,
                                ts.duration,
                                g.name as group_name,
                                s.name as simulator_name,
                                t.full_name as trainer_name,
                                ts.max_participants,
                                ts.price,
                                ts.skill_level,
                                ts.equipment_type,
                                COUNT(sp.id) as current_participants
                            FROM training_sessions ts
                            LEFT JOIN groups g ON ts.group_id = g.id
                            LEFT JOIN simulators s ON ts.simulator_id = s.id
                            LEFT JOIN trainers t ON ts.trainer_id = t.id
                            LEFT JOIN session_participants sp ON ts.id = sp.session_id
                            WHERE ts.training_type = true
                            AND ts.session_date <= ((NOW() AT TIME ZONE 'Asia/Yekaterinburg')::date + INTERVAL '14 days')
                            AND ts.status = 'scheduled'
                            AND (
                                ts.session_date > (NOW() AT TIME ZONE 'Asia/Yekaterinburg')::date
                                OR (
                                    ts.session_date = (NOW() AT TIME ZONE 'Asia/Yekaterinburg')::date
                                    AND ts.start_time > (NOW() AT TIME ZONE 'Asia/Yekaterinburg')::time
                                )
                            )
                            GROUP BY ts.id, g.name, s.name, t.full_name
                            HAVING COUNT(sp.id) < ts.max_participants
                            ORDER BY ts.session_date, ts.start_time`
                        );

                        if (result.rows.length === 0) {
                            return bot.sendMessage(chatId,
                                '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n' +
                                '–í—ã –º–æ–∂–µ—Ç–µ:\n' +
                                '‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n' +
                                '‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
                                {
                                    parse_mode: 'Markdown',
                                    reply_markup: {
                                        keyboard: [
                                            ['üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                                            ['üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è'],
                                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                        ],
                                        resize_keyboard: true
                                    }
                                }
                            );
                        }

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        state.data.available_sessions = result.rows;
                        state.step = 'group_training_selection';
                        userStates.set(chatId, state);

                        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                        let message = 'üéø *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n';
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
                        result.rows.forEach((session, index) => {
                            const date = new Date(session.session_date);
                            const dayOfWeek = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'][date.getDay()];
                            const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
                            const [hours, minutes] = session.start_time.split(':');
                            const formattedTime = `${hours}:${minutes}`;
                            
                            message += `${index + 1}. *${formattedDate} (${dayOfWeek}) ${formattedTime}*\n`;
                            message += `   üë• ${session.group_name} (${session.current_participants}/${session.max_participants})\n`;
                            message += `   üí∞ ${session.price} —Ä—É–±.\n\n`;
                        });

                        message += '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –Ω–æ–º–µ—Ä –≤ —á–∞—Ç.\n';
                        message += '–ù–∞–ø—Ä–∏–º–µ—Ä: 1 - –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏';

                        return bot.sendMessage(chatId, message, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        });
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
                        return bot.sendMessage(chatId,
                            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                            {
                                reply_markup: {
                                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }
                } else if (msg.text === 'üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è') {
                    // –ù–æ–≤—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    await askIndividualForWhom(chatId, state.data.client_id);
                    return;
                }
            }
            break;
        }

        case 'individual_for_whom': {
            const state = userStates.get(chatId);
            const choice = parseInt(msg.text);
            if (isNaN(choice) || choice < 1 || choice > (state.data.children.length + 1)) {
                return bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.', {
                    reply_markup: {
                        keyboard: [
                            ['1. –î–ª—è —Å–µ–±—è'],
                            ...state.data.children.map((child, idx) => [`${idx + 2}. ${child.full_name}`])
                        ],
                        resize_keyboard: true
                    }
                });
            }
            if (choice === 1) {
                // –î–ª—è —Å–µ–±—è
                state.data.is_child = false;
            } else {
                // –î–ª—è —Ä–µ–±–µ–Ω–∫–∞
                const selectedChild = state.data.children[choice - 2];
                state.data.is_child = true;
                state.data.child_id = selectedChild.id;
                state.data.child_name = selectedChild.full_name;
            }
            state.step = 'equipment_type';
            userStates.set(chatId, state);
            return bot.sendMessage(chatId,
                'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è:*\n\n‚Ä¢ üéø –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏\n‚Ä¢ üèÇ –°–Ω–æ—É–±–æ—Ä–¥',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['üéø –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏'],
                            ['üèÇ –°–Ω–æ—É–±–æ—Ä–¥'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                }
            );
        }

        case 'select_participant': {
            const state = userStates.get(chatId);
            const choice = parseInt(msg.text);
            
            if (isNaN(choice) || choice < 1 || choice > state.data.children.length + 1) {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
                    {
                        reply_markup: {
                            keyboard: [
                                ['1. –î–ª—è —Å–µ–±—è'],
                                ...state.data.children.map(child => [`2. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞: ${child.full_name}`]),
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }
            
            if (choice === 1) {
                state.data.is_child = false;
            } else {
                const selectedChild = state.data.children[choice - 2];
                state.data.is_child = true;
                state.data.child_id = selectedChild.id;
                state.data.child_name = selectedChild.full_name;
            }
            
            state.step = 'equipment_type';
            userStates.set(chatId, state);
            
            return bot.sendMessage(chatId,
                'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è:*\n\n' +
                '‚Ä¢ üéø –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏\n' +
                '‚Ä¢ üèÇ –°–Ω–æ—É–±–æ—Ä–¥',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['üéø –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏'],
                            ['üèÇ –°–Ω–æ—É–±–æ—Ä–¥'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                }
            );
        }
        case 'equipment_type': {
            if (msg.text === 'üéø –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏' || msg.text === 'üèÇ –°–Ω–æ—É–±–æ—Ä–¥') {
                const state = userStates.get(chatId);
                state.data.equipment_type = msg.text === 'üéø –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏' ? 'ski' : 'snowboard';
                state.step = 'with_trainer';
                userStates.set(chatId, state);
                return bot.sendMessage(chatId,
                    'üë®‚Äçüè´ *–í—ã –±—É–¥–µ—Ç–µ –∫–∞—Ç–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –∏–ª–∏ –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞?*\n\n' +
                    '‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n' +
                    '‚Ä¢ –ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö\n' +
                    '‚Ä¢ –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å —Å 30 –º–∏–Ω—É—Ç\n' +
                    '‚Ä¢ –ï—Å–ª–∏ –≤—ã –Ω–æ–≤–∏—á–æ–∫ –∏ –Ω–µ –∏–º–µ–µ—Ç–µ –æ–ø—ã—Ç–∞ –∫–∞—Ç–∞–Ω–∏—è, –∫–∞—Ç–∞—Ç—å—Å—è –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['üë®‚Äçüè´ –° —Ç—Ä–µ–Ω–µ—Ä–æ–º'],
                                ['üë§ –ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }
            break;
        }
        case 'with_trainer': {
            if (msg.text === 'üë®‚Äçüè´ –° —Ç—Ä–µ–Ω–µ—Ä–æ–º' || msg.text === 'üë§ –ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞') {
                const state = userStates.get(chatId);
                state.data.with_trainer = msg.text === 'üë®‚Äçüè´ –° —Ç—Ä–µ–Ω–µ—Ä–æ–º';
                state.step = 'duration';
                userStates.set(chatId, state);

                try {
                    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    const pricesResult = await pool.query(
                        `SELECT * FROM prices 
                        WHERE type = 'individual' 
                        AND with_trainer = $1 
                        ORDER BY duration`,
                        [state.data.with_trainer]
                    );

                    let message = '‚è± *–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n';
                    message += state.data.with_trainer ? 'üë®‚Äçüè´ *–° —Ç—Ä–µ–Ω–µ—Ä–æ–º:*\n' : 'üë§ *–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞:*\n';
                    
                    pricesResult.rows.forEach(price => {
                        message += `‚Ä¢ ${price.duration} –º–∏–Ω—É—Ç - ${price.price} —Ä—É–±.\n`;
                    });

                    message += '\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:';

                    return bot.sendMessage(chatId, message, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['‚è± 30 –º–∏–Ω—É—Ç'],
                                ['‚è± 60 –º–∏–Ω—É—Ç'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω:', error);
                    return bot.sendMessage(chatId,
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            }
            break;
        }
        case 'duration': {
            if (msg.text === '‚è± 30 –º–∏–Ω—É—Ç' || msg.text === '‚è± 60 –º–∏–Ω—É—Ç') {
                const state = userStates.get(chatId);
                state.data.duration = msg.text === '‚è± 30 –º–∏–Ω—É—Ç' ? 30 : 60;
                state.step = 'preferred_date';
                userStates.set(chatId, state);

                // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                try {
                    const priceResult = await pool.query(
                        `SELECT price FROM prices 
                        WHERE type = 'individual' 
                        AND with_trainer = $1 
                        AND duration = $2`,
                        [state.data.with_trainer, state.data.duration]
                    );
                    
                    state.data.price = priceResult.rows[0].price;
                    userStates.set(chatId, state);

                    return bot.sendMessage(chatId,
                        'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:*\n\n' +
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã:', error);
                    return bot.sendMessage(chatId,
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            }
            break;
        }
        case 'preferred_date': {
            const date = validateDate(msg.text);
            if (!date) {
                return bot.sendMessage(chatId,
                    '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }

            const state = userStates.get(chatId);
            state.data.preferred_date = date;

            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞—Ö
                const simulatorsResult = await pool.query(
                    'SELECT id, name FROM simulators WHERE is_working = true'
                );
                const simulators = simulatorsResult.rows;

                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                const scheduleResult = await pool.query(
                    `SELECT s.*, ts.id as training_id
                    FROM schedule s 
                    LEFT JOIN training_sessions ts ON s.simulator_id = ts.simulator_id 
                    AND s.date = ts.session_date 
                    AND s.start_time >= ts.start_time 
                    AND s.start_time < (ts.start_time + COALESCE(ts.duration, 30) * interval '1 minute')
                    WHERE s.date = $1 AND s.is_holiday = false
                    ORDER BY s.start_time`,
                    [date]
                );

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞–º
                const scheduleBySimulator = {};
                simulators.forEach(sim => {
                    scheduleBySimulator[sim.id] = scheduleResult.rows.filter(
                        s => s.simulator_id === sim.id
                    );
                });

                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                const keyboard = [];
                const timeSlots = new Set();

                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                scheduleResult.rows.forEach(slot => {
                    timeSlots.add(slot.start_time);
                });

                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                const sortedTimeSlots = Array.from(timeSlots).sort();

                // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                sortedTimeSlots.forEach(time => {
                    const row = [];
                    simulators.forEach(sim => {
                        const slot = scheduleBySimulator[sim.id].find(s => s.start_time === time);
                        const isBooked = slot && (slot.is_booked || slot.training_id);
                        
                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ HH:MM
                        const [hours, minutes] = time.split(':');
                        const formattedTime = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
                        
                        row.push({
                            text: `${isBooked ? '‚è∞' : '‚úÖ'} ${formattedTime}`,
                            callback_data: isBooked ? 
                                'booked' : 
                                `time_${sim.id}_${time}`
                        });
                    });
                    keyboard.push(row);
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard.push([{
                    text: 'üîô –ù–∞–∑–∞–¥',
                    callback_data: 'back_to_date'
                }]);

                state.step = 'select_time';
                userStates.set(chatId, state);

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞—Ö
                let message = '‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:*\n\n';
                simulators.forEach((sim, index) => {
                    message += `${index + 1}. ${sim.name}\n`;
                });
                message += '\n‚úÖ - –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω–æ\n‚è∞ - –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ';

                return bot.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
                return bot.sendMessage(chatId,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
        }
        case 'select_time': {
            const data = msg.text;
            console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ select_time:', {
                data,
                state: state,
                message: msg
            });

            if (data === 'back_to_date') {
                console.log('–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã');
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
                userStates.get(chatId).step = 'preferred_date';
                return bot.sendMessage(chatId,
                    'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:*\n\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }

            if (data === 'booked') {
                console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è');
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
                return bot.answerCallbackQuery(msg.id, {
                    text: '–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ',
                    show_alert: true
                });
            }

            if (data.startsWith('time_')) {
                console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏:', data);
                const [, simulatorId, time] = data.split('_');
                console.log('–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { simulatorId, time });
                
                try {
                    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞:', state.data.client_id);
                    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞
                    const balanceResult = await pool.query(
                        'SELECT balance FROM wallets WHERE client_id = $1',
                        [state.data.client_id]
                    );
                    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞:', balanceResult.rows[0]);
                    const balance = parseFloat(balanceResult.rows[0]?.balance || 0);
                    const price = parseFloat(state.data.price);
                    console.log('–ë–∞–ª–∞–Ω—Å –∏ —Ü–µ–Ω–∞:', { balance, price });

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ
                    const simulatorResult = await pool.query(
                        'SELECT name FROM simulators WHERE id = $1',
                        [simulatorId]
                    );
                    const simulatorName = simulatorResult.rows[0].name;

                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                    const [year, month, day] = state.data.preferred_date.split('-');
                    const formattedDate = `${day}.${month}.${year}`;
                    const [hours, minutes] = time.split(':');
                    const formattedTime = `${hours}:${minutes}`;
                    console.log('–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:', { formattedDate, formattedTime });

                    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    let summaryMessage = 'üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n\n';
                    summaryMessage += '*–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n';
                    if (state.data.is_child) {
                        summaryMessage += `‚Ä¢ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${state.data.child_name}\n`;
                    } else {
                        const clientResult = await pool.query(
                            'SELECT full_name FROM clients WHERE id = $1',
                            [state.data.client_id]
                        );
                        summaryMessage += `‚Ä¢ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${clientResult.rows[0].full_name}\n`;
                    }
                    summaryMessage += `‚Ä¢ –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è\n`;
                    summaryMessage += `‚Ä¢ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ: ${state.data.equipment_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏ üéø' : '–°–Ω–æ—É–±–æ—Ä–¥ üèÇ'}\n`;
                    summaryMessage += `‚Ä¢ –¢—Ä–µ–Ω–µ—Ä: ${state.data.with_trainer ? '–° —Ç—Ä–µ–Ω–µ—Ä–æ–º üë®‚Äçüè´' : '–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ üë§'}\n`;
                    summaryMessage += `‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${state.data.duration} –º–∏–Ω—É—Ç ‚è±\n`;
                    summaryMessage += `‚Ä¢ –î–∞—Ç–∞: ${formattedDate}\n`;
                    summaryMessage += `‚Ä¢ –í—Ä–µ–º—è: ${formattedTime}\n`;
                    summaryMessage += `‚Ä¢ –¢—Ä–µ–Ω–∞–∂–µ—Ä: ${simulatorName} (‚Ññ${simulatorId})\n`;
                    summaryMessage += `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${state.data.price} —Ä—É–±. üí∞\n`;
                    summaryMessage += `‚Ä¢ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} —Ä—É–±. üí≥\n\n`;

                    summaryMessage += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
                    console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', summaryMessage);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                    state.step = 'confirm_booking';
                    state.data.preferred_time = time;
                    state.data.simulator_id = simulatorId;
                    state.data.simulator_name = simulatorName;
                    userStates.set(chatId, state);
                    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);

                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏:', msg.message_id);
                    await bot.deleteMessage(chatId, msg.message_id);

                    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
                    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å');
                    await bot.answerCallbackQuery(msg.id);

                    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
                    return bot.sendMessage(chatId, summaryMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                                ['‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª'],
                                ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å']
                            ],
                            resize_keyboard: true
                        }
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏:', error);
                    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                        error: error.message,
                        stack: error.stack,
                        state: state,
                        data: msg
                    });
                    await bot.answerCallbackQuery(msg.id, {
                        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                        show_alert: true
                    });
                    return bot.sendMessage(chatId,
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            }
        }
        case 'confirm_booking': {
            const state = userStates.get(chatId);
            
            if (msg.text === '‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É') {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                    const clientResult = await pool.query(
                        'SELECT id, full_name, phone FROM clients WHERE id = $1',
                        [state.data.client_id]
                    );
                    
                    if (!clientResult.rows[0]) {
                        console.error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', { client_id: state.data.client_id });
                        return bot.sendMessage(chatId,
                            '‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                            {
                                reply_markup: {
                                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }

                    const clientInfo = clientResult.rows[0];

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
                    const balanceResult = await pool.query(
                        'SELECT balance FROM wallets WHERE client_id = $1',
                        [clientInfo.id]
                    );
                    const balance = parseFloat(balanceResult.rows[0]?.balance || 0);
                    const price = parseFloat(state.data.price);

                    if (balance < price) {
                        return bot.sendMessage(chatId,
                            '‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n' +
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                            {
                                reply_markup: {
                                    keyboard: [['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'], ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }

                    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    const result = await pool.query(
                        `INSERT INTO individual_training_sessions (
                            client_id,
                            child_id,
                            equipment_type,
                            with_trainer,
                            duration,
                            preferred_date,
                            preferred_time,
                            simulator_id,
                            price
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                        RETURNING id`,
                        [
                            clientInfo.id,
                            state.data.is_child ? state.data.child_id : null,
                            state.data.equipment_type,
                            state.data.with_trainer,
                            state.data.duration,
                            state.data.preferred_date,
                            state.data.preferred_time,
                            state.data.simulator_id,
                            state.data.price
                        ]
                    );

                    // –ë—Ä–æ–Ω–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
                    const startTime = state.data.preferred_time;
                    const duration = state.data.duration;
                    const slotsNeeded = Math.ceil(duration / 30); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö 30-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–ª–æ—Ç–æ–≤
                    const slotsToBook = await pool.query(
                        `SELECT id, start_time, is_booked FROM schedule 
                        WHERE simulator_id = $1 
                        AND date = $2 
                        AND start_time >= $3 
                        AND start_time < ($3::time + ($4 * interval '1 minute'))
                        ORDER BY start_time`,
                        [state.data.simulator_id, state.data.preferred_date, startTime, duration]
                    );

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–ª–æ—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã
                    if (slotsToBook.rows.length < slotsNeeded) {
                        console.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', {
                            needed: slotsNeeded,
                            available: slotsToBook.rows.length,
                            simulator_id: state.data.simulator_id,
                            date: state.data.preferred_date,
                            time: startTime
                        });
                        return bot.sendMessage(chatId,
                            '‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏.\n' +
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ 30 –º–∏–Ω—É—Ç.',
                            {
                                reply_markup: {
                                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ª–æ—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã
                    const hasBookedSlots = slotsToBook.rows.some(slot => slot.is_booked);
                    if (hasBookedSlots) {
                        console.error('–ù–∞–π–¥–µ–Ω—ã –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:', {
                            simulator_id: state.data.simulator_id,
                            date: state.data.preferred_date,
                            time: startTime,
                            slots: slotsToBook.rows
                        });
                        return bot.sendMessage(chatId,
                            '‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏.\n' +
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ 30 –º–∏–Ω—É—Ç.',
                            {
                                reply_markup: {
                                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }

                    // –ë—Ä–æ–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç
                    for (const slot of slotsToBook.rows) {
                        await pool.query(
                            'UPDATE schedule SET is_booked = true WHERE id = $1',
                            [slot.id]
                        );
                    }

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    const { notifyNewIndividualTraining } = require('./admin-bot');
                    await notifyNewIndividualTraining({
                        client_name: clientInfo.full_name,
                        client_phone: clientInfo.phone,
                        child_name: state.data.is_child ? state.data.child_name : null,
                        with_trainer: state.data.with_trainer,
                        equipment_type: state.data.equipment_type,
                        duration: state.data.duration,
                        simulator_id: state.data.simulator_id,
                        price: state.data.price,
                        preferred_date: state.data.preferred_date,
                        preferred_time: state.data.preferred_time
                    });

                    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                    await pool.query(
                        'UPDATE wallets SET balance = balance - $1 WHERE client_id = $2',
                        [price, clientInfo.id]
                    );

                    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    userStates.delete(chatId);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    return bot.sendMessage(chatId,
                        '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n\n' +
                        '–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n' +
                        `‚Ä¢ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${state.data.is_child ? state.data.child_name : clientInfo.full_name}\n` +
                        `‚Ä¢ –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è\n` +
                        `‚Ä¢ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ: ${state.data.equipment_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏ üéø' : '–°–Ω–æ—É–±–æ—Ä–¥ üèÇ'}\n` +
                        `‚Ä¢ –¢—Ä–µ–Ω–µ—Ä: ${state.data.with_trainer ? '–° —Ç—Ä–µ–Ω–µ—Ä–æ–º üë®‚Äçüè´' : '–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞'}\n` +
                        `‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${state.data.duration} –º–∏–Ω—É—Ç ‚è±Ô∏è\n` +
                        `‚Ä¢ –î–∞—Ç–∞: ${formatDate(state.data.preferred_date)}\n` +
                        `‚Ä¢ –í—Ä–µ–º—è: ${state.data.preferred_time}\n` +
                        `‚Ä¢ –¢—Ä–µ–Ω–∞–∂–µ—Ä: ${state.data.simulator_name} (‚Ññ${state.data.simulator_id})\n` +
                        `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${state.data.price} —Ä—É–±. üí∞\n\n` +
                        '–ñ–¥–µ–º –≤–∞—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
                    return bot.sendMessage(chatId,
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            } else if (msg.text === '‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª') {
                userStates.delete(chatId);
                return showMainMenu(chatId);
            } 
            break;
        }
        case 'has_group': {
            console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è has_group:', {
                message: msg.text,
                currentState: state
            });
            
            if (msg.text === '–î–∞') {
                const newState = {
                    step: 'group_size',
                    data: { 
                        ...state.data,
                        has_group: true
                    }
                };
                console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', newState);
                userStates.set(chatId, newState);
                return bot.sendMessage(chatId,
                    'üë• *–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ?*\n\n' +
                    '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 12 —á–µ–ª–æ–≤–µ–∫.',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            } else if (msg.text === '–ù–µ—Ç') {
                const newState = {
                    step: 'training_for',
                    data: { 
                        ...state.data,
                        has_group: false
                    }
                };
                console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', newState);
                userStates.set(chatId, newState);
                return bot.sendMessage(chatId,
                    'üë§ *–î–ª—è –∫–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?*\n\n' +
                    '1. –î–ª—è —Å–µ–±—è\n' +
                    '2. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞\n' +
                    '3. –î–ª—è —Å–µ–±—è –∏ —Ä–µ–±–µ–Ω–∫–∞',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['1. –î–ª—è —Å–µ–±—è'],
                                ['2. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞'],
                                ['3. –î–ª—è —Å–µ–±—è –∏ —Ä–µ–±–µ–Ω–∫–∞'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }
            break;
        }
        case 'group_size': {
            const size = parseInt(msg.text);
            if (isNaN(size) || size < 2 || size > 12) {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 12 —á–µ–ª–æ–≤–µ–∫.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if (!state.data.has_group) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: has_group –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                userStates.delete(chatId);
                return showMainMenu(chatId);
            }

            const newState = {
                step: 'training_for',
                data: { 
                    ...state.data,
                    group_size: size
                }
            };
            console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', newState);
            userStates.set(chatId, newState);
            return bot.sendMessage(chatId,
                'üë§ *–î–ª—è –∫–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?*\n\n' +
                '1. –î–ª—è —Å–µ–±—è\n' +
                '2. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞\n' +
                '3. –î–ª—è —Å–µ–±—è –∏ —Ä–µ–±–µ–Ω–∫–∞',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['1. –î–ª—è —Å–µ–±—è'],
                            ['2. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞'],
                            ['3. –î–ª—è —Å–µ–±—è –∏ —Ä–µ–±–µ–Ω–∫–∞'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                }
            );
        }
        case 'training_for': {
            let trainingFor;
            if (msg.text === '1. –î–ª—è —Å–µ–±—è') {
                trainingFor = 'self';
                userStates.set(chatId, {
                    step: 'suggest_training_frequency',
                    data: { ...state.data, training_for: trainingFor }
                });
                return bot.sendMessage(chatId,
                    'üîÑ *–ö–∞–∫ —á–∞—Å—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?*\n\n' +
                    '1. –†–∞–∑–æ–≤–æ\n' +
                    '2. –†–µ–≥—É–ª—è—Ä–Ω–æ',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['1. –†–∞–∑–æ–≤–æ'],
                                ['2. –†–µ–≥—É–ª—è—Ä–Ω–æ'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            } else if (msg.text.startsWith('–î–ª—è —Ä–µ–±–µ–Ω–∫–∞:')) {
                // –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram_id
                const clientResult = await pool.query(
                    'SELECT id FROM clients WHERE telegram_id = $1',
                    [state.data.telegram_id]
                );
                
                if (!clientResult.rows[0]) {
                    return bot.sendMessage(chatId,
                        '‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                const clientId = clientResult.rows[0].id;

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö –∫–ª–∏–µ–Ω—Ç–∞
                const childrenResult = await pool.query(
                    'SELECT id, full_name FROM children WHERE parent_id = $1',
                    [clientId]
                );
                
                if (childrenResult.rows.length === 0) {
                    return bot.sendMessage(chatId,
                        '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.',
                        {
                            reply_markup: {
                                keyboard: [
                                    ['1. –î–ª—è —Å–µ–±—è'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                const childName = msg.text.split(': ')[1];
                const selectedChild = childrenResult.rows.find(child => child.full_name === childName);
                
                if (!selectedChild) {
                    return bot.sendMessage(chatId,
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–±–µ–Ω–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                        {
                            reply_markup: {
                                keyboard: [
                                    ['1. –î–ª—è —Å–µ–±—è'],
                                    ...childrenResult.rows.map(child => [`–î–ª—è —Ä–µ–±–µ–Ω–∫–∞: ${child.full_name}`]),
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                trainingFor = 'child';
                userStates.set(chatId, {
                    step: 'suggest_training_frequency',
                    data: { 
                        ...state.data, 
                        training_for: trainingFor,
                        child_id: selectedChild.id,
                        child_name: selectedChild.full_name
                    }
                });
                return bot.sendMessage(chatId,
                    'üîÑ *–ö–∞–∫ —á–∞—Å—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?*\n\n' +
                    '1. –†–∞–∑–æ–≤–æ\n' +
                    '2. –†–µ–≥—É–ª—è—Ä–Ω–æ',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['1. –†–∞–∑–æ–≤–æ'],
                                ['2. –†–µ–≥—É–ª—è—Ä–Ω–æ'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            } else if (msg.text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
                userStates.delete(chatId);
                return showMainMenu(chatId);
            } else {
                // –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram_id
                const clientResult = await pool.query(
                    'SELECT id FROM clients WHERE telegram_id = $1',
                    [state.data.telegram_id]
                );
                
                if (!clientResult.rows[0]) {
                    return bot.sendMessage(chatId,
                        '‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                const clientId = clientResult.rows[0].id;

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö –∫–ª–∏–µ–Ω—Ç–∞
                const childrenResult = await pool.query(
                    'SELECT id, full_name FROM children WHERE parent_id = $1',
                    [clientId]
                );
                
                if (childrenResult.rows.length === 0) {
                    return bot.sendMessage(chatId,
                        '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.',
                        {
                            reply_markup: {
                                keyboard: [
                                    ['1. –î–ª—è —Å–µ–±—è'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ø–∏—Å–∫–æ–º –¥–µ—Ç–µ–π
                let message = 'üë§ *–î–ª—è –∫–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?*\n\n';
                message += '1. –î–ª—è —Å–µ–±—è\n';
                childrenResult.rows.forEach((child, index) => {
                    message += `${index + 2}. –î–ª—è —Ä–µ–±–µ–Ω–∫–∞: ${child.full_name}\n`;
                });

                return bot.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['1. –î–ª—è —Å–µ–±—è'],
                            ...childrenResult.rows.map(child => [`–î–ª—è —Ä–µ–±–µ–Ω–∫–∞: ${child.full_name}`]),
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                });
            }
            break;
        }
        case 'training_frequency': {
            let frequency;
            if (msg.text === '1. –†–∞–∑–æ–≤–æ') frequency = 'once';
            else if (msg.text === '2. –†–µ–≥—É–ª—è—Ä–Ω–æ') frequency = 'regular';
            else {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
                    {
                        reply_markup: {
                            keyboard: [
                                ['1. –†–∞–∑–æ–≤–æ'],
                                ['2. –†–µ–≥—É–ª—è—Ä–Ω–æ'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }
            userStates.set(chatId, {
                step: 'sport_type',
                data: { ...state.data, training_frequency: frequency }
            });
            return bot.sendMessage(chatId,
                'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞:*\n\n' +
                '1. –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏\n' +
                '2. –°–Ω–æ—É–±–æ—Ä–¥',
                { 
                    parse_mode: 'Markdown', 
                    reply_markup: { 
                        keyboard: [
                            ['1. –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏'],
                            ['2. –°–Ω–æ—É–±–æ—Ä–¥'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ], 
                        resize_keyboard: true 
                    } 
                }
            );
        }
        case 'sport_type': {
            let sportType;
            if (msg.text === '1. –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏') sportType = 'ski';
            else if (msg.text === '2. –°–Ω–æ—É–±–æ—Ä–¥') sportType = 'snowboard';
            else {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
                    {
                        reply_markup: {
                            keyboard: [
                                ['1. –ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏'],
                                ['2. –°–Ω–æ—É–±–æ—Ä–¥'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }
            userStates.set(chatId, {
                step: 'skill_level',
                data: { ...state.data, sport_type: sportType }
            });
            return bot.sendMessage(chatId,
                'üìä *–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç 0 –¥–æ 10:*\n\n' +
                '0 - –ù–∞—á–∏–Ω–∞—é—â–∏–π\n' +
                '10 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }
        case 'skill_level': {
            const level = parseInt(msg.text);
            if (isNaN(level) || level < 0 || level > 10) {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            userStates.set(chatId, {
                step: 'suggest_preferred_date',
                data: { ...state.data, skill_level: level }
            });
            return bot.sendMessage(chatId,
                'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:*\n\n' +
                '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }
        case 'suggest_skill_level': {
            const level = parseInt(msg.text);
            if (isNaN(level) || level < 0 || level > 10) {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
            userStates.set(chatId, {
                step: 'suggest_preferred_date',
                data: { ...state.data, skill_level: level }
            });
            return bot.sendMessage(chatId,
                'üìä *–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç 0 –¥–æ 10:*\n\n' +
                '0 - –ù–∞—á–∏–Ω–∞—é—â–∏–π\n' +
                '10 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }
        case 'group_training_selection': {
            const selectedIndex = parseInt(msg.text) - 1;
            const state = userStates.get(chatId);
            
            if (isNaN(selectedIndex) || selectedIndex < 0 || selectedIndex >= state.data.available_sessions.length) {
                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }

            try {
                const selectedSession = state.data.available_sessions[selectedIndex];
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                const clientResult = await pool.query(
                    `SELECT c.*, 
                        EXTRACT(YEAR FROM AGE(CURRENT_DATE, c.birth_date)) as age,
                        w.balance
                    FROM clients c
                    LEFT JOIN wallets w ON c.id = w.client_id
                    WHERE c.id = $1`,
                    [state.data.client_id]
                );
                
                const client = clientResult.rows[0];
                const clientAge = Math.floor(client.age);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã
                const isChildrenTraining = selectedSession.group_name.toLowerCase().includes('–¥–µ—Ç–∏');
                const isAdultTraining = selectedSession.group_name.toLowerCase().includes('–≤–∑—Ä–æ—Å–ª—ã–µ');
                const isGeneralTraining = !isChildrenTraining && !isAdultTraining;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                if (isChildrenTraining) {
                    if (clientAge >= 16) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ç–µ–π —É –∫–ª–∏–µ–Ω—Ç–∞
                        const childrenResult = await pool.query(
                            `SELECT id, full_name, 
                                EXTRACT(YEAR FROM AGE(CURRENT_DATE, birth_date)) as age
                            FROM children 
                            WHERE parent_id = $1 AND 
                                EXTRACT(YEAR FROM AGE(CURRENT_DATE, birth_date)) < 16`,
                            [state.data.client_id]
                        );

                        if (childrenResult.rows.length === 0) {
                            return bot.sendMessage(chatId,
                                '‚ùå –ù–∞ –¥–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –¥–æ 16 –ª–µ—Ç.\n\n' +
                                '–£ –≤–∞—Å –Ω–µ—Ç –¥–µ—Ç–µ–π –º–ª–∞–¥—à–µ 16 –ª–µ—Ç –∏–ª–∏ –≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∏—Ö –≤ –ø—Ä–æ—Ñ–∏–ª—å.\n\n' +
                                '–í—ã –º–æ–∂–µ—Ç–µ:\n' +
                                '‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n' +
                                '‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å',
                                {
                                    reply_markup: {
                                        keyboard: [
                                            ['üéø –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                                            ['üë§ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞'],
                                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                        ],
                                        resize_keyboard: true
                                    }
                                }
                            );
                        }

                        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞
                        state.data.selected_session = selectedSession;
                        state.data.available_children = childrenResult.rows;
                        state.step = 'select_child_for_training';
                        userStates.set(chatId, state);

                        let message = 'üë∂ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:*\n\n';
                        childrenResult.rows.forEach((child, index) => {
                            message += `${index + 1}. ${child.full_name} (${Math.floor(child.age)} –ª–µ—Ç)\n`;
                        });

                        return bot.sendMessage(chatId, message, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ...childrenResult.rows.map((child, i) => [`${i + 1}. ${child.full_name}`]),
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        });
                    }
                    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –º–ª–∞–¥—à–µ 16 –ª–µ—Ç, –æ–Ω –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–∞–º
                } else if (isAdultTraining) {
                    if (clientAge < 16) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –¥–µ—Ç–∏ —Å—Ç–∞—Ä—à–µ 16 –ª–µ—Ç
                        const childrenResult = await pool.query(
                            `SELECT id, full_name, 
                                EXTRACT(YEAR FROM AGE(CURRENT_DATE, birth_date)) as age
                            FROM children 
                            WHERE parent_id = $1 AND 
                                EXTRACT(YEAR FROM AGE(CURRENT_DATE, birth_date)) >= 16`,
                            [state.data.client_id]
                        );

                        if (childrenResult.rows.length === 0) {
                            return bot.sendMessage(chatId,
                                '‚ùå –ù–∞ –¥–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å 16 –ª–µ—Ç.\n\n' +
                                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç—Å–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –±–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.',
                                {
                                    reply_markup: {
                                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                        resize_keyboard: true
                                    }
                                }
                            );
                        }

                        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∏ —Å—Ç–∞—Ä—à–µ 16 –ª–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞
                        state.data.selected_session = selectedSession;
                        state.data.available_children = childrenResult.rows;
                        state.step = 'select_child_for_training';
                        userStates.set(chatId, state);

                        let message = 'üë∂ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:*\n\n';
                        childrenResult.rows.forEach((child, index) => {
                            message += `${index + 1}. ${child.full_name} (${Math.floor(child.age)} –ª–µ—Ç)\n`;
                        });

                        return bot.sendMessage(chatId, message, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ...childrenResult.rows.map((child, i) => [`${i + 1}. ${child.full_name}`]),
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        });
                    }
                    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å—Ç–∞—Ä—à–µ 16 –ª–µ—Ç, –æ–Ω –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–∞–º
                }
                // –î–ª—è –æ–±—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                const date = new Date(selectedSession.session_date);
                const dayOfWeek = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'][date.getDay()];
                const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
                const [hours, minutes] = selectedSession.start_time.split(':');
                const formattedTime = `${hours}:${minutes}`;

                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
                let formattedPrice = '‚Äî';
                try {
                    const price = parseFloat(selectedSession.price);
                    if (!isNaN(price)) {
                        formattedPrice = price.toFixed(2);
                    }
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ü–µ–Ω—ã:', e);
                }

                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                let formattedBalance = '‚Äî';
                try {
                    const balance = parseFloat(client.balance);
                    if (!isNaN(balance)) {
                        formattedBalance = balance.toFixed(2);
                    }
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', e);
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                let message = 'üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:*\n\n';
                message += `üë§ *–§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞:* ${client.full_name}\n`;
                message += `üìÖ *–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:* ${formattedDate} (${dayOfWeek})\n`;
                message += `‚è∞ *–í—Ä–µ–º—è:* ${formattedTime}\n`;
                message += `üë• *–ì—Ä—É–ø–ø–∞:* ${selectedSession.group_name}\n`;
                message += `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${selectedSession.current_participants}/${selectedSession.max_participants}\n`;
                message += `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${selectedSession.skill_level}/10\n`;
                message += `üéø *–¢—Ä–µ–Ω–∞–∂–µ—Ä:* ${selectedSession.simulator_name}\n`;
                message += `üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${selectedSession.trainer_name}\n`;
                message += `üí∞ *–¶–µ–Ω–∞:* ${formattedPrice} —Ä—É–±.\n`;
                message += `üí≥ *–ë–∞–ª–∞–Ω—Å:* ${formattedBalance} —Ä—É–±.\n\n`;
                message += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                state.data.selected_session = selectedSession;
                state.step = 'confirm_group_training';
                userStates.set(chatId, state);

                return bot.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è'],
                            ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
                            ['‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª'],
                            ['üîô –ù–∞–∑–∞–¥']
                        ],
                        resize_keyboard: true
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
                return bot.sendMessage(chatId,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
        }

        case 'select_child_for_training': {
            const selectedIndex = parseInt(msg.text) - 1;
            const state = userStates.get(chatId);
            
            if (isNaN(selectedIndex) || selectedIndex < 0 || selectedIndex >= state.data.available_children.length) {
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞
                const balanceResult = await pool.query(
                    'SELECT balance FROM wallets WHERE client_id = $1',
                    [state.data.client_id]
                );
                const balance = parseFloat(balanceResult.rows[0]?.balance || 0);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                state.data.client_balance = balance;
                userStates.set(chatId, state);

                return bot.sendMessage(chatId,
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.',
                    {
                        reply_markup: {
                            keyboard: [
                                ...state.data.available_children.map(child => [`${child.full_name}`]),
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }
                );
            }

            const selectedChild = state.data.available_children[selectedIndex];
            const selectedSession = state.data.selected_session;

            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞
            const balanceResult = await pool.query(
                'SELECT balance FROM wallets WHERE client_id = $1',
                [state.data.client_id]
            );
            const balance = parseFloat(balanceResult.rows[0]?.balance || 0);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            state.data.client_balance = balance;

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            const date = new Date(selectedSession.session_date);
            const dayOfWeek = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'][date.getDay()];
            const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
            const [hours, minutes] = selectedSession.start_time.split(':');
            const formattedTime = `${hours}:${minutes}`;

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ
            const price = parseFloat(selectedSession.price);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            let message = 'üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:*\n\n';
            message += `üë§ *–§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞:* ${selectedChild.full_name}\n`;
            message += `üìÖ *–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:* ${formattedDate} (${dayOfWeek})\n`;
            message += `‚è∞ *–í—Ä–µ–º—è:* ${formattedTime}\n`;
            message += `üë• *–ì—Ä—É–ø–ø–∞:* ${selectedSession.group_name}\n`;
            message += `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${selectedSession.current_participants}/${selectedSession.max_participants}\n`;
            message += `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${selectedSession.skill_level}/10\n`;
            message += `üéø *–¢—Ä–µ–Ω–∞–∂–µ—Ä:* ${selectedSession.simulator_name}\n`;
            message += `üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${selectedSession.trainer_name}\n`;
            message += `üí∞ *–¶–µ–Ω–∞:* ${price.toFixed(2)} —Ä—É–±.\n`;
            message += `üí≥ *–ë–∞–ª–∞–Ω—Å:* ${balance.toFixed(2)} —Ä—É–±.\n\n`;
            message += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            state.data.selected_child = selectedChild;
            state.step = 'confirm_group_training';
            userStates.set(chatId, state);

            return bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è'],
                        ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
                        ['‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª'],
                        ['üîô –ù–∞–∑–∞–¥']
                    ],
                    resize_keyboard: true
                }
            });
        }
        case 'confirm_group_training': {
            if (msg.text === 'üîô –ù–∞–∑–∞–¥') {
                state.step = 'group_training_selection';
                userStates.set(chatId, state);
                return bot.sendMessage(chatId,
                    'üéø *–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:*\n\n' +
                    '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }

            if (msg.text === '‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª') {
                userStates.delete(chatId);
                return showMainMenu(chatId);
            }

            if (msg.text === '‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è') {
                try {
                    const selectedSession = state.data.selected_session;
                    const client = await pool.connect();

                    try {
                        await client.query('BEGIN');

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
                        const balanceResult = await client.query(
                            'SELECT balance FROM wallets WHERE client_id = $1',
                            [state.data.client_id]
                        );
                        const balance = parseFloat(balanceResult.rows[0].balance);
                        const price = parseFloat(selectedSession.price);

                        if (balance < price) {
                            return bot.sendMessage(chatId,
                                `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n\n` +
                                `–¢—Ä–µ–±—É–µ—Ç—Å—è: ${price.toFixed(2)} —Ä—É–±.\n` +
                                `–î–æ—Å—Ç—É–ø–Ω–æ: ${balance.toFixed(2)} —Ä—É–±.\n\n` +
                                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.`,
                                {
                                    reply_markup: {
                                        keyboard: [
                                            ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
                                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                        ],
                                        resize_keyboard: true
                                    }
                                }
                            );
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
                        let participantLevel;
                        if (state.data.selected_child) {
                            const childResult = await client.query(
                                'SELECT skill_level FROM children WHERE id = $1',
                                [state.data.selected_child.id]
                            );
                            participantLevel = childResult.rows[0].skill_level;
                        } else {
                            const clientResult = await client.query(
                                'SELECT skill_level FROM clients WHERE id = $1',
                                [state.data.client_id]
                            );
                            participantLevel = clientResult.rows[0].skill_level;
                        }

                        if (participantLevel > selectedSession.skill_level) {
                            return bot.sendMessage(chatId,
                                `‚ùå –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n` +
                                `–í–∞—à —É—Ä–æ–≤–µ–Ω—å: ${participantLevel}/10\n` +
                                `–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: ${selectedSession.skill_level}/10\n\n` +
                                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è.`,
                                {
                                    reply_markup: {
                                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                        resize_keyboard: true
                                    }
                                }
                            );
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
                        const participantsResult = await client.query(
                            'SELECT COUNT(*) as count FROM session_participants WHERE session_id = $1',
                            [selectedSession.id]
                        );
                        const currentParticipants = parseInt(participantsResult.rows[0].count);

                        if (currentParticipants >= selectedSession.max_participants) {
                            return bot.sendMessage(chatId,
                                '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.\n\n' +
                                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.',
                                {
                                    reply_markup: {
                                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                        resize_keyboard: true
                                    }
                                }
                            );
                        }

                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                        await client.query(
                            'INSERT INTO session_participants (session_id, client_id, child_id, status) VALUES ($1, $2, $3, $4)',
                            [
                                selectedSession.id,
                                state.data.client_id,
                                state.data.selected_child ? state.data.selected_child.id : null,
                                'confirmed'
                            ]
                        );

                        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ —Å—á–µ—Ç–∞
                        await client.query(
                            'UPDATE wallets SET balance = balance - $1 WHERE client_id = $2',
                            [price, state.data.client_id]
                        );

                        // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ—à–µ–ª—å–∫–∞
                        const walletResult = await client.query(
                            'SELECT id FROM wallets WHERE client_id = $1',
                            [state.data.client_id]
                        );

                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è description
                        const transactionDate = new Date(selectedSession.session_date);
                        const transactionFormattedDate = `${transactionDate.getDate()}.${transactionDate.getMonth() + 1}.${transactionDate.getFullYear()}`;
                        const [transactionHours, transactionMinutes] = selectedSession.start_time.split(':');
                        const transactionFormattedTime = `${transactionHours}:${transactionMinutes}`;

                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        await client.query(
                            'INSERT INTO transactions (wallet_id, amount, type, description) VALUES ($1, $2, $3, $4)',
                            [
                                walletResult.rows[0].id,
                                price,
                                'payment',
                                `–ì—Ä—É–ø–ø–∞: ${selectedSession.group_name}, –î–∞—Ç–∞: ${transactionFormattedDate}, –í—Ä–µ–º—è: ${transactionFormattedTime}, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${selectedSession.duration} –º–∏–Ω.`
                            ]
                        );

                        await client.query('COMMIT');

                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                        const dayOfWeek = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'][transactionDate.getDay()];
                        const formattedDateMsg = `${transactionDate.getDate().toString().padStart(2, '0')}.${(transactionDate.getMonth() + 1).toString().padStart(2, '0')}.${transactionDate.getFullYear()}`;
                        const formattedTimeMsg = `${transactionHours}:${transactionMinutes}`;

                        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
                        let message = '‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!*\n\n';
                        if (state.data.selected_child) {
                            message += `üë∂ *–†–µ–±–µ–Ω–æ–∫:* ${state.data.selected_child.full_name}\n`;
                        }
                        message += `üìÖ *–î–∞—Ç–∞:* ${formattedDateMsg} (${dayOfWeek})\n`;
                        message += `‚è∞ *–í—Ä–µ–º—è:* ${formattedTimeMsg}\n`;
                        message += `üë• *–ì—Ä—É–ø–ø–∞:* ${selectedSession.group_name}\n`;
                        message += `üéø *–¢—Ä–µ–Ω–∞–∂–µ—Ä:* ${selectedSession.simulator_name}\n`;
                        message += `üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${selectedSession.trainer_name}\n`;
                        message += `üí∞ *–¶–µ–Ω–∞:* ${price.toFixed(2)} —Ä—É–±.\n`;
                        message += `üí≥ *–ë–∞–ª–∞–Ω—Å:* ${(balance - price).toFixed(2)} —Ä—É–±.\n\n`;
                        message += '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "üìã *–ú–æ–∏ –∑–∞–ø–∏—Å–∏*"';

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                        const { notifyNewGroupTrainingParticipant } = require('./admin-bot');
                        
                        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                        const clientInfoResult = await pool.query(
                            'SELECT full_name, phone FROM clients WHERE id = $1',
                            [state.data.client_id]
                        );
                        
                        const clientData = clientInfoResult.rows[0];
                        
                        await notifyNewGroupTrainingParticipant({
                            ...selectedSession,
                            client_name: clientData.full_name,
                            client_phone: clientData.phone,
                            child_name: state.data.selected_child ? state.data.selected_child.full_name : null,
                            current_participants: currentParticipants + 1
                        });

                        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        userStates.delete(chatId);

                        return bot.sendMessage(chatId, message, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏'],
                                    ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true
                            }
                        });
                    } catch (error) {
                        await client.query('ROLLBACK');
                        throw error;
                    } finally {
                        client.release();
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:', error);
                    return bot.sendMessage(chatId,
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            }
            break;
        }
        case 'main_menu': {
            if (msg.text === 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏') {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –¥–µ—Ç–µ–π
                    const result = await pool.query(
                        `WITH client_sessions AS (
                            -- –ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                            SELECT 
                                sp.id,
                                sp.session_id,
                                sp.child_id,
                                c.full_name as participant_name,
                                ts.session_date,
                                ts.start_time,
                                ts.duration,
                                ts.equipment_type,
                                s.name as simulator_name,
                                g.name as group_name,
                                t.full_name as trainer_name,
                                ts.skill_level,
                                ts.price,
                                ts.max_participants,
                                (SELECT COUNT(*) FROM session_participants WHERE session_id = ts.id) as current_participants,
                                'group' as session_type
                            FROM session_participants sp
                            JOIN training_sessions ts ON sp.session_id = ts.id
                            JOIN simulators s ON ts.simulator_id = s.id
                            LEFT JOIN groups g ON ts.group_id = g.id
                            LEFT JOIN trainers t ON ts.trainer_id = t.id
                            LEFT JOIN children c ON sp.child_id = c.id
                            JOIN clients cl ON sp.client_id = cl.id
                            WHERE sp.client_id = $1
                            AND ts.status = 'scheduled'
                            AND (
                                ts.session_date > CURRENT_DATE AT TIME ZONE 'Asia/Yekaterinburg'
                                OR (
                                    ts.session_date = CURRENT_DATE AT TIME ZONE 'Asia/Yekaterinburg'
                                    AND ts.start_time > (NOW() AT TIME ZONE 'Asia/Yekaterinburg')::time
                                )
                            )
                            UNION ALL
                            -- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                            SELECT 
                                its.id,
                                its.id as session_id,
                                its.child_id,
                                COALESCE(c.full_name, cl.full_name) as participant_name,
                                its.preferred_date as session_date,
                                its.preferred_time as start_time,
                                its.duration,
                                its.equipment_type,
                                s.name as simulator_name,
                                NULL as group_name,
                                NULL as trainer_name,
                                NULL as skill_level,
                                its.price,
                                NULL as max_participants,
                                NULL as current_participants,
                                'individual' as session_type
                            FROM individual_training_sessions its
                            JOIN simulators s ON its.simulator_id = s.id
                            LEFT JOIN children c ON its.child_id = c.id
                            JOIN clients cl ON its.client_id = cl.id
                            WHERE its.client_id = $1
                            AND its.preferred_date >= CURRENT_DATE AT TIME ZONE 'Asia/Yekaterinburg'
                        )
                        SELECT * FROM client_sessions
                        ORDER BY session_date, start_time`,
                        [state.data.client_id]
                    );

                    if (result.rows.length === 0) {
                        return bot.sendMessage(chatId,
                            '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.',
                            {
                                reply_markup: {
                                    keyboard: [['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }

                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
                    let message = 'üìã *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n';
                    result.rows.forEach((session, index) => {
                        const date = new Date(session.session_date);
                        const dayOfWeek = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'][date.getDay()];
                        const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
                        const [hours, minutes] = session.start_time.split(':');
                        const formattedTime = `${hours}:${minutes}`;

                        message += `*–ó–∞–ø–∏—Å—å ${index + 1}:*\n`;
                        message += `üë§ *–£—á–∞—Å—Ç–Ω–∏–∫:* ${session.participant_name}\n`;
                        message += `üìÖ *–î–∞—Ç–∞:* ${formattedDate} (${dayOfWeek})\n`;
                        message += `‚è∞ *–í—Ä–µ–º—è:* ${formattedTime}\n`;
                        message += `‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${session.duration} –º–∏–Ω—É—Ç\n`;
                        
                        if (session.session_type === 'individual') {
                            message += `üèÇ *–¢–∏–ø:* ${session.equipment_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏' : '–°–Ω–æ—É–±–æ—Ä–¥'}\n`;
                        } else {
                            message += `üë• *–ì—Ä—É–ø–ø–∞:* ${session.group_name}\n`;
                            message += `üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä:* ${session.trainer_name}\n`;
                            message += `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${session.skill_level}/10\n`;
                            message += `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${session.current_participants}/${session.max_participants}\n`;
                        }
                        
                        message += `üéø *–¢—Ä–µ–Ω–∞–∂–µ—Ä:* ${session.simulator_name}\n`;
                        message += `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${Number(session.price).toFixed(2)} —Ä—É–±.\n\n`;
                    });

                    message += '–î–ª—è –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"';

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    state.data.sessions = result.rows;
                    state.step = 'view_sessions';
                    userStates.set(chatId, state);

                    return bot.sendMessage(chatId, message, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                                ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error);
                    return bot.sendMessage(chatId,
                        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }
            }
            // ... existing code ...
        }
        case 'view_sessions': {
            if (msg.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É') {
                if (!state.data.sessions || state.data.sessions.length === 0) {
                    return bot.sendMessage(chatId,
                        '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã
                let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n\n';
                state.data.sessions.forEach((session, index) => {
                    const date = new Date(session.session_date);
                    const dayOfWeek = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'][date.getDay()];
                    const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
                    const [hours, minutes] = session.start_time.split(':');
                    const formattedTime = `${hours}:${minutes}`;

                    message += `${index + 1}. ${session.participant_name} - ${formattedDate} (${dayOfWeek}) ${formattedTime}\n`;
                });

                state.step = 'cancel_training_selection';
                userStates.set(chatId, state);

                return bot.sendMessage(chatId, message, {
                    reply_markup: {
                        keyboard: [
                            ...state.data.sessions.map((_, i) => [`${i + 1}`]),
                            ['üîô –ù–∞–∑–∞–¥']
                        ],
                        resize_keyboard: true
                    }
                });
            } else if (msg.text === 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
                state.step = 'main_menu';
                userStates.set(chatId, state);
                return showMainMenu(chatId);
            }
            break;
        }

        case 'cancel_training_selection': {
            if (msg.text === 'üîô –ù–∞–∑–∞–¥') {
                state.step = 'view_sessions';
                userStates.set(chatId, state);
                return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                    reply_markup: {
                        keyboard: [
                            ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                            ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                });
            }

            const selectedIndex = parseInt(msg.text) - 1;
            if (isNaN(selectedIndex) || selectedIndex < 0 || selectedIndex >= state.data.sessions.length) {
                return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.');
            }

            const selectedSession = state.data.sessions[selectedIndex];
            
            try {
                if (selectedSession.session_type === 'group') {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    const groupInfoRes = await pool.query(
                        `SELECT ts.session_date, ts.start_time, ts.group_id, ts.trainer_id, ts.simulator_id, ts.price, ts.max_participants,
                         g.name as group_name, t.full_name as trainer_name, s.name as simulator_name
                         FROM training_sessions ts
                         LEFT JOIN groups g ON ts.group_id = g.id
                         LEFT JOIN trainers t ON ts.trainer_id = t.id
                         LEFT JOIN simulators s ON ts.simulator_id = s.id
                         WHERE ts.id = $1`,
                        [selectedSession.session_id]
                    );
                    const groupInfo = groupInfoRes.rows[0];
                    
                    // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                    const seatsRes = await pool.query(
                        'SELECT COUNT(*) FROM session_participants WHERE session_id = $1',
                        [selectedSession.session_id]
                    );
                    const currentParticipants = parseInt(seatsRes.rows[0].count) - 1; // -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã —É–¥–∞–ª—è–µ–º –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    const maxParticipants = groupInfo.max_participants;
                    const seatsLeft = `${currentParticipants}/${maxParticipants}`;

                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                    const clientRes = await pool.query('SELECT full_name, phone FROM clients WHERE id = $1', [state.data.client_id]);
                    const client = clientRes.rows[0];

                    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    await pool.query('DELETE FROM session_participants WHERE id = $1', [selectedSession.id]);

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                    await pool.query('UPDATE wallets SET balance = balance + $1 WHERE client_id = $2', [selectedSession.price, state.data.client_id]);
                    
                    // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ—à–µ–ª—å–∫–∞
                    const walletResult = await pool.query(
                        'SELECT id FROM wallets WHERE client_id = $1',
                        [state.data.client_id]
                    );

                    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    await pool.query(
                        'INSERT INTO transactions (wallet_id, amount, type, description) VALUES ($1, $2, $3, $4)',
                        [
                            walletResult.rows[0].id,
                            selectedSession.price,
                            'refund',
                            `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ ${selectedSession.session_type === 'group' ? '–≥—Ä—É–ø–ø–æ–≤—É—é' : '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é'} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É; ${selectedSession.session_type === 'group' ? `–ì—Ä—É–ø–ø–∞: ${groupInfo.group_name},` : `–¢—Ä–µ–Ω–∞–∂–µ—Ä: ${ind.simulator_name},`} –î–∞—Ç–∞: ${selectedSession.session_type === 'group' ? groupInfo.session_date : ind.preferred_date}, –í—Ä–µ–º—è: ${selectedSession.session_type === 'group' ? groupInfo.start_time : ind.preferred_time}`
                        ]
                    );

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    await notifyAdminGroupTrainingCancellation({
                        clientName: client.full_name,
                        clientPhone: client.phone,
                        date: groupInfo.session_date,
                        time: groupInfo.start_time,
                        groupName: groupInfo.group_name,
                        trainerName: groupInfo.trainer_name,
                        simulatorName: groupInfo.simulator_name,
                        seatsLeft,
                        refund: selectedSession.price,
                        adminChatId: process.env.ADMIN_TELEGRAM_ID
                    });

                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
                    const date = new Date(selectedSession.session_date);
                    const dayOfWeek = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'][date.getDay()];
                    const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
                    const [hours, minutes] = selectedSession.start_time.split(':');
                    const formattedTime = `${hours}:${minutes}`;

                    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                    const clientMessage = 
                        '‚úÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!*\n\n' +
                        `üë§ *–£—á–∞—Å—Ç–Ω–∏–∫:* ${selectedSession.participant_name}\n` +
                        `üìÖ *–î–∞—Ç–∞:* ${formattedDate} (${dayOfWeek})\n` +
                        `‚è∞ *–í—Ä–µ–º—è:* ${formattedTime}\n` +
                        `üí∞ *–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:* ${Number(selectedSession.price).toFixed(2)} —Ä—É–±.\n\n` +
                        '–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.';

                    state.step = 'main_menu';
                    userStates.set(chatId, state);

                    return bot.sendMessage(chatId, clientMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏'],
                                ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    });
                } else {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    const indRes = await pool.query(
                        `SELECT its.preferred_date, its.preferred_time, its.duration, its.simulator_id, its.price, s.name as simulator_name
                         FROM individual_training_sessions its
                         JOIN simulators s ON its.simulator_id = s.id
                         WHERE its.id = $1`,
                        [selectedSession.id]
                    );
                    const ind = indRes.rows[0];

                    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç—ã
                    await pool.query(
                        `UPDATE schedule SET is_booked = false
                         WHERE simulator_id = $1 AND date = $2
                         AND start_time >= $3 AND start_time < ($3::time + ($4 * interval '1 minute'))`,
                        [ind.simulator_id, ind.preferred_date, ind.preferred_time, ind.duration]
                    );

                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                    const clientRes = await pool.query('SELECT full_name, phone FROM clients WHERE id = $1', [state.data.client_id]);
                    const client = clientRes.rows[0];

                    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    await pool.query('DELETE FROM individual_training_sessions WHERE id = $1', [selectedSession.id]);

                    // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ—à–µ–ª—å–∫–∞
                    const walletResult = await pool.query(
                        'SELECT id FROM wallets WHERE client_id = $1',
                        [state.data.client_id]
                    );
                    
                    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    await pool.query(
                        'INSERT INTO transactions (wallet_id, amount, type, description) VALUES ($1, $2, $3, $4)',
                        [
                            walletResult.rows[0].id,
                            selectedSession.price,
                            'refund',
                            `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ ${selectedSession.session_type === 'group' ? '–≥—Ä—É–ø–ø–æ–≤—É—é' : '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é'} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É; ${selectedSession.session_type === 'group' ? `–ì—Ä—É–ø–ø–∞: ${groupInfo.group_name},` : `–¢—Ä–µ–Ω–∞–∂–µ—Ä: ${ind.simulator_name},`} –î–∞—Ç–∞: ${selectedSession.session_type === 'group' ? groupInfo.session_date : ind.preferred_date}, –í—Ä–µ–º—è: ${selectedSession.session_type === 'group' ? groupInfo.start_time : ind.preferred_time}`
                        ]
                    );
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                    await pool.query('UPDATE wallets SET balance = balance + $1 WHERE client_id = $2', [selectedSession.price, state.data.client_id]);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    await notifyAdminIndividualTrainingCancellation({
                        clientName: client.full_name,
                        clientPhone: client.phone,
                        date: ind.preferred_date,
                        time: ind.preferred_time,
                        simulatorName: ind.simulator_name,
                        refund: selectedSession.price,
                        adminChatId: process.env.ADMIN_TELEGRAM_ID
                    });

                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
                    const date = new Date(selectedSession.session_date);
                    const dayOfWeek = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'][date.getDay()];
                    const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;
                    const [hours, minutes] = selectedSession.start_time.split(':');
                    const formattedTime = `${hours}:${minutes}`;

                    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                    const clientMessage = 
                        '‚úÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!*\n\n' +
                        `üë§ *–£—á–∞—Å—Ç–Ω–∏–∫:* ${selectedSession.participant_name}\n` +
                        `üìÖ *–î–∞—Ç–∞:* ${formattedDate} (${dayOfWeek})\n` +
                        `‚è∞ *–í—Ä–µ–º—è:* ${formattedTime}\n` +
                        `üí∞ *–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:* ${Number(selectedSession.price).toFixed(2)} —Ä—É–±.\n\n` +
                        '–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.';

                    state.step = 'main_menu';
                    userStates.set(chatId, state);

                    return bot.sendMessage(chatId, clientMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            keyboard: [
                                ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏'],
                                ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    });
                }
                // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ...
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
                return bot.sendMessage(chatId,
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
        }
        case 'add_child_name': {
            if (msg.text === 'üîô –û—Ç–º–µ–Ω–∞') {
                userStates.delete(chatId);
                return showPersonalCabinet(chatId);
            }

            state.data.child_name = msg.text;
            state.step = 'add_child_birth_date';
            userStates.set(chatId, state);

            return bot.sendMessage(chatId,
                'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:',
                {
                    reply_markup: {
                        keyboard: [['üîô –û—Ç–º–µ–Ω–∞']],
                        resize_keyboard: true
                    }
                }
            );
        }

        case 'add_child_birth_date': {
            if (msg.text === 'üîô –û—Ç–º–µ–Ω–∞') {
                userStates.delete(chatId);
                return showPersonalCabinet(chatId);
            }

            const birthDate = validateDate(msg.text);
            if (!birthDate) {
                return bot.sendMessage(chatId,
                    '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:',
                    {
                        reply_markup: {
                            keyboard: [['üîô –û—Ç–º–µ–Ω–∞']],
                            resize_keyboard: true
                        }
                    }
                );
            }

            try {
                await pool.query(
                    'INSERT INTO children (parent_id, full_name, birth_date, sport_type, skill_level) VALUES ($1, $2, $3, $4, $5)',
                    [state.data.client_id, state.data.child_name, birthDate, 'ski', null]
                );

                userStates.delete(chatId);
                await bot.sendMessage(chatId,
                    '‚úÖ –†–µ–±–µ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
                return showPersonalCabinet(chatId);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞:', error);
                return bot.sendMessage(chatId,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
        }
    }
    return;
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const state = userStates.get(chatId);

    try {
        if (!state) {
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.',
                show_alert: true
            });
            return showMainMenu(chatId);
        }

        if (data === 'back_to_date') {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
            state.step = 'preferred_date';
            userStates.set(chatId, state);
            await bot.answerCallbackQuery(callbackQuery.id);
            return bot.sendMessage(chatId,
                'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:*\n\n' +
                '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }

        if (data === 'booked') {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ',
                show_alert: true
            });
            return;
        }

        if (data.startsWith('time_')) {
            const [, simulatorId, time] = data.split('_');
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const balanceResult = await pool.query(
                    'SELECT balance FROM wallets WHERE client_id = $1',
                    [state.data.client_id]
                );
                const balance = parseFloat(balanceResult.rows[0]?.balance || 0);

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ
                const simulatorResult = await pool.query(
                    'SELECT name FROM simulators WHERE id = $1',
                    [simulatorId]
                );
                const simulatorName = simulatorResult.rows[0].name;

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –ß–ß:–ú–ú
                const [hours, minutes] = time.split(':');
                const formattedTime = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                const [year, month, day] = state.data.preferred_date.split('-');
                const formattedDate = `${day}.${month}.${year}`;

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
                let participantName;
                if (state.data.is_child) {
                    participantName = state.data.child_name;
                } else {
                    const clientResult = await pool.query(
                        'SELECT full_name FROM clients WHERE id = $1',
                        [state.data.client_id]
                    );
                    participantName = clientResult.rows[0].full_name;
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                let summaryMessage = 'üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n\n';
                summaryMessage += '*–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n';
                summaryMessage += `‚Ä¢ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participantName}\n`;
                summaryMessage += `‚Ä¢ –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è\n`;
                summaryMessage += `‚Ä¢ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ: ${state.data.equipment_type === 'ski' ? '–ì–æ—Ä–Ω—ã–µ –ª—ã–∂–∏ üéø' : '–°–Ω–æ—É–±–æ—Ä–¥ üèÇ'}\n`;
                summaryMessage += `‚Ä¢ –¢—Ä–µ–Ω–µ—Ä: ${state.data.with_trainer ? '–° —Ç—Ä–µ–Ω–µ—Ä–æ–º üë®‚Äçüè´' : '–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ üë§'}\n`;
                summaryMessage += `‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${state.data.duration} –º–∏–Ω—É—Ç ‚è±\n`;
                summaryMessage += `‚Ä¢ –î–∞—Ç–∞: ${formattedDate}\n`;
                summaryMessage += `‚Ä¢ –í—Ä–µ–º—è: ${formattedTime}\n`;
                summaryMessage += `‚Ä¢ –¢—Ä–µ–Ω–∞–∂–µ—Ä: ${simulatorName} (‚Ññ${simulatorId})\n`;
                summaryMessage += `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${state.data.price} —Ä—É–±. üí∞\n`;
                summaryMessage += `‚Ä¢ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} —Ä—É–±. üí≥\n\n`;

                summaryMessage += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                state.step = 'confirm_booking';
                state.data.preferred_time = time;
                state.data.simulator_id = simulatorId;
                state.data.simulator_name = simulatorName;
                userStates.set(chatId, state);

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await bot.deleteMessage(chatId, callbackQuery.message.message_id);

                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
                await bot.answerCallbackQuery(callbackQuery.id);

                return bot.sendMessage(chatId, summaryMessage, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
                            ['‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª'],
                            ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å']
                        ],
                        resize_keyboard: true
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏:', {
                    error: error.message,
                    stack: error.stack,
                    state: state,
                    data: callbackQuery.data
                });
                
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    show_alert: true
                });
                return bot.sendMessage(chatId,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞:', error);
        try {
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                show_alert: true
            });
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å:', e);
        }
        return showMainMenu(chatId);
    }
});

async function showMyBookings(chatId) {
    try {
        const client = await getClientByTelegramId(chatId);
        if (!client) {
            await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
            return;
        }

        const sessions = await Booking.findByUser(client.id);
        
        if (!sessions || sessions.length === 0) {
            await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.');
            return;
        }

        let message = 'üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n';
        
        sessions.forEach(session => {
            const price = session.price ? Number(session.price) : 0;
            const formattedPrice = price.toFixed(2);
            
            message += `üèÇ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${session.simulator_name}\n`;
            message += `üìÖ –î–∞—Ç–∞: ${formatDate(session.session_date)}\n`;
            message += `‚è∞ –í—Ä–µ–º—è: ${session.start_time} - ${session.end_time}\n`;
            message += `üë§ ${session.is_child ? '–†–µ–±–µ–Ω–æ–∫' : '–ö–ª–∏–µ–Ω—Ç'}: ${session.is_child ? session.child_name : session.client_name}\n`;
            message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${formattedPrice} —Ä—É–±.\n`;
            if (session.skill_level) {
                message += `üìä –£—Ä–æ–≤–µ–Ω—å: ${session.skill_level}\n`;
            }
            message += `üè∑Ô∏è –°—Ç–∞—Ç—É—Å: ${getStatusText(session.participant_status)}\n\n`;
        });

        await bot.sendMessage(chatId, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞, –¥–ª—è –∫–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
async function askIndividualForWhom(chatId, clientId) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞
    const childrenResult = await pool.query(
        'SELECT id, full_name FROM children WHERE parent_id = $1',
        [clientId]
    );
    const children = childrenResult.rows;
    // –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    let message = '–î–ª—è –∫–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?';
    const keyboard = [ ['1. –î–ª—è —Å–µ–±—è'] ];
    children.forEach((child, idx) => {
        keyboard.push([`${idx + 2}. ${child.full_name}`]);
    });
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.set(chatId, {
        step: 'individual_for_whom',
        data: { client_id: clientId, children }
    });
    await bot.sendMessage(chatId, message, {
        reply_markup: {
            keyboard,
            resize_keyboard: true
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
function formatDate(dateStr) {
    const [year, month, day] = dateStr.split('-');
    return `${day}.${month}.${year}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async function handleTopUpBalance(chatId, clientId) {
    try {
        const clientResult = await pool.query(
            'SELECT c.id, w.wallet_number, w.balance FROM clients c JOIN wallets w ON c.id = w.client_id WHERE c.id = $1',
            [clientId]
        );

        if (!clientResult.rows[0]) {
            return bot.sendMessage(chatId,
                '‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                {
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }

        const { wallet_number: walletNumber, balance } = clientResult.rows[0];
        const formattedWalletNumber = formatWalletNumber(walletNumber);
        const formattedBalance = parseFloat(balance).toFixed(2);

        const message = 
            '<b>üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n' +
            `<b>–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:</b> <code>${formattedWalletNumber}</code>\n` +
            `<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${formattedBalance} —Ä—É–±.\n\n` +
            '<b>–í–ê–ñ–ù–û!!!</b>\n' +
            '–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –ø–æ –°–ë–ü.\n' +
            '–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.\n' +
            '–î–ª—è —ç—Ç–æ–≥–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, –∫–ª–∏–∫–Ω—É–≤ –ø–æ –Ω–µ–º—É.\n\n' +
            `–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞: ${process.env.PAYMENT_LINK}`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                resize_keyboard: true
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        await bot.sendMessage(chatId,
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            {
                reply_markup: {
                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                    resize_keyboard: true
                }
            }
        );
    }
}

// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    if (msg.text.startsWith('/')) return;
    const chatId = msg.chat.id;
    const state = userStates.get(chatId);

    // ... existing code ...

    if (msg.text === 'üí∞ –ö–æ—à–µ–ª–µ–∫') {
        try {
            const clientResult = await pool.query(
                'SELECT c.id, c.full_name, w.wallet_number, w.balance FROM clients c JOIN wallets w ON c.id = w.client_id WHERE c.telegram_id = $1',
                [chatId]
            );

            if (!clientResult.rows[0]) {
                return bot.sendMessage(chatId,
                    '‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true
                        }
                    }
                );
            }

            const { id: clientId, full_name, wallet_number: walletNumber, balance } = clientResult.rows[0];
            const formattedWalletNumber = formatWalletNumber(walletNumber);

            await bot.sendMessage(chatId,
                `üí≥ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ*\n\n` +
                `üë§ *–í–ª–∞–¥–µ–ª–µ—Ü:* ${full_name}\n` +
                `üí≥ *–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞*: \`${formattedWalletNumber}\`\n` +
                `üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å*: ${parseFloat(balance).toFixed(2)} —Ä—É–±.\n\n` +
                `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ:', error);
            await bot.sendMessage(chatId,
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                {
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }
    }

    if (msg.text === 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å') {
        try {
            const state = userStates.get(chatId);
            let clientId;

            if (state && state.client_id) {
                clientId = state.client_id;
            } else {
                const clientResult = await pool.query(
                    'SELECT id FROM clients WHERE telegram_id = $1',
                    [chatId]
                );

                if (!clientResult.rows[0]) {
                    return bot.sendMessage(chatId,
                        '‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                        {
                            reply_markup: {
                                keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                                resize_keyboard: true
                            }
                        }
                    );
                }

                clientId = clientResult.rows[0].id;
            }

            await handleTopUpBalance(chatId, clientId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            await bot.sendMessage(chatId,
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                {
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }
    }

    // ... existing code ...
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
function calculateAge(birthDate) {
    const today = new Date();
    const birth = new Date(birthDate);
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
        age--;
    }
    
    return age;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
function formatBirthDate(birthDate) {
    const date = new Date(birthDate);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
async function showPersonalCabinet(chatId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        const clientResult = await pool.query(
            `SELECT c.*, 
                    COALESCE(c.skill_level, 0) as skill_level 
             FROM clients c 
             WHERE c.telegram_id = $1`,
            [chatId]
        );

        if (!clientResult.rows[0]) {
            return bot.sendMessage(chatId,
                '‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                {
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                        resize_keyboard: true
                    }
                }
            );
        }

        const client = clientResult.rows[0];
        const clientAge = calculateAge(client.birth_date);
        const formattedBirthDate = formatBirthDate(client.birth_date);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö
        const childrenResult = await pool.query(
            `SELECT c.*, 
                    COALESCE(c.skill_level, 0) as skill_level 
             FROM children c 
             WHERE c.parent_id = $1 
             ORDER BY c.birth_date`,
            [client.id]
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = `üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n`;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
        message += `*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:*\n`;
        message += `üë§ *–§–ò–û:* ${client.full_name}\n`;
        message += `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${formattedBirthDate} (${clientAge} –ª–µ—Ç)\n`;
        message += `üéø *–£—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–∞–Ω–∏—è:* ${client.skill_level || '–ù–µ —É–∫–∞–∑–∞–Ω'}/5\n\n`;

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ç—è—Ö
        if (childrenResult.rows.length > 0) {
            message += `*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ç—è—Ö:*\n`;
            childrenResult.rows.forEach((child, index) => {
                const childAge = calculateAge(child.birth_date);
                const childBirthDate = formatBirthDate(child.birth_date);
                message += `\n*–†–µ–±–µ–Ω–æ–∫ ${index + 1}:*\n`;
                message += `üë∂ *–§–ò–û:* ${child.full_name}\n`;
                message += `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${childBirthDate} (${childAge} –ª–µ—Ç)\n`;
                message += `üéø *–£—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–∞–Ω–∏—è:* ${child.skill_level || '–ù–µ —É–∫–∞–∑–∞–Ω'}/5\n`;
            });
        }

        message += `\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const keyboard = [
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ];

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                keyboard,
                resize_keyboard: true
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:', error);
        await bot.sendMessage(chatId,
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            {
                reply_markup: {
                    keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                    resize_keyboard: true
                }
            }
        );
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
async function handleWalletTopUp(chatId, clientId, amount) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        const clientResult = await pool.query(
            'SELECT name, wallet_number, balance FROM clients WHERE id = $1',
            [clientId]
        );

        if (clientResult.rows.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const client = clientResult.rows[0];
        const newBalance = client.balance + amount;

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await pool.query(
            'UPDATE clients SET balance = $1 WHERE id = $2',
            [newBalance, clientId]
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        const clientMessage = `
‚úÖ –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω!

üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${amount} —Ä—É–±.
üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${newBalance} —Ä—É–±.
        `;
        await bot.sendMessage(chatId, clientMessage);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        const { notifyAdminWalletRefilled } = require('./admin-bot');
        await notifyAdminWalletRefilled({
            clientName: client.name,
            amount: amount,
            walletNumber: client.wallet_number,
            balance: newBalance
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞');
    }
}

