require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { pool } = require('../db');
const { handleRegistration, showMainMenu } = require('./handlers');
const { getClientByTelegramId, getChildByParentId } = require('./db-utils');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
function generateWalletNumber() {
    return Math.random().toString().slice(2, 18);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id.toString();
    const username = msg.from.username || '';
    const nickname = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        await bot.sendSticker(chatId, 'CAACAgIAAxkBAAELsYplxZQAAUgVxEp4MoVzM0IhpzK0qhwAAjcBAAIw1J0RxkeNX64LHEo0BA');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const client = await getClientByTelegramId(telegramId);

        if (!client) {
            // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            userStates.set(chatId, {
                step: 'registration',
                data: {
                    telegram_id: telegramId,
                    username: username,
                    nickname: nickname
                }
            });

            await bot.sendMessage(chatId, 
                'üéø –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞! üèî\n\n' +
                'üåü –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Ski-instruktor! –Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n' +
                '‚Ä¢ üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–º —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ\n' +
                '‚Ä¢ ‚õ∑ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –ö—É–ª–∏–≥–µ –∑–∏–º–æ–π\n' +
                '‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º\n' +
                '‚Ä¢ üéÅ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n\n' +
                'üöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, ' +
                '–∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ! üéØ',
                {
                    reply_markup: {
                        keyboard: [[{ text: 'üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor' }]],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                }
            );
        } else {
            // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await bot.sendMessage(chatId, 
                'üéø –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ Ski-instruktor! üèî\n' +
                '–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?'
            );
            showMainMenu(bot, chatId);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    if (msg.text.startsWith('/')) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

    const chatId = msg.chat.id;
    const state = userStates.get(chatId);

    if (!state) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        switch (msg.text) {
            case 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É':
                await bot.sendMessage(chatId, 
                    'üîÑ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n' +
                    '–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true,
                            one_time_keyboard: false
                        }
                    }
                );
                break;

            case 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏':
                await bot.sendMessage(chatId, 
                    'üîÑ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n' +
                    '–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true,
                            one_time_keyboard: false
                        }
                    }
                );
                break;

            case 'üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
                try {
                    const client = await getClientByTelegramId(msg.from.id.toString());
                    const child = await getChildByParentId(client.id);
                    
                    let childInfo = '–Ω–µ—Ç';
                    if (child) {
                        const birthDate = new Date(child.birth_date);
                        const age = Math.floor((new Date() - birthDate) / (365.25 * 24 * 60 * 60 * 1000));
                        childInfo = `${child.full_name} (${age} –ª–µ—Ç)`;
                    }

                    await bot.sendMessage(chatId, 
                        'üë§ *–í–∞—à–∞ –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n\n' +
                        `üìù *–§–ò–û:* ${client.full_name}\n` +
                        `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${new Date(client.birth_date).toLocaleDateString()}\n` +
                        `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${client.phone}\n` +
                        `ÔøΩÔøΩ *–†–µ–±–µ–Ω–æ–∫:* ${childInfo}\n\n` +
                        '‚úèÔ∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                        {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                keyboard: [
                                    ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'],
                                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                ],
                                resize_keyboard: true,
                                one_time_keyboard: false
                            }
                        }
                    );
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
                break;

            case 'üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç':
                await bot.sendMessage(chatId, 
                    'üîÑ –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n' +
                    '–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã!',
                    {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
                            resize_keyboard: true,
                            one_time_keyboard: false
                        }
                    }
                );
                break;

            case 'üí∞ –ö–æ—à–µ–ª–µ–∫':
                try {
                    const wallet = await getClientByTelegramId(msg.from.id.toString());
                    if (wallet) {
                        await bot.sendMessage(chatId, 
                            'üí∞ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ:*\n\n' +
                            `üî¢ *–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:* ${wallet.id}\n` +
                            `üíµ *–ë–∞–ª–∞–Ω—Å:* ${wallet.balance || 0} —Ä—É–±.`,
                            {
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    keyboard: [
                                        ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
                                        ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                                    ],
                                    resize_keyboard: true,
                                    one_time_keyboard: false
                                }
                            }
                        );
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
                break;

            case 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
                showMainMenu(bot, chatId);
                break;

            case 'üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Ski-instruktor':
                userStates.set(chatId, {
                    step: 'registration',
                    data: {
                        telegram_id: msg.from.id.toString(),
                        username: msg.from.username || '',
                        nickname: msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '')
                    }
                });
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):');
                break;
        }
        return;
    }

    switch (state.step) {
        case 'registration':
            await handleRegistration(bot, msg, state);
            break;
        case 'edit_profile':
            await handleEditProfile(bot, msg, state);
            break;
        // –î–æ–±–∞–≤–∏–º –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∑–∂–µ
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'); 

function handleEditProfile(bot, msg, state) {
    const chatId = msg.chat.id;
    const currentStep = state.currentStep;
    const data = state.data;

    switch (currentStep) {
        case 'select_field':
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const field = msg.text;
            switch (field) {
                case 'üìù –§–ò–û':
                    userStates.set(chatId, {
                        step: 'edit_profile',
                        currentStep: 'new_full_name',
                        data: { ...data, field: 'full_name' }
                    });
                    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):');
                    break;
                case 'üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è':
                    userStates.set(chatId, {
                        step: 'edit_profile',
                        currentStep: 'new_birth_date',
                        data: { ...data, field: 'birth_date' }
                    });
                    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):');
                    break;
                case 'üì± –¢–µ–ª–µ—Ñ–æ–Ω':
                    userStates.set(chatId, {
                        step: 'edit_profile',
                        currentStep: 'new_phone',
                        data: { ...data, field: 'phone' }
                    });
                    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:');
                    break;
                case 'üë∂ –î–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞':
                    userStates.set(chatId, {
                        step: 'edit_profile',
                        currentStep: 'child_name',
                        data: { ...data, field: 'child_name' }
                    });
                    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞:');
                    break;
                case '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞':
                    userStates.set(chatId, {
                        step: 'edit_profile',
                        currentStep: 'child_birth_date',
                        data: { ...data, field: 'child_birth_date' }
                    });
                    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):');
                    break;
                case 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
                    showMainMenu(bot, chatId);
                    break;
            }
            break;
        case 'new_full_name':
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
            const newFullName = msg.text;
            userStates.set(chatId, {
                step: 'edit_profile',
                currentStep: 'new_phone',
                data: { ...data, full_name: newFullName }
            });
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:');
            break;
        case 'new_birth_date':
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
            const newBirthDate = msg.text;
            userStates.set(chatId, {
                step: 'edit_profile',
                currentStep: 'new_phone',
                data: { ...data, birth_date: newBirthDate }
            });
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:');
            break;
        case 'new_phone':
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            const newPhone = msg.text;
            userStates.set(chatId, {
                step: 'edit_profile',
                currentStep: 'confirm',
                data: { ...data, phone: newPhone }
            });
            await bot.sendMessage(chatId, `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ ${newPhone}?`);
            break;
        case 'child_name':
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ä–µ–±–µ–Ω–∫–∞
            const childName = msg.text;
            userStates.set(chatId, {
                step: 'edit_profile',
                currentStep: 'child_birth_date',
                data: { ...data, child_name: childName }
            });
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):');
            break;
        case 'child_birth_date':
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞
            const childBirthDate = msg.text;
            userStates.set(chatId, {
                step: 'edit_profile',
                currentStep: 'confirm',
                data: { ...data, child_birth_date: childBirthDate }
            });
            await bot.sendMessage(chatId, `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ ${childBirthDate}?`);
            break;
        case 'confirm':
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            const confirm = msg.text;
            if (confirm === '–î–∞') {
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                await saveChanges(bot, data);
            } else {
                userStates.set(chatId, {
                    step: 'edit_profile',
                    currentStep: 'select_field',
                    data: { ...data }
                });
                await bot.sendMessage(chatId, '–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.');
            }
            break;
    }
}

function saveChanges(bot, data) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', data);
    userStates.set(msg.chat.id, {
        step: 'main_menu',
        currentStep: null,
        data: {}
    });
    showMainMenu(bot, msg.chat.id);
} 